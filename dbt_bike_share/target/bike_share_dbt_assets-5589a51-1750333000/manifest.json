{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.2", "generated_at": "2025-06-19T11:36:43.157142Z", "invocation_id": "414854f6-bb77-40ad-b8d5-53bb6dcd344e", "env": {}, "project_id": "7d303b05be6082df89578076e86cce6b", "user_id": "a6346171-4971-4021-a0d3-0c4eb6194cd2", "send_anonymous_usage_stats": true, "adapter_type": "duckdb"}, "nodes": {"model.bike_share.int_rides_enriched": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main", "name": "int_rides_enriched", "resource_type": "model", "package_name": "bike_share", "path": "intermediate\\int_rides_enriched.sql", "original_file_path": "models\\intermediate\\int_rides_enriched.sql", "unique_id": "model.bike_share.int_rides_enriched", "fqn": ["bike_share", "intermediate", "int_rides_enriched"], "alias": "int_rides_enriched", "checksum": {"name": "sha256", "checksum": "5ba3d4cdaf6cdcc7721d86b061ba79d3ed938c488420e28de401b68fb4e0a3ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enriched ride data with station and time information", "columns": {"trip_duration": {"name": "trip_duration", "description": "Duration of the trip in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Start time of the trip", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stop_time": {"name": "stop_time", "description": "End time of the trip", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_station_id": {"name": "start_station_id", "description": "ID of the starting station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_station_id": {"name": "end_station_id", "description": "ID of the ending station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bike_id": {"name": "bike_id", "description": "Unique identifier for the bike used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_type": {"name": "user_type", "description": "Type of user (Member/Casual)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trip_duration_in_min": {"name": "trip_duration_in_min", "description": "Duration of the trip in minutes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "route_id": {"name": "route_id", "description": "Concatenated start and end station IDs", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bike_share://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1750333003.721451, "relation_name": "\"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"int_rides_enriched\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH rides_with_stations AS (\n    SELECT\n        r.trip_duration,\n        r.start_time,\n        r.stop_time,\n        r.start_station_id,\n        ss.station_name AS start_station_name,\n        ss.latitude AS start_station_latitude,\n        ss.longitude AS start_station_longitude,\n        r.end_station_id,\n        es.station_name AS end_station_name,\n        es.latitude AS end_station_latitude,\n        es.longitude AS end_station_longitude,\n        r.bike_id,\n        r.user_type,\n        r.birth_year,\n        u.gender,\n        r.trip_duration_in_min,\n        t.date,\n        t.hour,\n        t.day_of_week,\n        t.month,\n        t.year,\n        t.is_weekend,\n        t.time_of_day,\n        t.day_name,\n        t.month_name,\n        {{ calculate_age('r.birth_year') }} AS age\n    FROM {{ ref('stg_rides') }} r\n    LEFT JOIN {{ ref('stg_stations') }} ss\n        ON r.start_station_id = ss.station_id\n    LEFT JOIN {{ ref('stg_stations') }} es\n        ON r.end_station_id = es.station_id\n    LEFT JOIN {{ ref('stg_users') }} u\n        ON r.user_type = u.user_type AND r.birth_year = u.birth_year\n    LEFT JOIN {{ ref('int_time') }} t\n        ON CAST(r.start_time AS DATE) = t.date\n)\n\nSELECT\n    trip_duration,\n    start_time,\n    stop_time,\n    start_station_id,\n    start_station_name,\n    start_station_latitude,\n    start_station_longitude,\n    end_station_id,\n    end_station_name,\n    end_station_latitude,\n    end_station_longitude,\n    bike_id,\n    user_type,\n    birth_year,\n    gender,\n    trip_duration_in_min,\n    date,\n    hour,\n    day_of_week,\n    month,\n    year,\n    is_weekend,\n    time_of_day,\n    day_name,\n    month_name,\n    age,\n    CONCAT(start_station_id, '-', end_station_id) AS route_id\nFROM rides_with_stations", "language": "sql", "refs": [["stg_rides"], ["stg_stations"], ["stg_stations"], ["stg_users"], ["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bike_share.calculate_age"], "nodes": ["model.bike_share.stg_rides", "model.bike_share.stg_stations", "model.bike_share.stg_stations", "model.bike_share.stg_users", "model.bike_share.int_time"]}, "compiled_path": null}, "model.bike_share.int_stations": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main", "name": "int_stations", "resource_type": "model", "package_name": "bike_share", "path": "intermediate\\int_stations.sql", "original_file_path": "models\\intermediate\\int_stations.sql", "unique_id": "model.bike_share.int_stations", "fqn": ["bike_share", "intermediate", "int_stations"], "alias": "int_stations", "checksum": {"name": "sha256", "checksum": "f1aecab93aade1cc9a6a71c57f6ba55cd79b34544d6b731d9134245573eebdd7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enriched station data with traffic metrics", "columns": {"station_id": {"name": "station_id", "description": "Unique identifier for the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "station_name": {"name": "station_name", "description": "Name of the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "Latitude coordinate of the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "Longitude coordinate of the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_count": {"name": "start_count", "description": "Number of rides starting from this station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_count": {"name": "end_count", "description": "Number of rides ending at this station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_traffic": {"name": "total_traffic", "description": "Total number of arrivals and departures", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_flow": {"name": "net_flow", "description": "Difference between departures and arrivals (positive means more departures)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bike_share://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1750333003.721451, "relation_name": "\"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"int_stations\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH station_stats AS (\n    SELECT\n        s.station_id,\n        s.station_name,\n        s.latitude,\n        s.longitude,\n        COUNT(CASE WHEN r.start_station_id = s.station_id THEN 1 END) AS start_count,\n        COUNT(CASE WHEN r.end_station_id = s.station_id THEN 1 END) AS end_count\n    FROM {{ ref('stg_stations') }} s\n    LEFT JOIN {{ ref('stg_rides') }} r\n        ON s.station_id = r.start_station_id OR s.station_id = r.end_station_id\n    GROUP BY s.station_id, s.station_name, s.latitude, s.longitude\n)\n\nSELECT\n    station_id,\n    station_name,\n    latitude,\n    longitude,\n    start_count,\n    end_count,\n    (start_count + end_count) AS total_traffic,\n    (start_count - end_count) AS net_flow\nFROM station_stats", "language": "sql", "refs": [["stg_stations"], ["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.stg_stations", "model.bike_share.stg_rides"]}, "compiled_path": null}, "model.bike_share.int_time": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main", "name": "int_time", "resource_type": "model", "package_name": "bike_share", "path": "intermediate\\int_time.sql", "original_file_path": "models\\intermediate\\int_time.sql", "unique_id": "model.bike_share.int_time", "fqn": ["bike_share", "intermediate", "int_time"], "alias": "int_time", "checksum": {"name": "sha256", "checksum": "59c397beaa15a269d92a830fc8d10e100ee18c82748c715dd38ba2d6fae58984"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Temporal dimension with calendar hierarchies", "columns": {"date": {"name": "date", "description": "Calendar date from ride data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "Year extracted from date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "Month number (1-12)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "Day of month", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day_of_week": {"name": "day_of_week", "description": "Day of week (0-6, where 0 is Sunday)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hour": {"name": "hour", "description": "Hour of day (0-23)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_weekend": {"name": "is_weekend", "description": "Flag indicating if date is a weekend", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_of_day": {"name": "time_of_day", "description": "Part of day (Morning, Afternoon, Evening, Night)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bike_share://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1750333003.721451, "relation_name": "\"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"int_time\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH time_data AS (\n    SELECT DISTINCT\n        start_time::DATE AS date,\n        EXTRACT(YEAR FROM start_time) AS year,\n        EXTRACT(MONTH FROM start_time) AS month,\n        EXTRACT(DAY FROM start_time) AS day,\n        EXTRACT(DOW FROM start_time) AS day_of_week,\n        EXTRACT(HOUR FROM start_time) AS hour,\n        EXTRACT(QUARTER FROM start_time) AS quarter,\n        CASE\n            WHEN EXTRACT(DOW FROM start_time) IN (0, 6) THEN TRUE\n            ELSE FALSE\n        END AS is_weekend,\n        CASE \n            WHEN EXTRACT(MONTH FROM start_time) = 1 THEN 'January'\n            WHEN EXTRACT(MONTH FROM start_time) = 2 THEN 'February'\n            WHEN EXTRACT(MONTH FROM start_time) = 3 THEN 'March'\n            WHEN EXTRACT(MONTH FROM start_time) = 4 THEN 'April'\n            WHEN EXTRACT(MONTH FROM start_time) = 5 THEN 'May'\n            WHEN EXTRACT(MONTH FROM start_time) = 6 THEN 'June'\n            WHEN EXTRACT(MONTH FROM start_time) = 7 THEN 'July'\n            WHEN EXTRACT(MONTH FROM start_time) = 8 THEN 'August'\n            WHEN EXTRACT(MONTH FROM start_time) = 9 THEN 'September'\n            WHEN EXTRACT(MONTH FROM start_time) = 10 THEN 'October'\n            WHEN EXTRACT(MONTH FROM start_time) = 11 THEN 'November'\n            WHEN EXTRACT(MONTH FROM start_time) = 12 THEN 'December'\n        END AS month_name,\n        CASE\n            WHEN EXTRACT(DOW FROM start_time) = 0 THEN 'Sunday'\n            WHEN EXTRACT(DOW FROM start_time) = 1 THEN 'Monday'\n            WHEN EXTRACT(DOW FROM start_time) = 2 THEN 'Tuesday'\n            WHEN EXTRACT(DOW FROM start_time) = 3 THEN 'Wednesday'\n            WHEN EXTRACT(DOW FROM start_time) = 4 THEN 'Thursday'\n            WHEN EXTRACT(DOW FROM start_time) = 5 THEN 'Friday'\n            WHEN EXTRACT(DOW FROM start_time) = 6 THEN 'Saturday'\n        END AS day_name,\n        CASE\n            WHEN EXTRACT(HOUR FROM start_time) BETWEEN 6 AND 11 THEN 'Morning'\n            WHEN EXTRACT(HOUR FROM start_time) BETWEEN 12 AND 17 THEN 'Afternoon'\n            WHEN EXTRACT(HOUR FROM start_time) BETWEEN 18 AND 23 THEN 'Evening'\n            ELSE 'Night'\n        END AS time_of_day\n    FROM {{ ref('stg_rides') }}\n)\n\nSELECT\n    date,\n    year,\n    month,\n    day,\n    day_of_week,\n    hour,\n    quarter,\n    is_weekend,\n    month_name,\n    day_name,\n    time_of_day\nFROM time_data", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null}, "model.bike_share.calculate_age": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main", "name": "calculate_age", "resource_type": "model", "package_name": "bike_share", "path": "macros\\calculate_age.sql", "original_file_path": "models\\macros\\calculate_age.sql", "unique_id": "model.bike_share.calculate_age", "fqn": ["bike_share", "macros", "calculate_age"], "alias": "calculate_age", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.5905752, "relation_name": "\"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"calculate_age\"", "raw_code": "", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.bike_share.dim_stations": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main", "name": "dim_stations", "resource_type": "model", "package_name": "bike_share", "path": "marts\\dim_stations.sql", "original_file_path": "models\\marts\\dim_stations.sql", "unique_id": "model.bike_share.dim_stations", "fqn": ["bike_share", "marts", "dim_stations"], "alias": "dim_stations", "checksum": {"name": "sha256", "checksum": "6c2cb554defe8860ac14beb87ddc0f054e90e6e8841a78f88776674f0ba85ee0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Station dimension with location and traffic metrics", "columns": {"station_id": {"name": "station_id", "description": "Unique identifier for the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "station_name": {"name": "station_name", "description": "Name of the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "Latitude coordinate of the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "Longitude coordinate of the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_count": {"name": "start_count", "description": "Number of rides starting from this station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_count": {"name": "end_count", "description": "Number of rides ending at this station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_traffic": {"name": "total_traffic", "description": "Total number of arrivals and departures", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_flow": {"name": "net_flow", "description": "Difference between departures and arrivals", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bike_share://models\\marts\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1750333003.77732, "relation_name": "\"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"dim_stations\"", "raw_code": "{{ config(materialized='table') }}\n\nSELECT\n    station_id,\n    station_name,\n    latitude,\n    longitude,\n    start_count,\n    end_count,\n    total_traffic,\n    net_flow\nFROM {{ ref('int_stations') }}", "language": "sql", "refs": [["int_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.int_stations"]}, "compiled_path": null}, "model.bike_share.dim_time": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main", "name": "dim_time", "resource_type": "model", "package_name": "bike_share", "path": "marts\\dim_time.sql", "original_file_path": "models\\marts\\dim_time.sql", "unique_id": "model.bike_share.dim_time", "fqn": ["bike_share", "marts", "dim_time"], "alias": "dim_time", "checksum": {"name": "sha256", "checksum": "28e48d08af1bf56a4112c01a5ab45ea4ce497736b1775bf4c0b04e83f4d10a3f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Time dimension table for analysis", "columns": {"time_key": {"name": "time_key", "description": "Surrogate key for time dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "Calendar date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "Year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "Month number (1-12)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "Day of month", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day_of_week": {"name": "day_of_week", "description": "Day of week (0-6, where 0 is Sunday)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hour": {"name": "hour", "description": "Hour of day (0-23)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_weekend": {"name": "is_weekend", "description": "Flag indicating if date is a weekend", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_name": {"name": "month_name", "description": "Month name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day_name": {"name": "day_name", "description": "Day name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_of_day": {"name": "time_of_day", "description": "Part of day (Morning, Afternoon, Evening, Night)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bike_share://models\\marts\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1750333003.765843, "relation_name": "\"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"dim_time\"", "raw_code": "{{ config(materialized='table') }}\n\nSELECT\n    date,\n    year,\n    month,\n    day,\n    day_of_week,\n    hour,\n    quarter,\n    is_weekend,\n    month_name,\n    day_name,\n    time_of_day,\n    ROW_NUMBER() OVER(ORDER BY date, hour) AS time_key\nFROM {{ ref('int_time') }}", "language": "sql", "refs": [["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.int_time"]}, "compiled_path": null}, "model.bike_share.dim_users": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main", "name": "dim_users", "resource_type": "model", "package_name": "bike_share", "path": "marts\\dim_users.sql", "original_file_path": "models\\marts\\dim_users.sql", "unique_id": "model.bike_share.dim_users", "fqn": ["bike_share", "marts", "dim_users"], "alias": "dim_users", "checksum": {"name": "sha256", "checksum": "232245c179ff72e3f1e755b68ddbafa63a5bacf2faf8bcf5e99dc17d17051c9c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "User demographics dimension", "columns": {"user_key": {"name": "user_key", "description": "Surrogate key for user dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_type": {"name": "user_type", "description": "Type of user (Subscriber/Customer)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_year": {"name": "birth_year", "description": "Birth year of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "age": {"name": "age", "description": "Age of the user calculated from birth year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "age_group": {"name": "age_group", "description": "Age bracket for demographic analysis", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bike_share://models\\marts\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1750333003.77732, "relation_name": "\"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"dim_users\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH user_data AS (\n    SELECT DISTINCT\n        user_type,\n        birth_year,\n        gender,\n        age\n    FROM {{ ref('int_rides_enriched') }}\n    WHERE user_type IS NOT NULL\n),\n\nuser_age_segments AS (\n    SELECT\n        user_type,\n        birth_year,\n        gender,\n        age,\n        CASE\n            WHEN age < 18 THEN 'Under 18'\n            WHEN age BETWEEN 18 AND 24 THEN '18-24'\n            WHEN age BETWEEN 25 AND 34 THEN '25-34'\n            WHEN age BETWEEN 35 AND 44 THEN '35-44'\n            WHEN age BETWEEN 45 AND 54 THEN '45-54'\n            WHEN age BETWEEN 55 AND 64 THEN '55-64'\n            WHEN age >= 65 THEN '65+'\n            ELSE 'Unknown'\n        END AS age_group\n    FROM user_data\n)\n\nSELECT\n    ROW_NUMBER() OVER(ORDER BY user_type, birth_year, gender) AS user_key,\n    user_type,\n    birth_year,\n    gender,\n    age,\n    age_group\nFROM user_age_segments", "language": "sql", "refs": [["int_rides_enriched"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.int_rides_enriched"]}, "compiled_path": null}, "model.bike_share.fact_rides_summary": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main", "name": "fact_rides_summary", "resource_type": "model", "package_name": "bike_share", "path": "marts\\fact_rides_summary.sql", "original_file_path": "models\\marts\\fact_rides_summary.sql", "unique_id": "model.bike_share.fact_rides_summary", "fqn": ["bike_share", "marts", "fact_rides_summary"], "alias": "fact_rides_summary", "checksum": {"name": "sha256", "checksum": "0cd3fa018964eabee2592916348e40fe3abf47fc469a55045edeaeadead4088e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact table with aggregated ride metrics", "columns": {"date": {"name": "date", "description": "Date of the ride", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_station_id": {"name": "start_station_id", "description": "Starting station ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_station_id": {"name": "end_station_id", "description": "Ending station ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_key": {"name": "user_key", "description": "Foreign key to dim_users", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_key": {"name": "time_key", "description": "Foreign key to dim_time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ride_count": {"name": "ride_count", "description": "Count of rides in this segment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_trip_duration_min": {"name": "avg_trip_duration_min", "description": "Average trip duration in minutes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "route_id": {"name": "route_id", "description": "Concatenated start and end station IDs", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bike_share://models\\marts\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1750333003.77732, "relation_name": "\"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"fact_rides_summary\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH user_dims AS (\n    SELECT\n        user_key,\n        user_type,\n        gender,\n        age_group\n    FROM {{ ref('dim_users') }}\n),\n\ntime_dims AS (\n    SELECT\n        time_key,\n        date,\n        month,\n        year,\n        day_of_week,\n        is_weekend,\n        time_of_day\n    FROM {{ ref('dim_time') }}\n),\n\nride_metrics AS (\n    SELECT\n        date,\n        start_station_id,\n        end_station_id,\n        bike_id,\n        user_type,\n        gender,\n        age,\n        route_id,\n        COUNT(*) AS ride_count,\n        AVG(trip_duration_in_min) AS avg_trip_duration_min,\n        MAX(trip_duration_in_min) AS max_trip_duration_min,\n        MIN(trip_duration_in_min) AS min_trip_duration_min,\n        time_of_day,\n        day_of_week,\n        is_weekend,\n        month\n    FROM {{ ref('int_rides_enriched') }}\n    GROUP BY\n        date,\n        start_station_id,\n        end_station_id,\n        bike_id,\n        user_type,\n        gender,\n        age,\n        route_id,\n        time_of_day,\n        day_of_week,\n        is_weekend,\n        month\n)\n\nSELECT\n    rm.date,\n    rm.start_station_id,\n    rm.end_station_id,\n    rm.bike_id,\n    u.user_key,\n    t.time_key,\n    rm.route_id,\n    rm.ride_count,\n    rm.avg_trip_duration_min,\n    rm.max_trip_duration_min,\n    rm.min_trip_duration_min,\n    rm.time_of_day,\n    rm.day_of_week,\n    rm.is_weekend,\n    rm.month\nFROM ride_metrics rm\nLEFT JOIN user_dims u\n    ON rm.user_type = u.user_type\n    AND rm.gender = u.gender\n    AND CASE \n        WHEN rm.age < 18 THEN 'Under 18'\n        WHEN rm.age BETWEEN 18 AND 24 THEN '18-24'\n        WHEN rm.age BETWEEN 25 AND 34 THEN '25-34'\n        WHEN rm.age BETWEEN 35 AND 44 THEN '35-44'\n        WHEN rm.age BETWEEN 45 AND 54 THEN '45-54'\n        WHEN rm.age BETWEEN 55 AND 64 THEN '55-64'\n        WHEN rm.age >= 65 THEN '65+'\n        ELSE 'Unknown'\n    END = u.age_group\nLEFT JOIN time_dims t\n    ON rm.date = t.date\n    AND rm.time_of_day = t.time_of_day", "language": "sql", "refs": [["dim_users"], ["dim_time"], ["int_rides_enriched"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_users", "model.bike_share.dim_time", "model.bike_share.int_rides_enriched"]}, "compiled_path": null}, "model.bike_share.stg_rides": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main", "name": "stg_rides", "resource_type": "model", "package_name": "bike_share", "path": "staging\\stg_rides.sql", "original_file_path": "models\\staging\\stg_rides.sql", "unique_id": "model.bike_share.stg_rides", "fqn": ["bike_share", "staging", "stg_rides"], "alias": "stg_rides", "checksum": {"name": "sha256", "checksum": "2ff7c604ba2bb9553e30e3e8fce90c2a9d147b7ed52882a0583c95a461a03592"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Cleaned and typed ride data", "columns": {"trip_duration": {"name": "trip_duration", "description": "Duration of the trip in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Start time of the trip", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stop_time": {"name": "stop_time", "description": "End time of the trip", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_station_id": {"name": "start_station_id", "description": "ID of the starting station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_station_name": {"name": "start_station_name", "description": "Name of the starting station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_station_id": {"name": "end_station_id", "description": "ID of the ending station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_station_name": {"name": "end_station_name", "description": "Name of the ending station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bike_id": {"name": "bike_id", "description": "Unique identifier for the bike used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_type": {"name": "user_type", "description": "Type of user (Member/Casual)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trip_duration_in_min": {"name": "trip_duration_in_min", "description": "Duration of the trip in minutes", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bike_share://models\\staging\\schema.yml", "build_path": "target/bike_share_dbt_assets-5589a51-1750333000\\run\\bike_share\\models\\staging\\stg_rides.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1750333003.8548248, "relation_name": "\"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"stg_rides\"", "raw_code": "{{ config(materialized='view') }}\n\nWITH source AS (\n    SELECT * FROM {{ source('raw', 'raw_rides') }}\n)\n\nSELECT\n    CAST(\"Trip Duration\" AS INTEGER) AS trip_duration,\n    CAST(\"Start Time\" AS TIMESTAMP) AS start_time,\n    CAST(\"Stop Time\" AS TIMESTAMP) AS stop_time,\n    CAST(\"Start Station ID\" AS INTEGER) AS start_station_id,\n    \"Start Station Name\" AS start_station_name,\n    CAST(\"Start Station Latitude\" AS FLOAT) AS start_station_latitude,\n    CAST(\"Start Station Longitude\" AS FLOAT) AS start_station_longitude,\n    CAST(\"End Station ID\" AS INTEGER) AS end_station_id,\n    \"End Station Name\" AS end_station_name,\n    CAST(\"End Station Latitude\" AS FLOAT) AS end_station_latitude,\n    CAST(\"End Station Longitude\" AS FLOAT) AS end_station_longitude,\n    CAST(\"Bike ID\" AS INTEGER) AS bike_id,\n    \"User Type\" AS user_type,\n    CAST(\"Birth Year\" AS INTEGER) AS birth_year,\n    CAST(\"Gender\" AS INTEGER) AS gender,\n    CAST(\"Trip_Duration_in_min\" AS INTEGER) AS trip_duration_in_min\nFROM source", "language": "sql", "refs": [], "sources": [["raw", "raw_rides"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bike_share.raw.raw_rides"]}, "compiled_path": "target/bike_share_dbt_assets-5589a51-1750333000\\compiled\\bike_share\\models\\staging\\stg_rides.sql", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT * FROM \"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"raw_rides\"\n)\n\nSELECT\n    CAST(\"Trip Duration\" AS INTEGER) AS trip_duration,\n    CAST(\"Start Time\" AS TIMESTAMP) AS start_time,\n    CAST(\"Stop Time\" AS TIMESTAMP) AS stop_time,\n    CAST(\"Start Station ID\" AS INTEGER) AS start_station_id,\n    \"Start Station Name\" AS start_station_name,\n    CAST(\"Start Station Latitude\" AS FLOAT) AS start_station_latitude,\n    CAST(\"Start Station Longitude\" AS FLOAT) AS start_station_longitude,\n    CAST(\"End Station ID\" AS INTEGER) AS end_station_id,\n    \"End Station Name\" AS end_station_name,\n    CAST(\"End Station Latitude\" AS FLOAT) AS end_station_latitude,\n    CAST(\"End Station Longitude\" AS FLOAT) AS end_station_longitude,\n    CAST(\"Bike ID\" AS INTEGER) AS bike_id,\n    \"User Type\" AS user_type,\n    CAST(\"Birth Year\" AS INTEGER) AS birth_year,\n    CAST(\"Gender\" AS INTEGER) AS gender,\n    CAST(\"Trip_Duration_in_min\" AS INTEGER) AS trip_duration_in_min\nFROM source", "extra_ctes_injected": true, "extra_ctes": []}, "model.bike_share.stg_stations": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main", "name": "stg_stations", "resource_type": "model", "package_name": "bike_share", "path": "staging\\stg_stations.sql", "original_file_path": "models\\staging\\stg_stations.sql", "unique_id": "model.bike_share.stg_stations", "fqn": ["bike_share", "staging", "stg_stations"], "alias": "stg_stations", "checksum": {"name": "sha256", "checksum": "acfab736f455d9cece69e7f0527917dfc5c5a6fec5fdb1921d644dc60418edb3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Clean station data derived from ride information", "columns": {"station_id": {"name": "station_id", "description": "Unique identifier for the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "station_name": {"name": "station_name", "description": "Name of the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "Latitude coordinate of the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "Longitude coordinate of the station", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bike_share://models\\staging\\schema.yml", "build_path": "target/bike_share_dbt_assets-5589a51-1750333000\\run\\bike_share\\models\\staging\\stg_stations.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1750333003.8548248, "relation_name": "\"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"stg_stations\"", "raw_code": "{{ config(materialized='view') }}\n\nWITH start_stations AS (\n    SELECT DISTINCT\n        CAST(\"Start Station ID\" AS INTEGER) AS station_id,\n        \"Start Station Name\" AS station_name,\n        CAST(\"Start Station Latitude\" AS FLOAT) AS latitude,\n        CAST(\"Start Station Longitude\" AS FLOAT) AS longitude\n    FROM {{ source('raw', 'raw_rides') }}\n    WHERE \"Start Station ID\" IS NOT NULL\n),\n\nend_stations AS (\n    SELECT DISTINCT\n        CAST(\"End Station ID\" AS INTEGER) AS station_id,\n        \"End Station Name\" AS station_name,\n        CAST(\"End Station Latitude\" AS FLOAT) AS latitude,\n        CAST(\"End Station Longitude\" AS FLOAT) AS longitude\n    FROM {{ source('raw', 'raw_rides') }}\n    WHERE \"End Station ID\" IS NOT NULL\n)\n\nSELECT DISTINCT\n    station_id,\n    station_name,\n    latitude,\n    longitude\nFROM (\n    SELECT * FROM start_stations\n    UNION ALL\n    SELECT * FROM end_stations\n) AS combined_stations\nWHERE station_id IS NOT NULL\nGROUP BY station_id, station_name, latitude, longitude", "language": "sql", "refs": [], "sources": [["raw", "raw_rides"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bike_share.raw.raw_rides"]}, "compiled_path": "target/bike_share_dbt_assets-5589a51-1750333000\\compiled\\bike_share\\models\\staging\\stg_stations.sql", "compiled": true, "compiled_code": "\n\nWITH start_stations AS (\n    SELECT DISTINCT\n        CAST(\"Start Station ID\" AS INTEGER) AS station_id,\n        \"Start Station Name\" AS station_name,\n        CAST(\"Start Station Latitude\" AS FLOAT) AS latitude,\n        CAST(\"Start Station Longitude\" AS FLOAT) AS longitude\n    FROM \"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"raw_rides\"\n    WHERE \"Start Station ID\" IS NOT NULL\n),\n\nend_stations AS (\n    SELECT DISTINCT\n        CAST(\"End Station ID\" AS INTEGER) AS station_id,\n        \"End Station Name\" AS station_name,\n        CAST(\"End Station Latitude\" AS FLOAT) AS latitude,\n        CAST(\"End Station Longitude\" AS FLOAT) AS longitude\n    FROM \"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"raw_rides\"\n    WHERE \"End Station ID\" IS NOT NULL\n)\n\nSELECT DISTINCT\n    station_id,\n    station_name,\n    latitude,\n    longitude\nFROM (\n    SELECT * FROM start_stations\n    UNION ALL\n    SELECT * FROM end_stations\n) AS combined_stations\nWHERE station_id IS NOT NULL\nGROUP BY station_id, station_name, latitude, longitude", "extra_ctes_injected": true, "extra_ctes": []}, "model.bike_share.stg_users": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main", "name": "stg_users", "resource_type": "model", "package_name": "bike_share", "path": "staging\\stg_users.sql", "original_file_path": "models\\staging\\stg_users.sql", "unique_id": "model.bike_share.stg_users", "fqn": ["bike_share", "staging", "stg_users"], "alias": "stg_users", "checksum": {"name": "sha256", "checksum": "97b7fda79d5b87159300644477968f60dbe38b877b0a829c7f114f520c35ccee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "User data derived from ride information", "columns": {"user_type": {"name": "user_type", "description": "Type of user (Member/Casual)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_year": {"name": "birth_year", "description": "Birth year of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "age": {"name": "age", "description": "Age of the user calculated from birth year", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bike_share://models\\staging\\schema.yml", "build_path": "target/bike_share_dbt_assets-5589a51-1750333000\\run\\bike_share\\models\\staging\\stg_users.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1750333003.8548248, "relation_name": "\"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"stg_users\"", "raw_code": "{{ config(materialized='view') }}\n\nWITH source AS (\n    SELECT DISTINCT\n        \"User Type\" AS user_type,\n        \"Birth Year\" AS birth_year,\n        \"Gender\" AS gender\n    FROM {{ source('raw', 'raw_rides') }}\n    WHERE \"User Type\" IS NOT NULL\n)\n\nSELECT\n    user_type,\n    CAST(birth_year AS INTEGER) AS birth_year,\n    CASE\n        WHEN gender = 0 THEN 'Unknown'\n        WHEN gender = 1 THEN 'Male'\n        WHEN gender = 2 THEN 'Female'\n        ELSE 'Other'\n    END AS gender,\n    {{ calculate_age('birth_year') }} AS age\nFROM source", "language": "sql", "refs": [], "sources": [["raw", "raw_rides"]], "metrics": [], "depends_on": {"macros": ["macro.bike_share.calculate_age"], "nodes": ["source.bike_share.raw.raw_rides"]}, "compiled_path": "target/bike_share_dbt_assets-5589a51-1750333000\\compiled\\bike_share\\models\\staging\\stg_users.sql", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT DISTINCT\n        \"User Type\" AS user_type,\n        \"Birth Year\" AS birth_year,\n        \"Gender\" AS gender\n    FROM \"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"raw_rides\"\n    WHERE \"User Type\" IS NOT NULL\n)\n\nSELECT\n    user_type,\n    CAST(birth_year AS INTEGER) AS birth_year,\n    CASE\n        WHEN gender = 0 THEN 'Unknown'\n        WHEN gender = 1 THEN 'Male'\n        WHEN gender = 2 THEN 'Female'\n        ELSE 'Other'\n    END AS gender,\n    \n    CASE\n        WHEN birth_year IS NULL OR birth_year = 0 THEN NULL\n        ELSE DATE_PART('year', CURRENT_DATE()) - birth_year\n    END\n AS age\nFROM source", "extra_ctes_injected": true, "extra_ctes": []}, "test.bike_share.dim_stations_not_null": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_stations_not_null", "resource_type": "test", "package_name": "bike_share", "path": "dim_stations_not_null.sql", "original_file_path": "tests\\dim_stations_not_null.sql", "unique_id": "test.bike_share.dim_stations_not_null", "fqn": ["bike_share", "dim_stations_not_null"], "alias": "dim_stations_not_null", "checksum": {"name": "sha256", "checksum": "0062e1c7876445935b98de42726286d915d4e7f38bb217258de24963646be6d2"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.610371, "relation_name": null, "raw_code": "-- Test that station_id is not null\r\n{{ config(severity='error') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('dim_stations') }}\r\nWHERE station_id IS NULL", "language": "sql", "refs": [["dim_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_stations"]}, "compiled_path": null}, "test.bike_share.dim_stations_positive_traffic": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_stations_positive_traffic", "resource_type": "test", "package_name": "bike_share", "path": "dim_stations_positive_traffic.sql", "original_file_path": "tests\\dim_stations_positive_traffic.sql", "unique_id": "test.bike_share.dim_stations_positive_traffic", "fqn": ["bike_share", "dim_stations_positive_traffic"], "alias": "dim_stations_positive_traffic", "checksum": {"name": "sha256", "checksum": "024e6805140441a5a7534b2dae15ed1bf29731df3d640c35ecf3993e16b02b41"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.620987, "relation_name": null, "raw_code": "-- Test that traffic statistics are not negative\r\n{{ config(severity='error') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('dim_stations') }}\r\nWHERE \r\n    start_count < 0 OR \r\n    end_count < 0 OR \r\n    total_traffic < 0", "language": "sql", "refs": [["dim_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_stations"]}, "compiled_path": null}, "test.bike_share.dim_stations_unique": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_stations_unique", "resource_type": "test", "package_name": "bike_share", "path": "dim_stations_unique.sql", "original_file_path": "tests\\dim_stations_unique.sql", "unique_id": "test.bike_share.dim_stations_unique", "fqn": ["bike_share", "dim_stations_unique"], "alias": "dim_stations_unique", "checksum": {"name": "sha256", "checksum": "64ad7b68f7b425c13dfb203f1a46d1fbf92bcc03aef472a2aaa8ffaae918b2fe"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.622963, "relation_name": null, "raw_code": "-- Test that station_id is unique\r\n{{ config(severity='error') }}\r\nSELECT\r\n    station_id,\r\n    COUNT(*) AS count\r\nFROM {{ ref('dim_stations') }}\r\nGROUP BY station_id\r\nHAVING COUNT(*) > 1", "language": "sql", "refs": [["dim_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_stations"]}, "compiled_path": null}, "test.bike_share.dim_stations_valid_coordinates": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_stations_valid_coordinates", "resource_type": "test", "package_name": "bike_share", "path": "dim_stations_valid_coordinates.sql", "original_file_path": "tests\\dim_stations_valid_coordinates.sql", "unique_id": "test.bike_share.dim_stations_valid_coordinates", "fqn": ["bike_share", "dim_stations_valid_coordinates"], "alias": "dim_stations_valid_coordinates", "checksum": {"name": "sha256", "checksum": "9d0e93aa07ba4561a30130dfc33dbeb2c88dd812501151e50039c55d553c7cd9"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.622963, "relation_name": null, "raw_code": "-- Test that station coordinates are valid\r\n{{ config(severity='error') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('dim_stations') }}\r\nWHERE \r\n    latitude < -90 OR latitude > 90 OR\r\n    longitude < -180 OR longitude > 180", "language": "sql", "refs": [["dim_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_stations"]}, "compiled_path": null}, "test.bike_share.dim_time_unique_date_hour": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_time_unique_date_hour", "resource_type": "test", "package_name": "bike_share", "path": "dim_time_unique_date_hour.sql", "original_file_path": "tests\\dim_time_unique_date_hour.sql", "unique_id": "test.bike_share.dim_time_unique_date_hour", "fqn": ["bike_share", "dim_time_unique_date_hour"], "alias": "dim_time_unique_date_hour", "checksum": {"name": "sha256", "checksum": "04717a569c25d6fa87b54570921ce4fa34abc7972ec27aee0e8da4042240cf16"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.622963, "relation_name": null, "raw_code": "-- Test that date is unique (for combinations of date and hour)\r\n{{ config(severity='error') }}\r\nSELECT\r\n    date, hour,\r\n    COUNT(*) AS count\r\nFROM {{ ref('dim_time') }}\r\nGROUP BY date, hour\r\nHAVING COUNT(*) > 1", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null}, "test.bike_share.dim_time_unique_key": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_time_unique_key", "resource_type": "test", "package_name": "bike_share", "path": "dim_time_unique_key.sql", "original_file_path": "tests\\dim_time_unique_key.sql", "unique_id": "test.bike_share.dim_time_unique_key", "fqn": ["bike_share", "dim_time_unique_key"], "alias": "dim_time_unique_key", "checksum": {"name": "sha256", "checksum": "e4d0ff90dd222c876a2e9e3bdd7da7050b99e7872f994034dacb971d7897c619"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.6338506, "relation_name": null, "raw_code": "-- Test that time_key is unique\r\n{{ config(severity='error') }}\r\nSELECT\r\n    time_key,\r\n    COUNT(*) AS count\r\nFROM {{ ref('dim_time') }}\r\nGROUP BY time_key\r\nHAVING COUNT(*) > 1", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null}, "test.bike_share.dim_time_valid_day_of_week": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_time_valid_day_of_week", "resource_type": "test", "package_name": "bike_share", "path": "dim_time_valid_day_of_week.sql", "original_file_path": "tests\\dim_time_valid_day_of_week.sql", "unique_id": "test.bike_share.dim_time_valid_day_of_week", "fqn": ["bike_share", "dim_time_valid_day_of_week"], "alias": "dim_time_valid_day_of_week", "checksum": {"name": "sha256", "checksum": "3aca7b306c1d8e57b8226296e201cba6b5b4fc180c09b8c3adb892fecc6da5c1"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.6338506, "relation_name": null, "raw_code": "-- Test that day_of_week values are valid\r\n{{ config(severity='error') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('dim_time') }}\r\nWHERE day_of_week < 0 OR day_of_week > 6", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null}, "test.bike_share.dim_time_valid_hour": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_time_valid_hour", "resource_type": "test", "package_name": "bike_share", "path": "dim_time_valid_hour.sql", "original_file_path": "tests\\dim_time_valid_hour.sql", "unique_id": "test.bike_share.dim_time_valid_hour", "fqn": ["bike_share", "dim_time_valid_hour"], "alias": "dim_time_valid_hour", "checksum": {"name": "sha256", "checksum": "8d8514b2d728719b8838bb5c8dcadd9607d2a6e41f05441aba5cd787b68acbe8"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.6442132, "relation_name": null, "raw_code": "-- Test that hour values are valid\r\n{{ config(severity='error') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('dim_time') }}\r\nWHERE hour < 0 OR hour > 23", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null}, "test.bike_share.dim_time_valid_month": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_time_valid_month", "resource_type": "test", "package_name": "bike_share", "path": "dim_time_valid_month.sql", "original_file_path": "tests\\dim_time_valid_month.sql", "unique_id": "test.bike_share.dim_time_valid_month", "fqn": ["bike_share", "dim_time_valid_month"], "alias": "dim_time_valid_month", "checksum": {"name": "sha256", "checksum": "2813f24aea8286a4c83561f107d83cc9195b191990d45e4fb779a138610e95da"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.6482117, "relation_name": null, "raw_code": "-- Test that month values are valid\r\n{{ config(severity='error') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('dim_time') }}\r\nWHERE month < 1 OR month > 12", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null}, "test.bike_share.dim_users_unique_key": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_users_unique_key", "resource_type": "test", "package_name": "bike_share", "path": "dim_users_unique_key.sql", "original_file_path": "tests\\dim_users_unique_key.sql", "unique_id": "test.bike_share.dim_users_unique_key", "fqn": ["bike_share", "dim_users_unique_key"], "alias": "dim_users_unique_key", "checksum": {"name": "sha256", "checksum": "934894f1dcfe458264f8d184e3577e2510d198694840f8212c91dea6d6d43c78"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.6512122, "relation_name": null, "raw_code": "-- Test that user_key is unique\r\n{{ config(severity='error') }}\r\nSELECT\r\n    user_key,\r\n    COUNT(*) AS count\r\nFROM {{ ref('dim_users') }}\r\nGROUP BY user_key\r\nHAVING COUNT(*) > 1", "language": "sql", "refs": [["dim_users"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_users"]}, "compiled_path": null}, "test.bike_share.dim_users_valid_age_group": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_users_valid_age_group", "resource_type": "test", "package_name": "bike_share", "path": "dim_users_valid_age_group.sql", "original_file_path": "tests\\dim_users_valid_age_group.sql", "unique_id": "test.bike_share.dim_users_valid_age_group", "fqn": ["bike_share", "dim_users_valid_age_group"], "alias": "dim_users_valid_age_group", "checksum": {"name": "sha256", "checksum": "d3b584e746c741c0f3574e1e56308efdb9af5adb36dd556e21ebed89589153be"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.6542387, "relation_name": null, "raw_code": "-- Test that age groups are valid\r\n{{ config(severity='error') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('dim_users') }}\r\nWHERE age_group NOT IN ('Under 18', '18-24', '25-34', '35-44', '45-54', '55-64', '65+', 'Unknown')", "language": "sql", "refs": [["dim_users"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_users"]}, "compiled_path": null}, "test.bike_share.dim_users_valid_gender": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_users_valid_gender", "resource_type": "test", "package_name": "bike_share", "path": "dim_users_valid_gender.sql", "original_file_path": "tests\\dim_users_valid_gender.sql", "unique_id": "test.bike_share.dim_users_valid_gender", "fqn": ["bike_share", "dim_users_valid_gender"], "alias": "dim_users_valid_gender", "checksum": {"name": "sha256", "checksum": "b31cfafc20db11148bfd16121772876126ca88173323a62604d5c98dd33f08ce"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.6542387, "relation_name": null, "raw_code": "-- Test that gender values are valid\r\n{{ config(severity='error') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('dim_users') }}\r\nWHERE gender NOT IN ('Male', 'Female', 'Unknown', 'Other')", "language": "sql", "refs": [["dim_users"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_users"]}, "compiled_path": null}, "test.bike_share.dim_users_valid_user_type": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "dim_users_valid_user_type", "resource_type": "test", "package_name": "bike_share", "path": "dim_users_valid_user_type.sql", "original_file_path": "tests\\dim_users_valid_user_type.sql", "unique_id": "test.bike_share.dim_users_valid_user_type", "fqn": ["bike_share", "dim_users_valid_user_type"], "alias": "dim_users_valid_user_type", "checksum": {"name": "sha256", "checksum": "4f0dac164cbae74c90fc6eb707540b9c8e1731412fd4acd1e87aa5f0a11b5d8f"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.6542387, "relation_name": null, "raw_code": "-- Test that user_type values are valid\r\n{{ config(severity='error') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('dim_users') }}\r\nWHERE user_type NOT IN ('Subscriber', 'Customer')", "language": "sql", "refs": [["dim_users"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.dim_users"]}, "compiled_path": null}, "test.bike_share.stg_rides_positive_duration": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "stg_rides_positive_duration", "resource_type": "test", "package_name": "bike_share", "path": "stg_rides_positive_duration.sql", "original_file_path": "tests\\stg_rides_positive_duration.sql", "unique_id": "test.bike_share.stg_rides_positive_duration", "fqn": ["bike_share", "stg_rides_positive_duration"], "alias": "stg_rides_positive_duration", "checksum": {"name": "sha256", "checksum": "2c8debb3f69783481b582bb6fa28f08ad79ff0a13bf498d9eb194a23e4aa1fed"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.6542387, "relation_name": null, "raw_code": "-- Test that trip_duration_in_min is always positive\r\n{{ config(severity='error') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('stg_rides') }}\r\nWHERE trip_duration_in_min <= 0", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null}, "test.bike_share.stg_rides_required_fields": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "stg_rides_required_fields", "resource_type": "test", "package_name": "bike_share", "path": "stg_rides_required_fields.sql", "original_file_path": "tests\\stg_rides_required_fields.sql", "unique_id": "test.bike_share.stg_rides_required_fields", "fqn": ["bike_share", "stg_rides_required_fields"], "alias": "stg_rides_required_fields", "checksum": {"name": "sha256", "checksum": "6a90e88c60a22f077629117223c14791999539c54fb95b08e058cd1d1b61e428"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.6658502, "relation_name": null, "raw_code": "-- Schema test for required fields\r\n{{ config(severity='error') }}\r\nSELECT *\r\nFROM {{ ref('stg_rides') }}\r\nWHERE \r\n    trip_duration IS NULL\r\n    OR start_time IS NULL\r\n    OR start_station_id IS NULL\r\n    OR bike_id IS NULL", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null}, "test.bike_share.stg_rides_station_ids": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "stg_rides_station_ids", "resource_type": "test", "package_name": "bike_share", "path": "stg_rides_station_ids.sql", "original_file_path": "tests\\stg_rides_station_ids.sql", "unique_id": "test.bike_share.stg_rides_station_ids", "fqn": ["bike_share", "stg_rides_station_ids"], "alias": "stg_rides_station_ids", "checksum": {"name": "sha256", "checksum": "f5c0a095c7b6a3b3dabc86dfd31f50cee8f8d0d1d4ef4dbe6cd3ee61e1d0d557"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.6658502, "relation_name": null, "raw_code": "-- Test that all rides have station IDs\r\n{{ config(severity='error') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('stg_rides') }}\r\nWHERE start_station_id IS NULL OR end_station_id IS NULL", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null}, "test.bike_share.stg_rides_valid_times": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "stg_rides_valid_times", "resource_type": "test", "package_name": "bike_share", "path": "stg_rides_valid_times.sql", "original_file_path": "tests\\stg_rides_valid_times.sql", "unique_id": "test.bike_share.stg_rides_valid_times", "fqn": ["bike_share", "stg_rides_valid_times"], "alias": "stg_rides_valid_times", "checksum": {"name": "sha256", "checksum": "56fe5a25640c2146af1b6a3f56110b70560790cf6646cacce740f1d01dea0b08"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1750333003.6658502, "relation_name": null, "raw_code": "-- Test that start_time is before stop_time\r\n{{ config(severity='warn') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('stg_rides') }}\r\nWHERE start_time >= stop_time", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null}, "test.bike_share.stg_rides_valid_user_type": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "stg_rides_valid_user_type", "resource_type": "test", "package_name": "bike_share", "path": "stg_rides_valid_user_type.sql", "original_file_path": "tests\\stg_rides_valid_user_type.sql", "unique_id": "test.bike_share.stg_rides_valid_user_type", "fqn": ["bike_share", "stg_rides_valid_user_type"], "alias": "stg_rides_valid_user_type", "checksum": {"name": "sha256", "checksum": "7b380c6969f44afd9aed80041fb6cf6e5a6c0a912514793041fe77f4b28d2ca5"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error"}, "created_at": 1750333003.6658502, "relation_name": null, "raw_code": "-- Test that user_type values are valid\r\n{{ config(severity='error') }}\r\nSELECT\r\n    *\r\nFROM {{ ref('stg_rides') }}\r\nWHERE user_type NOT IN ('Subscriber', 'Customer')", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null}, "test.bike_share.not_null_int_time_date.0205b353a5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_time_date", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_time_date.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_time_date.0205b353a5", "fqn": ["bike_share", "intermediate", "not_null_int_time_date"], "alias": "not_null_int_time_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.732546, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_time"]}, "compiled_path": null, "column_name": "date", "file_key_name": "models.int_time"}, "test.bike_share.not_null_int_time_year.f71fa658ca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "year", "model": "{{ get_where_subquery(ref('int_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_time_year", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_time_year.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_time_year.f71fa658ca", "fqn": ["bike_share", "intermediate", "not_null_int_time_year"], "alias": "not_null_int_time_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.732546, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_time"]}, "compiled_path": null, "column_name": "year", "file_key_name": "models.int_time"}, "test.bike_share.not_null_int_time_month.35d346cfb3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month", "model": "{{ get_where_subquery(ref('int_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_time_month", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_time_month.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_time_month.35d346cfb3", "fqn": ["bike_share", "intermediate", "not_null_int_time_month"], "alias": "not_null_int_time_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.732546, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_time"]}, "compiled_path": null, "column_name": "month", "file_key_name": "models.int_time"}, "test.bike_share.accepted_values_int_time_month__1__2__3__4__5__6__7__8__9__10__11__12.c5fc7814cf": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "column_name": "month", "model": "{{ get_where_subquery(ref('int_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "accepted_values_int_time_month__1__2__3__4__5__6__7__8__9__10__11__12", "resource_type": "test", "package_name": "bike_share", "path": "accepted_values_int_time_74fcb5fd8624f845128494c0c445afc7.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.accepted_values_int_time_month__1__2__3__4__5__6__7__8__9__10__11__12.c5fc7814cf", "fqn": ["bike_share", "intermediate", "accepted_values_int_time_month__1__2__3__4__5__6__7__8__9__10__11__12"], "alias": "accepted_values_int_time_74fcb5fd8624f845128494c0c445afc7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_time_74fcb5fd8624f845128494c0c445afc7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_int_time_74fcb5fd8624f845128494c0c445afc7"}, "created_at": 1750333003.732546, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_time_74fcb5fd8624f845128494c0c445afc7\") }}", "language": "sql", "refs": [["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.int_time"]}, "compiled_path": null, "column_name": "month", "file_key_name": "models.int_time"}, "test.bike_share.not_null_int_time_day.73126b147a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "day", "model": "{{ get_where_subquery(ref('int_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_time_day", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_time_day.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_time_day.73126b147a", "fqn": ["bike_share", "intermediate", "not_null_int_time_day"], "alias": "not_null_int_time_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.743659, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_time"]}, "compiled_path": null, "column_name": "day", "file_key_name": "models.int_time"}, "test.bike_share.not_null_int_time_day_of_week.e08b24b829": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "day_of_week", "model": "{{ get_where_subquery(ref('int_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_time_day_of_week", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_time_day_of_week.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_time_day_of_week.e08b24b829", "fqn": ["bike_share", "intermediate", "not_null_int_time_day_of_week"], "alias": "not_null_int_time_day_of_week", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.743659, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_time"]}, "compiled_path": null, "column_name": "day_of_week", "file_key_name": "models.int_time"}, "test.bike_share.accepted_values_int_time_day_of_week__0__1__2__3__4__5__6.489c861d07": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1, 2, 3, 4, 5, 6], "column_name": "day_of_week", "model": "{{ get_where_subquery(ref('int_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "accepted_values_int_time_day_of_week__0__1__2__3__4__5__6", "resource_type": "test", "package_name": "bike_share", "path": "accepted_values_int_time_day_of_week__0__1__2__3__4__5__6.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.accepted_values_int_time_day_of_week__0__1__2__3__4__5__6.489c861d07", "fqn": ["bike_share", "intermediate", "accepted_values_int_time_day_of_week__0__1__2__3__4__5__6"], "alias": "accepted_values_int_time_day_of_week__0__1__2__3__4__5__6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.743659, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.int_time"]}, "compiled_path": null, "column_name": "day_of_week", "file_key_name": "models.int_time"}, "test.bike_share.not_null_int_time_hour.bbc837aa17": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hour", "model": "{{ get_where_subquery(ref('int_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_time_hour", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_time_hour.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_time_hour.bbc837aa17", "fqn": ["bike_share", "intermediate", "not_null_int_time_hour"], "alias": "not_null_int_time_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.743659, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_time"]}, "compiled_path": null, "column_name": "hour", "file_key_name": "models.int_time"}, "test.bike_share.not_null_int_time_is_weekend.c76e9be810": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_weekend", "model": "{{ get_where_subquery(ref('int_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_time_is_weekend", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_time_is_weekend.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_time_is_weekend.c76e9be810", "fqn": ["bike_share", "intermediate", "not_null_int_time_is_weekend"], "alias": "not_null_int_time_is_weekend", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.743659, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_time"]}, "compiled_path": null, "column_name": "is_weekend", "file_key_name": "models.int_time"}, "test.bike_share.not_null_int_time_time_of_day.97f588ca6f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_of_day", "model": "{{ get_where_subquery(ref('int_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_time_time_of_day", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_time_time_of_day.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_time_time_of_day.97f588ca6f", "fqn": ["bike_share", "intermediate", "not_null_int_time_time_of_day"], "alias": "not_null_int_time_time_of_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.743659, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_time"]}, "compiled_path": null, "column_name": "time_of_day", "file_key_name": "models.int_time"}, "test.bike_share.accepted_values_int_time_time_of_day__Morning__Afternoon__Evening__Night.019d7af3ba": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Morning", "Afternoon", "Evening", "Night"], "column_name": "time_of_day", "model": "{{ get_where_subquery(ref('int_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "accepted_values_int_time_time_of_day__Morning__Afternoon__Evening__Night", "resource_type": "test", "package_name": "bike_share", "path": "accepted_values_int_time_8c9dd7ee083257e4ecfd4059ca77b08b.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.accepted_values_int_time_time_of_day__Morning__Afternoon__Evening__Night.019d7af3ba", "fqn": ["bike_share", "intermediate", "accepted_values_int_time_time_of_day__Morning__Afternoon__Evening__Night"], "alias": "accepted_values_int_time_8c9dd7ee083257e4ecfd4059ca77b08b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_time_8c9dd7ee083257e4ecfd4059ca77b08b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_int_time_8c9dd7ee083257e4ecfd4059ca77b08b"}, "created_at": 1750333003.743659, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_time_8c9dd7ee083257e4ecfd4059ca77b08b\") }}", "language": "sql", "refs": [["int_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.int_time"]}, "compiled_path": null, "column_name": "time_of_day", "file_key_name": "models.int_time"}, "test.bike_share.not_null_int_stations_station_id.a04489f6f1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('int_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_stations_station_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_stations_station_id.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_stations_station_id.a04489f6f1", "fqn": ["bike_share", "intermediate", "not_null_int_stations_station_id"], "alias": "not_null_int_stations_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.754976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_stations"]}, "compiled_path": null, "column_name": "station_id", "file_key_name": "models.int_stations"}, "test.bike_share.unique_int_stations_station_id.705f7995d2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('int_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "unique_int_stations_station_id", "resource_type": "test", "package_name": "bike_share", "path": "unique_int_stations_station_id.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.unique_int_stations_station_id.705f7995d2", "fqn": ["bike_share", "intermediate", "unique_int_stations_station_id"], "alias": "unique_int_stations_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.754976, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.bike_share.int_stations"]}, "compiled_path": null, "column_name": "station_id", "file_key_name": "models.int_stations"}, "test.bike_share.not_null_int_stations_station_name.d32d8c9303": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_name", "model": "{{ get_where_subquery(ref('int_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_stations_station_name", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_stations_station_name.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_stations_station_name.d32d8c9303", "fqn": ["bike_share", "intermediate", "not_null_int_stations_station_name"], "alias": "not_null_int_stations_station_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.754976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_stations"]}, "compiled_path": null, "column_name": "station_name", "file_key_name": "models.int_stations"}, "test.bike_share.not_null_int_stations_latitude.c923fa7354": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "latitude", "model": "{{ get_where_subquery(ref('int_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_stations_latitude", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_stations_latitude.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_stations_latitude.c923fa7354", "fqn": ["bike_share", "intermediate", "not_null_int_stations_latitude"], "alias": "not_null_int_stations_latitude", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.754976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_stations"]}, "compiled_path": null, "column_name": "latitude", "file_key_name": "models.int_stations"}, "test.bike_share.not_null_int_stations_longitude.0df6494a69": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "longitude", "model": "{{ get_where_subquery(ref('int_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_stations_longitude", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_stations_longitude.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_stations_longitude.0df6494a69", "fqn": ["bike_share", "intermediate", "not_null_int_stations_longitude"], "alias": "not_null_int_stations_longitude", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.754976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_stations"]}, "compiled_path": null, "column_name": "longitude", "file_key_name": "models.int_stations"}, "test.bike_share.not_null_int_stations_start_count.b9706bfca2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_count", "model": "{{ get_where_subquery(ref('int_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_stations_start_count", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_stations_start_count.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_stations_start_count.b9706bfca2", "fqn": ["bike_share", "intermediate", "not_null_int_stations_start_count"], "alias": "not_null_int_stations_start_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.754976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_stations"]}, "compiled_path": null, "column_name": "start_count", "file_key_name": "models.int_stations"}, "test.bike_share.not_null_int_stations_end_count.322dbc78cb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_count", "model": "{{ get_where_subquery(ref('int_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_stations_end_count", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_stations_end_count.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_stations_end_count.322dbc78cb", "fqn": ["bike_share", "intermediate", "not_null_int_stations_end_count"], "alias": "not_null_int_stations_end_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.754976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_stations"]}, "compiled_path": null, "column_name": "end_count", "file_key_name": "models.int_stations"}, "test.bike_share.not_null_int_stations_total_traffic.ad3957e14e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_traffic", "model": "{{ get_where_subquery(ref('int_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_stations_total_traffic", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_stations_total_traffic.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_stations_total_traffic.ad3957e14e", "fqn": ["bike_share", "intermediate", "not_null_int_stations_total_traffic"], "alias": "not_null_int_stations_total_traffic", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.754976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_stations"]}, "compiled_path": null, "column_name": "total_traffic", "file_key_name": "models.int_stations"}, "test.bike_share.not_null_int_rides_enriched_trip_duration.f37c6aeb08": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_duration", "model": "{{ get_where_subquery(ref('int_rides_enriched')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_rides_enriched_trip_duration", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_rides_enriched_trip_duration.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_rides_enriched_trip_duration.f37c6aeb08", "fqn": ["bike_share", "intermediate", "not_null_int_rides_enriched_trip_duration"], "alias": "not_null_int_rides_enriched_trip_duration", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.754976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_rides_enriched"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_rides_enriched"]}, "compiled_path": null, "column_name": "trip_duration", "file_key_name": "models.int_rides_enriched"}, "test.bike_share.not_null_int_rides_enriched_start_time.530541125c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_time", "model": "{{ get_where_subquery(ref('int_rides_enriched')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_rides_enriched_start_time", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_rides_enriched_start_time.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_rides_enriched_start_time.530541125c", "fqn": ["bike_share", "intermediate", "not_null_int_rides_enriched_start_time"], "alias": "not_null_int_rides_enriched_start_time", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.765843, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_rides_enriched"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_rides_enriched"]}, "compiled_path": null, "column_name": "start_time", "file_key_name": "models.int_rides_enriched"}, "test.bike_share.not_null_int_rides_enriched_stop_time.890673d43a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stop_time", "model": "{{ get_where_subquery(ref('int_rides_enriched')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_rides_enriched_stop_time", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_rides_enriched_stop_time.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_rides_enriched_stop_time.890673d43a", "fqn": ["bike_share", "intermediate", "not_null_int_rides_enriched_stop_time"], "alias": "not_null_int_rides_enriched_stop_time", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.765843, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_rides_enriched"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_rides_enriched"]}, "compiled_path": null, "column_name": "stop_time", "file_key_name": "models.int_rides_enriched"}, "test.bike_share.not_null_int_rides_enriched_start_station_id.7cdb610188": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_station_id", "model": "{{ get_where_subquery(ref('int_rides_enriched')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_rides_enriched_start_station_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_rides_enriched_start_station_id.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_rides_enriched_start_station_id.7cdb610188", "fqn": ["bike_share", "intermediate", "not_null_int_rides_enriched_start_station_id"], "alias": "not_null_int_rides_enriched_start_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.765843, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_rides_enriched"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_rides_enriched"]}, "compiled_path": null, "column_name": "start_station_id", "file_key_name": "models.int_rides_enriched"}, "test.bike_share.not_null_int_rides_enriched_end_station_id.9358a670b3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_station_id", "model": "{{ get_where_subquery(ref('int_rides_enriched')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_rides_enriched_end_station_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_rides_enriched_end_station_id.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_rides_enriched_end_station_id.9358a670b3", "fqn": ["bike_share", "intermediate", "not_null_int_rides_enriched_end_station_id"], "alias": "not_null_int_rides_enriched_end_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.765843, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_rides_enriched"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_rides_enriched"]}, "compiled_path": null, "column_name": "end_station_id", "file_key_name": "models.int_rides_enriched"}, "test.bike_share.not_null_int_rides_enriched_bike_id.34d5c5c4cb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bike_id", "model": "{{ get_where_subquery(ref('int_rides_enriched')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_rides_enriched_bike_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_rides_enriched_bike_id.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_rides_enriched_bike_id.34d5c5c4cb", "fqn": ["bike_share", "intermediate", "not_null_int_rides_enriched_bike_id"], "alias": "not_null_int_rides_enriched_bike_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.765843, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_rides_enriched"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_rides_enriched"]}, "compiled_path": null, "column_name": "bike_id", "file_key_name": "models.int_rides_enriched"}, "test.bike_share.not_null_int_rides_enriched_user_type.72931df95c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_type", "model": "{{ get_where_subquery(ref('int_rides_enriched')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_rides_enriched_user_type", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_rides_enriched_user_type.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_rides_enriched_user_type.72931df95c", "fqn": ["bike_share", "intermediate", "not_null_int_rides_enriched_user_type"], "alias": "not_null_int_rides_enriched_user_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.765843, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_rides_enriched"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_rides_enriched"]}, "compiled_path": null, "column_name": "user_type", "file_key_name": "models.int_rides_enriched"}, "test.bike_share.not_null_int_rides_enriched_trip_duration_in_min.1f9b0c6130": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_duration_in_min", "model": "{{ get_where_subquery(ref('int_rides_enriched')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_rides_enriched_trip_duration_in_min", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_rides_enriched_trip_duration_in_min.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_rides_enriched_trip_duration_in_min.1f9b0c6130", "fqn": ["bike_share", "intermediate", "not_null_int_rides_enriched_trip_duration_in_min"], "alias": "not_null_int_rides_enriched_trip_duration_in_min", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.765843, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_rides_enriched"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_rides_enriched"]}, "compiled_path": null, "column_name": "trip_duration_in_min", "file_key_name": "models.int_rides_enriched"}, "test.bike_share.not_null_int_rides_enriched_route_id.34085e3152": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "route_id", "model": "{{ get_where_subquery(ref('int_rides_enriched')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_int_rides_enriched_route_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_int_rides_enriched_route_id.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bike_share.not_null_int_rides_enriched_route_id.34085e3152", "fqn": ["bike_share", "intermediate", "not_null_int_rides_enriched_route_id"], "alias": "not_null_int_rides_enriched_route_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.765843, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_rides_enriched"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.int_rides_enriched"]}, "compiled_path": null, "column_name": "route_id", "file_key_name": "models.int_rides_enriched"}, "test.bike_share.not_null_dim_time_time_key.0069bfd97e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_key", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_time_time_key", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_time_time_key.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_time_time_key.0069bfd97e", "fqn": ["bike_share", "marts", "not_null_dim_time_time_key"], "alias": "not_null_dim_time_time_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.77732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null, "column_name": "time_key", "file_key_name": "models.dim_time"}, "test.bike_share.unique_dim_time_time_key.d3eade6aef": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "time_key", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "unique_dim_time_time_key", "resource_type": "test", "package_name": "bike_share", "path": "unique_dim_time_time_key.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.unique_dim_time_time_key.d3eade6aef", "fqn": ["bike_share", "marts", "unique_dim_time_time_key"], "alias": "unique_dim_time_time_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.77732, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null, "column_name": "time_key", "file_key_name": "models.dim_time"}, "test.bike_share.not_null_dim_time_date.2080f42875": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_time_date", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_time_date.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_time_date.2080f42875", "fqn": ["bike_share", "marts", "not_null_dim_time_date"], "alias": "not_null_dim_time_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.77732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null, "column_name": "date", "file_key_name": "models.dim_time"}, "test.bike_share.not_null_dim_time_year.6fb9595d53": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "year", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_time_year", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_time_year.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_time_year.6fb9595d53", "fqn": ["bike_share", "marts", "not_null_dim_time_year"], "alias": "not_null_dim_time_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.77732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null, "column_name": "year", "file_key_name": "models.dim_time"}, "test.bike_share.not_null_dim_time_month.9f6ecf2eb5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_time_month", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_time_month.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_time_month.9f6ecf2eb5", "fqn": ["bike_share", "marts", "not_null_dim_time_month"], "alias": "not_null_dim_time_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.77732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null, "column_name": "month", "file_key_name": "models.dim_time"}, "test.bike_share.not_null_dim_time_day.dc0e917166": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "day", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_time_day", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_time_day.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_time_day.dc0e917166", "fqn": ["bike_share", "marts", "not_null_dim_time_day"], "alias": "not_null_dim_time_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7880375, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null, "column_name": "day", "file_key_name": "models.dim_time"}, "test.bike_share.not_null_dim_time_day_of_week.296786d878": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "day_of_week", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_time_day_of_week", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_time_day_of_week.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_time_day_of_week.296786d878", "fqn": ["bike_share", "marts", "not_null_dim_time_day_of_week"], "alias": "not_null_dim_time_day_of_week", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7880375, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null, "column_name": "day_of_week", "file_key_name": "models.dim_time"}, "test.bike_share.not_null_dim_time_hour.5b8ccd8f25": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hour", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_time_hour", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_time_hour.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_time_hour.5b8ccd8f25", "fqn": ["bike_share", "marts", "not_null_dim_time_hour"], "alias": "not_null_dim_time_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7905462, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null, "column_name": "hour", "file_key_name": "models.dim_time"}, "test.bike_share.not_null_dim_time_is_weekend.f294374ebd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_weekend", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_time_is_weekend", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_time_is_weekend.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_time_is_weekend.f294374ebd", "fqn": ["bike_share", "marts", "not_null_dim_time_is_weekend"], "alias": "not_null_dim_time_is_weekend", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7910619, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null, "column_name": "is_weekend", "file_key_name": "models.dim_time"}, "test.bike_share.not_null_dim_time_month_name.5b491402b4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month_name", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_time_month_name", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_time_month_name.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_time_month_name.5b491402b4", "fqn": ["bike_share", "marts", "not_null_dim_time_month_name"], "alias": "not_null_dim_time_month_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7910619, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null, "column_name": "month_name", "file_key_name": "models.dim_time"}, "test.bike_share.not_null_dim_time_day_name.a2e1929d4a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "day_name", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_time_day_name", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_time_day_name.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_time_day_name.a2e1929d4a", "fqn": ["bike_share", "marts", "not_null_dim_time_day_name"], "alias": "not_null_dim_time_day_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7910619, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null, "column_name": "day_name", "file_key_name": "models.dim_time"}, "test.bike_share.not_null_dim_time_time_of_day.b635ba8420": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_of_day", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_time_time_of_day", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_time_time_of_day.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_time_time_of_day.b635ba8420", "fqn": ["bike_share", "marts", "not_null_dim_time_time_of_day"], "alias": "not_null_dim_time_time_of_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7910619, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_time"]}, "compiled_path": null, "column_name": "time_of_day", "file_key_name": "models.dim_time"}, "test.bike_share.not_null_dim_stations_station_id.23dc424efb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('dim_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_stations_station_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_stations_station_id.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_stations_station_id.23dc424efb", "fqn": ["bike_share", "marts", "not_null_dim_stations_station_id"], "alias": "not_null_dim_stations_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7910619, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_stations"]}, "compiled_path": null, "column_name": "station_id", "file_key_name": "models.dim_stations"}, "test.bike_share.unique_dim_stations_station_id.e61d234552": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('dim_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "unique_dim_stations_station_id", "resource_type": "test", "package_name": "bike_share", "path": "unique_dim_stations_station_id.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.unique_dim_stations_station_id.e61d234552", "fqn": ["bike_share", "marts", "unique_dim_stations_station_id"], "alias": "unique_dim_stations_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7910619, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.bike_share.dim_stations"]}, "compiled_path": null, "column_name": "station_id", "file_key_name": "models.dim_stations"}, "test.bike_share.not_null_dim_stations_station_name.d996ede8dc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_name", "model": "{{ get_where_subquery(ref('dim_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_stations_station_name", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_stations_station_name.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_stations_station_name.d996ede8dc", "fqn": ["bike_share", "marts", "not_null_dim_stations_station_name"], "alias": "not_null_dim_stations_station_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7910619, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_stations"]}, "compiled_path": null, "column_name": "station_name", "file_key_name": "models.dim_stations"}, "test.bike_share.not_null_dim_stations_latitude.50979c05e1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "latitude", "model": "{{ get_where_subquery(ref('dim_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_stations_latitude", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_stations_latitude.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_stations_latitude.50979c05e1", "fqn": ["bike_share", "marts", "not_null_dim_stations_latitude"], "alias": "not_null_dim_stations_latitude", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7990897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_stations"]}, "compiled_path": null, "column_name": "latitude", "file_key_name": "models.dim_stations"}, "test.bike_share.not_null_dim_stations_longitude.9e0724a62e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "longitude", "model": "{{ get_where_subquery(ref('dim_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_stations_longitude", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_stations_longitude.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_stations_longitude.9e0724a62e", "fqn": ["bike_share", "marts", "not_null_dim_stations_longitude"], "alias": "not_null_dim_stations_longitude", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7990897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_stations"]}, "compiled_path": null, "column_name": "longitude", "file_key_name": "models.dim_stations"}, "test.bike_share.not_null_dim_stations_start_count.a0bdafe01d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_count", "model": "{{ get_where_subquery(ref('dim_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_stations_start_count", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_stations_start_count.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_stations_start_count.a0bdafe01d", "fqn": ["bike_share", "marts", "not_null_dim_stations_start_count"], "alias": "not_null_dim_stations_start_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7990897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_stations"]}, "compiled_path": null, "column_name": "start_count", "file_key_name": "models.dim_stations"}, "test.bike_share.not_null_dim_stations_end_count.173f8d3617": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_count", "model": "{{ get_where_subquery(ref('dim_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_stations_end_count", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_stations_end_count.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_stations_end_count.173f8d3617", "fqn": ["bike_share", "marts", "not_null_dim_stations_end_count"], "alias": "not_null_dim_stations_end_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7990897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_stations"]}, "compiled_path": null, "column_name": "end_count", "file_key_name": "models.dim_stations"}, "test.bike_share.not_null_dim_stations_total_traffic.09569a444c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_traffic", "model": "{{ get_where_subquery(ref('dim_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_stations_total_traffic", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_stations_total_traffic.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_stations_total_traffic.09569a444c", "fqn": ["bike_share", "marts", "not_null_dim_stations_total_traffic"], "alias": "not_null_dim_stations_total_traffic", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7990897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_stations"]}, "compiled_path": null, "column_name": "total_traffic", "file_key_name": "models.dim_stations"}, "test.bike_share.not_null_dim_users_user_key.f5cbc01a0f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_key", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_users_user_key", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_users_user_key.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_users_user_key.f5cbc01a0f", "fqn": ["bike_share", "marts", "not_null_dim_users_user_key"], "alias": "not_null_dim_users_user_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7990897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_users"]}, "compiled_path": null, "column_name": "user_key", "file_key_name": "models.dim_users"}, "test.bike_share.unique_dim_users_user_key.a8e345d46f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_key", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "unique_dim_users_user_key", "resource_type": "test", "package_name": "bike_share", "path": "unique_dim_users_user_key.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.unique_dim_users_user_key.a8e345d46f", "fqn": ["bike_share", "marts", "unique_dim_users_user_key"], "alias": "unique_dim_users_user_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7990897, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.bike_share.dim_users"]}, "compiled_path": null, "column_name": "user_key", "file_key_name": "models.dim_users"}, "test.bike_share.not_null_dim_users_user_type.fe65be524b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_type", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_dim_users_user_type", "resource_type": "test", "package_name": "bike_share", "path": "not_null_dim_users_user_type.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_dim_users_user_type.fe65be524b", "fqn": ["bike_share", "marts", "not_null_dim_users_user_type"], "alias": "not_null_dim_users_user_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7990897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.dim_users"]}, "compiled_path": null, "column_name": "user_type", "file_key_name": "models.dim_users"}, "test.bike_share.accepted_values_dim_users_user_type__Subscriber__Customer.c4551dbcde": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Subscriber", "Customer"], "column_name": "user_type", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "accepted_values_dim_users_user_type__Subscriber__Customer", "resource_type": "test", "package_name": "bike_share", "path": "accepted_values_dim_users_user_type__Subscriber__Customer.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.accepted_values_dim_users_user_type__Subscriber__Customer.c4551dbcde", "fqn": ["bike_share", "marts", "accepted_values_dim_users_user_type__Subscriber__Customer"], "alias": "accepted_values_dim_users_user_type__Subscriber__Customer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.7990897, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.dim_users"]}, "compiled_path": null, "column_name": "user_type", "file_key_name": "models.dim_users"}, "test.bike_share.accepted_values_dim_users_gender__Male__Female__Unknown__Other.3a5f5d575b": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Male", "Female", "Unknown", "Other"], "column_name": "gender", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "accepted_values_dim_users_gender__Male__Female__Unknown__Other", "resource_type": "test", "package_name": "bike_share", "path": "accepted_values_dim_users_gender__Male__Female__Unknown__Other.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.accepted_values_dim_users_gender__Male__Female__Unknown__Other.3a5f5d575b", "fqn": ["bike_share", "marts", "accepted_values_dim_users_gender__Male__Female__Unknown__Other"], "alias": "accepted_values_dim_users_gender__Male__Female__Unknown__Other", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8104153, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.dim_users"]}, "compiled_path": null, "column_name": "gender", "file_key_name": "models.dim_users"}, "test.bike_share.accepted_values_dim_users_age_group__Under_18__18_24__25_34__35_44__45_54__55_64__65___Unknown.ba547d5738": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Under 18", "18-24", "25-34", "35-44", "45-54", "55-64", "65+", "Unknown"], "column_name": "age_group", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "accepted_values_dim_users_age_group__Under_18__18_24__25_34__35_44__45_54__55_64__65___Unknown", "resource_type": "test", "package_name": "bike_share", "path": "accepted_values_dim_users_07c793225e8394b0825fe85aa3c38448.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.accepted_values_dim_users_age_group__Under_18__18_24__25_34__35_44__45_54__55_64__65___Unknown.ba547d5738", "fqn": ["bike_share", "marts", "accepted_values_dim_users_age_group__Under_18__18_24__25_34__35_44__45_54__55_64__65___Unknown"], "alias": "accepted_values_dim_users_07c793225e8394b0825fe85aa3c38448", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_users_07c793225e8394b0825fe85aa3c38448", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_users_07c793225e8394b0825fe85aa3c38448"}, "created_at": 1750333003.8104153, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_users_07c793225e8394b0825fe85aa3c38448\") }}", "language": "sql", "refs": [["dim_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.dim_users"]}, "compiled_path": null, "column_name": "age_group", "file_key_name": "models.dim_users"}, "test.bike_share.not_null_fact_rides_summary_date.8c98302cfc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('fact_rides_summary')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_fact_rides_summary_date", "resource_type": "test", "package_name": "bike_share", "path": "not_null_fact_rides_summary_date.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_fact_rides_summary_date.8c98302cfc", "fqn": ["bike_share", "marts", "not_null_fact_rides_summary_date"], "alias": "not_null_fact_rides_summary_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.821448, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_rides_summary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.fact_rides_summary"]}, "compiled_path": null, "column_name": "date", "file_key_name": "models.fact_rides_summary"}, "test.bike_share.relationships_fact_rides_summary_date__date__ref_dim_time_.eaeb822d17": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_time')", "field": "date", "column_name": "date", "model": "{{ get_where_subquery(ref('fact_rides_summary')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "relationships_fact_rides_summary_date__date__ref_dim_time_", "resource_type": "test", "package_name": "bike_share", "path": "relationships_fact_rides_summary_date__date__ref_dim_time_.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.relationships_fact_rides_summary_date__date__ref_dim_time_.eaeb822d17", "fqn": ["bike_share", "marts", "relationships_fact_rides_summary_date__date__ref_dim_time_"], "alias": "relationships_fact_rides_summary_date__date__ref_dim_time_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.821448, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_time"], ["fact_rides_summary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.dim_time", "model.bike_share.fact_rides_summary"]}, "compiled_path": null, "column_name": "date", "file_key_name": "models.fact_rides_summary"}, "test.bike_share.not_null_fact_rides_summary_start_station_id.3f9d0f7e7c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_station_id", "model": "{{ get_where_subquery(ref('fact_rides_summary')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_fact_rides_summary_start_station_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_fact_rides_summary_start_station_id.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_fact_rides_summary_start_station_id.3f9d0f7e7c", "fqn": ["bike_share", "marts", "not_null_fact_rides_summary_start_station_id"], "alias": "not_null_fact_rides_summary_start_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8326726, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_rides_summary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.fact_rides_summary"]}, "compiled_path": null, "column_name": "start_station_id", "file_key_name": "models.fact_rides_summary"}, "test.bike_share.relationships_fact_rides_summary_start_station_id__station_id__ref_dim_stations_.2f0ebd0b07": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_stations')", "field": "station_id", "column_name": "start_station_id", "model": "{{ get_where_subquery(ref('fact_rides_summary')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "relationships_fact_rides_summary_start_station_id__station_id__ref_dim_stations_", "resource_type": "test", "package_name": "bike_share", "path": "relationships_fact_rides_summa_1c9a318e7c112deafbe40c5183e7f3f9.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.relationships_fact_rides_summary_start_station_id__station_id__ref_dim_stations_.2f0ebd0b07", "fqn": ["bike_share", "marts", "relationships_fact_rides_summary_start_station_id__station_id__ref_dim_stations_"], "alias": "relationships_fact_rides_summa_1c9a318e7c112deafbe40c5183e7f3f9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_rides_summa_1c9a318e7c112deafbe40c5183e7f3f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_rides_summa_1c9a318e7c112deafbe40c5183e7f3f9"}, "created_at": 1750333003.8326726, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_rides_summa_1c9a318e7c112deafbe40c5183e7f3f9\") }}", "language": "sql", "refs": [["dim_stations"], ["fact_rides_summary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.dim_stations", "model.bike_share.fact_rides_summary"]}, "compiled_path": null, "column_name": "start_station_id", "file_key_name": "models.fact_rides_summary"}, "test.bike_share.not_null_fact_rides_summary_end_station_id.05aad8a475": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_station_id", "model": "{{ get_where_subquery(ref('fact_rides_summary')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_fact_rides_summary_end_station_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_fact_rides_summary_end_station_id.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_fact_rides_summary_end_station_id.05aad8a475", "fqn": ["bike_share", "marts", "not_null_fact_rides_summary_end_station_id"], "alias": "not_null_fact_rides_summary_end_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8326726, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_rides_summary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.fact_rides_summary"]}, "compiled_path": null, "column_name": "end_station_id", "file_key_name": "models.fact_rides_summary"}, "test.bike_share.relationships_fact_rides_summary_end_station_id__station_id__ref_dim_stations_.b7950ba64d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_stations')", "field": "station_id", "column_name": "end_station_id", "model": "{{ get_where_subquery(ref('fact_rides_summary')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "relationships_fact_rides_summary_end_station_id__station_id__ref_dim_stations_", "resource_type": "test", "package_name": "bike_share", "path": "relationships_fact_rides_summa_f147038c98b67bcf2e8340674cce9e7c.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.relationships_fact_rides_summary_end_station_id__station_id__ref_dim_stations_.b7950ba64d", "fqn": ["bike_share", "marts", "relationships_fact_rides_summary_end_station_id__station_id__ref_dim_stations_"], "alias": "relationships_fact_rides_summa_f147038c98b67bcf2e8340674cce9e7c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_rides_summa_f147038c98b67bcf2e8340674cce9e7c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_rides_summa_f147038c98b67bcf2e8340674cce9e7c"}, "created_at": 1750333003.8326726, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_rides_summa_f147038c98b67bcf2e8340674cce9e7c\") }}", "language": "sql", "refs": [["dim_stations"], ["fact_rides_summary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.dim_stations", "model.bike_share.fact_rides_summary"]}, "compiled_path": null, "column_name": "end_station_id", "file_key_name": "models.fact_rides_summary"}, "test.bike_share.relationships_fact_rides_summary_user_key__user_key__ref_dim_users_.49ab920d8a": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_users')", "field": "user_key", "column_name": "user_key", "model": "{{ get_where_subquery(ref('fact_rides_summary')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "relationships_fact_rides_summary_user_key__user_key__ref_dim_users_", "resource_type": "test", "package_name": "bike_share", "path": "relationships_fact_rides_summa_c1c896fd4ea05615f73a41aadf800bb0.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.relationships_fact_rides_summary_user_key__user_key__ref_dim_users_.49ab920d8a", "fqn": ["bike_share", "marts", "relationships_fact_rides_summary_user_key__user_key__ref_dim_users_"], "alias": "relationships_fact_rides_summa_c1c896fd4ea05615f73a41aadf800bb0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_rides_summa_c1c896fd4ea05615f73a41aadf800bb0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_rides_summa_c1c896fd4ea05615f73a41aadf800bb0"}, "created_at": 1750333003.8436337, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_rides_summa_c1c896fd4ea05615f73a41aadf800bb0\") }}", "language": "sql", "refs": [["dim_users"], ["fact_rides_summary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.dim_users", "model.bike_share.fact_rides_summary"]}, "compiled_path": null, "column_name": "user_key", "file_key_name": "models.fact_rides_summary"}, "test.bike_share.relationships_fact_rides_summary_time_key__time_key__ref_dim_time_.d65089c77a": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_time')", "field": "time_key", "column_name": "time_key", "model": "{{ get_where_subquery(ref('fact_rides_summary')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "relationships_fact_rides_summary_time_key__time_key__ref_dim_time_", "resource_type": "test", "package_name": "bike_share", "path": "relationships_fact_rides_summa_b213473c51bee5b3ddeb86494b40bf09.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.relationships_fact_rides_summary_time_key__time_key__ref_dim_time_.d65089c77a", "fqn": ["bike_share", "marts", "relationships_fact_rides_summary_time_key__time_key__ref_dim_time_"], "alias": "relationships_fact_rides_summa_b213473c51bee5b3ddeb86494b40bf09", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_rides_summa_b213473c51bee5b3ddeb86494b40bf09", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_rides_summa_b213473c51bee5b3ddeb86494b40bf09"}, "created_at": 1750333003.8436337, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_rides_summa_b213473c51bee5b3ddeb86494b40bf09\") }}", "language": "sql", "refs": [["dim_time"], ["fact_rides_summary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.dim_time", "model.bike_share.fact_rides_summary"]}, "compiled_path": null, "column_name": "time_key", "file_key_name": "models.fact_rides_summary"}, "test.bike_share.not_null_fact_rides_summary_ride_count.2924975307": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ride_count", "model": "{{ get_where_subquery(ref('fact_rides_summary')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_fact_rides_summary_ride_count", "resource_type": "test", "package_name": "bike_share", "path": "not_null_fact_rides_summary_ride_count.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_fact_rides_summary_ride_count.2924975307", "fqn": ["bike_share", "marts", "not_null_fact_rides_summary_ride_count"], "alias": "not_null_fact_rides_summary_ride_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8548248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_rides_summary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.fact_rides_summary"]}, "compiled_path": null, "column_name": "ride_count", "file_key_name": "models.fact_rides_summary"}, "test.bike_share.not_null_fact_rides_summary_avg_trip_duration_min.e99ac40f12": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "avg_trip_duration_min", "model": "{{ get_where_subquery(ref('fact_rides_summary')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_fact_rides_summary_avg_trip_duration_min", "resource_type": "test", "package_name": "bike_share", "path": "not_null_fact_rides_summary_avg_trip_duration_min.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_fact_rides_summary_avg_trip_duration_min.e99ac40f12", "fqn": ["bike_share", "marts", "not_null_fact_rides_summary_avg_trip_duration_min"], "alias": "not_null_fact_rides_summary_avg_trip_duration_min", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8548248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_rides_summary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.fact_rides_summary"]}, "compiled_path": null, "column_name": "avg_trip_duration_min", "file_key_name": "models.fact_rides_summary"}, "test.bike_share.not_null_fact_rides_summary_route_id.7494dababc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "route_id", "model": "{{ get_where_subquery(ref('fact_rides_summary')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_fact_rides_summary_route_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_fact_rides_summary_route_id.sql", "original_file_path": "models\\marts\\schema.yml", "unique_id": "test.bike_share.not_null_fact_rides_summary_route_id.7494dababc", "fqn": ["bike_share", "marts", "not_null_fact_rides_summary_route_id"], "alias": "not_null_fact_rides_summary_route_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8548248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_rides_summary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.fact_rides_summary"]}, "compiled_path": null, "column_name": "route_id", "file_key_name": "models.fact_rides_summary"}, "test.bike_share.not_null_stg_rides_trip_duration.8b16e7bd66": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_duration", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_rides_trip_duration", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_rides_trip_duration.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_rides_trip_duration.8b16e7bd66", "fqn": ["bike_share", "staging", "not_null_stg_rides_trip_duration"], "alias": "not_null_stg_rides_trip_duration", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8548248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "trip_duration", "file_key_name": "models.stg_rides"}, "test.bike_share.positive_value_stg_rides_trip_duration.bb4be5fb81": {"test_metadata": {"name": "positive_value", "kwargs": {"column_name": "trip_duration", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "positive_value_stg_rides_trip_duration", "resource_type": "test", "package_name": "bike_share", "path": "positive_value_stg_rides_trip_duration.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.positive_value_stg_rides_trip_duration.bb4be5fb81", "fqn": ["bike_share", "staging", "positive_value_stg_rides_trip_duration"], "alias": "positive_value_stg_rides_trip_duration", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8657925, "relation_name": null, "raw_code": "{{ test_positive_value(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bike_share.test_positive_value", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "trip_duration", "file_key_name": "models.stg_rides"}, "test.bike_share.not_null_stg_rides_start_time.2a20850f14": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_time", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_rides_start_time", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_rides_start_time.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_rides_start_time.2a20850f14", "fqn": ["bike_share", "staging", "not_null_stg_rides_start_time"], "alias": "not_null_stg_rides_start_time", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8657925, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "start_time", "file_key_name": "models.stg_rides"}, "test.bike_share.not_null_stg_rides_stop_time.007467d5d6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stop_time", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_rides_stop_time", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_rides_stop_time.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_rides_stop_time.007467d5d6", "fqn": ["bike_share", "staging", "not_null_stg_rides_stop_time"], "alias": "not_null_stg_rides_stop_time", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8657925, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "stop_time", "file_key_name": "models.stg_rides"}, "test.bike_share.not_null_stg_rides_start_station_id.2593f32f6b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_station_id", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_rides_start_station_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_rides_start_station_id.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_rides_start_station_id.2593f32f6b", "fqn": ["bike_share", "staging", "not_null_stg_rides_start_station_id"], "alias": "not_null_stg_rides_start_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8657925, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "start_station_id", "file_key_name": "models.stg_rides"}, "test.bike_share.not_null_stg_rides_start_station_name.78fc17d554": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_station_name", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_rides_start_station_name", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_rides_start_station_name.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_rides_start_station_name.78fc17d554", "fqn": ["bike_share", "staging", "not_null_stg_rides_start_station_name"], "alias": "not_null_stg_rides_start_station_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8657925, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "start_station_name", "file_key_name": "models.stg_rides"}, "test.bike_share.not_null_stg_rides_end_station_id.65eda5c855": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_station_id", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_rides_end_station_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_rides_end_station_id.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_rides_end_station_id.65eda5c855", "fqn": ["bike_share", "staging", "not_null_stg_rides_end_station_id"], "alias": "not_null_stg_rides_end_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8657925, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "end_station_id", "file_key_name": "models.stg_rides"}, "test.bike_share.not_null_stg_rides_end_station_name.6314817d5d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_station_name", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_rides_end_station_name", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_rides_end_station_name.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_rides_end_station_name.6314817d5d", "fqn": ["bike_share", "staging", "not_null_stg_rides_end_station_name"], "alias": "not_null_stg_rides_end_station_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8657925, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "end_station_name", "file_key_name": "models.stg_rides"}, "test.bike_share.not_null_stg_rides_bike_id.04363dd72f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bike_id", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_rides_bike_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_rides_bike_id.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_rides_bike_id.04363dd72f", "fqn": ["bike_share", "staging", "not_null_stg_rides_bike_id"], "alias": "not_null_stg_rides_bike_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8657925, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "bike_id", "file_key_name": "models.stg_rides"}, "test.bike_share.not_null_stg_rides_user_type.d8a7d01c6d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_type", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_rides_user_type", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_rides_user_type.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_rides_user_type.d8a7d01c6d", "fqn": ["bike_share", "staging", "not_null_stg_rides_user_type"], "alias": "not_null_stg_rides_user_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8657925, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "user_type", "file_key_name": "models.stg_rides"}, "test.bike_share.accepted_values_stg_rides_user_type__Subscriber__Customer.85f6b0cc16": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Subscriber", "Customer"], "column_name": "user_type", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "accepted_values_stg_rides_user_type__Subscriber__Customer", "resource_type": "test", "package_name": "bike_share", "path": "accepted_values_stg_rides_user_type__Subscriber__Customer.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.accepted_values_stg_rides_user_type__Subscriber__Customer.85f6b0cc16", "fqn": ["bike_share", "staging", "accepted_values_stg_rides_user_type__Subscriber__Customer"], "alias": "accepted_values_stg_rides_user_type__Subscriber__Customer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8770049, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "user_type", "file_key_name": "models.stg_rides"}, "test.bike_share.not_null_stg_rides_trip_duration_in_min.d29834039f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_duration_in_min", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_rides_trip_duration_in_min", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_rides_trip_duration_in_min.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_rides_trip_duration_in_min.d29834039f", "fqn": ["bike_share", "staging", "not_null_stg_rides_trip_duration_in_min"], "alias": "not_null_stg_rides_trip_duration_in_min", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8770049, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "trip_duration_in_min", "file_key_name": "models.stg_rides"}, "test.bike_share.positive_value_stg_rides_trip_duration_in_min.b01ce25599": {"test_metadata": {"name": "positive_value", "kwargs": {"column_name": "trip_duration_in_min", "model": "{{ get_where_subquery(ref('stg_rides')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "positive_value_stg_rides_trip_duration_in_min", "resource_type": "test", "package_name": "bike_share", "path": "positive_value_stg_rides_trip_duration_in_min.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.positive_value_stg_rides_trip_duration_in_min.b01ce25599", "fqn": ["bike_share", "staging", "positive_value_stg_rides_trip_duration_in_min"], "alias": "positive_value_stg_rides_trip_duration_in_min", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8770049, "relation_name": null, "raw_code": "{{ test_positive_value(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rides"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bike_share.test_positive_value", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.stg_rides"]}, "compiled_path": null, "column_name": "trip_duration_in_min", "file_key_name": "models.stg_rides"}, "test.bike_share.not_null_stg_stations_station_id.88327b742a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('stg_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_stations_station_id", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_stations_station_id.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_stations_station_id.88327b742a", "fqn": ["bike_share", "staging", "not_null_stg_stations_station_id"], "alias": "not_null_stg_stations_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8840377, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_stations"]}, "compiled_path": null, "column_name": "station_id", "file_key_name": "models.stg_stations"}, "test.bike_share.unique_stg_stations_station_id.cc6df0deeb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('stg_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "unique_stg_stations_station_id", "resource_type": "test", "package_name": "bike_share", "path": "unique_stg_stations_station_id.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.unique_stg_stations_station_id.cc6df0deeb", "fqn": ["bike_share", "staging", "unique_stg_stations_station_id"], "alias": "unique_stg_stations_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8840377, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.bike_share.stg_stations"]}, "compiled_path": null, "column_name": "station_id", "file_key_name": "models.stg_stations"}, "test.bike_share.not_null_stg_stations_station_name.06602c6638": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_name", "model": "{{ get_where_subquery(ref('stg_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_stations_station_name", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_stations_station_name.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_stations_station_name.06602c6638", "fqn": ["bike_share", "staging", "not_null_stg_stations_station_name"], "alias": "not_null_stg_stations_station_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8840377, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_stations"]}, "compiled_path": null, "column_name": "station_name", "file_key_name": "models.stg_stations"}, "test.bike_share.not_null_stg_stations_latitude.145c98253c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "latitude", "model": "{{ get_where_subquery(ref('stg_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_stations_latitude", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_stations_latitude.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_stations_latitude.145c98253c", "fqn": ["bike_share", "staging", "not_null_stg_stations_latitude"], "alias": "not_null_stg_stations_latitude", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8876672, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_stations"]}, "compiled_path": null, "column_name": "latitude", "file_key_name": "models.stg_stations"}, "test.bike_share.not_null_stg_stations_longitude.3fe57995d9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "longitude", "model": "{{ get_where_subquery(ref('stg_stations')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_stations_longitude", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_stations_longitude.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_stations_longitude.3fe57995d9", "fqn": ["bike_share", "staging", "not_null_stg_stations_longitude"], "alias": "not_null_stg_stations_longitude", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8880978, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_stations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_stations"]}, "compiled_path": null, "column_name": "longitude", "file_key_name": "models.stg_stations"}, "test.bike_share.not_null_stg_users_user_type.4d93ecce03": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_type", "model": "{{ get_where_subquery(ref('stg_users')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "not_null_stg_users_user_type", "resource_type": "test", "package_name": "bike_share", "path": "not_null_stg_users_user_type.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.not_null_stg_users_user_type.4d93ecce03", "fqn": ["bike_share", "staging", "not_null_stg_users_user_type"], "alias": "not_null_stg_users_user_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.8880978, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bike_share.stg_users"]}, "compiled_path": null, "column_name": "user_type", "file_key_name": "models.stg_users"}, "test.bike_share.accepted_values_stg_users_user_type__Subscriber__Customer.9fa051658f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Subscriber", "Customer"], "column_name": "user_type", "model": "{{ get_where_subquery(ref('stg_users')) }}"}, "namespace": null}, "database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main_dbt_test__audit", "name": "accepted_values_stg_users_user_type__Subscriber__Customer", "resource_type": "test", "package_name": "bike_share", "path": "accepted_values_stg_users_user_type__Subscriber__Customer.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bike_share.accepted_values_stg_users_user_type__Subscriber__Customer.9fa051658f", "fqn": ["bike_share", "staging", "accepted_values_stg_users_user_type__Subscriber__Customer"], "alias": "accepted_values_stg_users_user_type__Subscriber__Customer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1750333003.890631, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.bike_share.stg_users"]}, "compiled_path": null, "column_name": "user_type", "file_key_name": "models.stg_users"}}, "sources": {"source.bike_share.raw.raw_rides": {"database": "C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db", "schema": "main", "name": "raw_rides", "resource_type": "source", "package_name": "bike_share", "path": "models\\staging\\sources.yml", "original_file_path": "models\\staging\\sources.yml", "unique_id": "source.bike_share.raw.raw_rides", "fqn": ["bike_share", "staging", "raw", "raw_rides"], "source_name": "raw", "source_description": "Raw bike share data from source CSV files", "loader": "", "identifier": "raw_rides", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw rides data from bike share system", "columns": {"trip_duration": {"name": "trip_duration", "description": "Duration of the trip in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Start time of the trip", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stop_time": {"name": "stop_time", "description": "End time of the trip", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_station_id": {"name": "start_station_id", "description": "ID of the starting station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_station_name": {"name": "start_station_name", "description": "Name of the starting station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_station_latitude": {"name": "start_station_latitude", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_station_longitude": {"name": "start_station_longitude", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_station_id": {"name": "end_station_id", "description": "ID of the ending station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_station_name": {"name": "end_station_name", "description": "Name of the ending station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_station_latitude": {"name": "end_station_latitude", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_station_longitude": {"name": "end_station_longitude", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bike_id": {"name": "bike_id", "description": "Unique identifier for the bike used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_type": {"name": "user_type", "description": "Type of user (Member/Casual)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_year": {"name": "birth_year", "description": "Birth year of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender of the user (0: Unknown, 1: Male, 2: Female)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trip_duration_in_min": {"name": "trip_duration_in_min", "description": "Duration of the trip in minutes", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"C:\\Users\\Parth Suyal\\Desktop\\bike_share_analysis\\dbt_bike_share\\bike_share.db\".\"main\".\"raw_rides\"", "created_at": 1750333003.8991451}}, "macros": {"macro.bike_share.calculate_age": {"name": "calculate_age", "resource_type": "macro", "package_name": "bike_share", "path": "macros\\calculate_age.sql", "original_file_path": "macros\\calculate_age.sql", "unique_id": "macro.bike_share.calculate_age", "macro_sql": "{% macro calculate_age(birth_year) %}\r\n    CASE\r\n        WHEN {{ birth_year }} IS NULL OR {{ birth_year }} = 0 THEN NULL\r\n        ELSE DATE_PART('year', CURRENT_DATE()) - {{ birth_year }}\r\n    END\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2213504, "supported_languages": null}, "macro.bike_share.test_positive_value": {"name": "test_positive_value", "resource_type": "macro", "package_name": "bike_share", "path": "macros\\tests\\positive_value.sql", "original_file_path": "macros\\tests\\positive_value.sql", "unique_id": "macro.bike_share.test_positive_value", "macro_sql": "{% test positive_value(model, column_name) %}\r\n\r\nWITH validation AS (\r\n    SELECT\r\n        {{ column_name }} AS value\r\n    FROM {{ model }}\r\n)\r\n\r\nSELECT\r\n    *\r\nFROM validation\r\nWHERE value <= 0 OR value IS NULL\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2213504, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=adapter.use_database()) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=adapter.use_database()) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from information_schema.schemata\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from information_schema.schemata\n        where schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary and adapter.use_database()), schema=(not temporary)) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n    except ImportError:\n        pass\n    finally:\n        if isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    con.execute('create table {{ relation.include(database=adapter.use_database()) }} as select * from df')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.include(database=adapter.use_database()) }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation.include(database=adapter.use_database()) }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__truncate_relation": {"name": "duckdb__truncate_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__truncate_relation", "macro_sql": "{% macro duckdb__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    DELETE FROM {{ relation.include(database=adapter.use_database()) }} WHERE 1=1\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_delete_insert_sql": {"name": "duckdb__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_delete_insert_sql", "macro_sql": "{% macro duckdb__get_incremental_delete_insert_sql(arg_dict) %}\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"].include(database=adapter.use_database()), arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_append_sql": {"name": "duckdb__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_append_sql", "macro_sql": "{% macro duckdb__get_incremental_append_sql(arg_dict) %}\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"].include(database=adapter.use_database()), arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.register_glue_table": {"name": "register_glue_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.register_glue_table", "macro_sql": "{% macro register_glue_table(register, glue_database, relation, location, format) -%}\n  {% if location.startswith(\"s3://\") and register == true %}\n    {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n    {% do adapter.register_glue_table(glue_database, relation.identifier, column_list, location, format) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.232533, "supported_languages": null}, "macro.dbt_duckdb.render_write_options": {"name": "render_write_options", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.render_write_options", "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% for k in options %}\n    {% if options[k] is string %}\n      {% set _ = options.update({k: render(options[k])}) %}\n    {% else %}\n      {% set _ = options.update({k: render(options[k])}) %}\n    {% endif %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.243648, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        '{{ database }}' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.243648, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\seed.sql", "original_file_path": "macros\\seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.243648, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\seed.sql", "original_file_path": "macros\\seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.243648, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\seed.sql", "original_file_path": "macros\\seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.243648, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\snapshot_merge.sql", "original_file_path": "macros\\snapshot_merge.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {% set insert_sql %}\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type = 'insert';\n    {% endset %}\n\n    {% do adapter.add_query(insert_sql, auto_begin=False) %}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id = {{ target.identifier }}.dbt_scd_id\n      and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n      and {{ target.identifier }}.dbt_valid_to is null;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.243648, "supported_languages": null}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\materializations\\external.sql", "original_file_path": "macros\\materializations\\external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation.include(database=adapter.use_database()) }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {%- set glue_database = render(config.get('glue_database', default='default')) -%}\n  {% do register_glue_table(glue_register, glue_database, target_relation, location, format) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.register_glue_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.243648, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(True, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2546115, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2546115, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2546115, "supported_languages": null}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2546115, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2546115, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\external_location.sql", "original_file_path": "macros\\utils\\external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\lastday.sql", "original_file_path": "macros\\utils\\lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\splitpart.sql", "original_file_path": "macros\\utils\\splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    coalesce(string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ], '')\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\upstream.sql", "original_file_path": "macros\\utils\\upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel.include(database=adapter.use_database()) }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.265738, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2769399, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.28772, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.287995, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.287995, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.287995, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.289002, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.290516, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2975285, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2975285, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2975285, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2975285, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2975285, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2994227, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2994227, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2994227, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2994227, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.2994227, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3024318, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.310361, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.327133, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3281317, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.331999, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.331999, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.331999, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3432133, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.343514, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.343514, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.343514, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.343514, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.343514, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3547084, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.366171, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.366171, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.366171, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.366171, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.366171, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.366171, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.366171, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.366171, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.366171, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3769248, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3834414, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3883994, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3883994, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3883994, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3883994, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.390443, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.390443, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.390443, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.390443, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.390443, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.390443, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.390443, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.390443, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3990734, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.3990734, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4010556, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4010556, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4010556, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4010556, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4010556, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4010556, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4010556, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4010556, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4010556, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4010556, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4109864, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4214368, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750333003.4218209, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.bike_share.int_rides_enriched": ["model.bike_share.int_time", "model.bike_share.stg_rides", "model.bike_share.stg_stations", "model.bike_share.stg_stations", "model.bike_share.stg_users"], "model.bike_share.int_stations": ["model.bike_share.stg_rides", "model.bike_share.stg_stations"], "model.bike_share.int_time": ["model.bike_share.stg_rides"], "model.bike_share.calculate_age": [], "model.bike_share.dim_stations": ["model.bike_share.int_stations"], "model.bike_share.dim_time": ["model.bike_share.int_time"], "model.bike_share.dim_users": ["model.bike_share.int_rides_enriched"], "model.bike_share.fact_rides_summary": ["model.bike_share.dim_time", "model.bike_share.dim_users", "model.bike_share.int_rides_enriched"], "model.bike_share.stg_rides": ["source.bike_share.raw.raw_rides"], "model.bike_share.stg_stations": ["source.bike_share.raw.raw_rides"], "model.bike_share.stg_users": ["source.bike_share.raw.raw_rides"], "test.bike_share.dim_stations_not_null": ["model.bike_share.dim_stations"], "test.bike_share.dim_stations_positive_traffic": ["model.bike_share.dim_stations"], "test.bike_share.dim_stations_unique": ["model.bike_share.dim_stations"], "test.bike_share.dim_stations_valid_coordinates": ["model.bike_share.dim_stations"], "test.bike_share.dim_time_unique_date_hour": ["model.bike_share.dim_time"], "test.bike_share.dim_time_unique_key": ["model.bike_share.dim_time"], "test.bike_share.dim_time_valid_day_of_week": ["model.bike_share.dim_time"], "test.bike_share.dim_time_valid_hour": ["model.bike_share.dim_time"], "test.bike_share.dim_time_valid_month": ["model.bike_share.dim_time"], "test.bike_share.dim_users_unique_key": ["model.bike_share.dim_users"], "test.bike_share.dim_users_valid_age_group": ["model.bike_share.dim_users"], "test.bike_share.dim_users_valid_gender": ["model.bike_share.dim_users"], "test.bike_share.dim_users_valid_user_type": ["model.bike_share.dim_users"], "test.bike_share.stg_rides_positive_duration": ["model.bike_share.stg_rides"], "test.bike_share.stg_rides_required_fields": ["model.bike_share.stg_rides"], "test.bike_share.stg_rides_station_ids": ["model.bike_share.stg_rides"], "test.bike_share.stg_rides_valid_times": ["model.bike_share.stg_rides"], "test.bike_share.stg_rides_valid_user_type": ["model.bike_share.stg_rides"], "test.bike_share.not_null_int_time_date.0205b353a5": ["model.bike_share.int_time"], "test.bike_share.not_null_int_time_year.f71fa658ca": ["model.bike_share.int_time"], "test.bike_share.not_null_int_time_month.35d346cfb3": ["model.bike_share.int_time"], "test.bike_share.accepted_values_int_time_month__1__2__3__4__5__6__7__8__9__10__11__12.c5fc7814cf": ["model.bike_share.int_time"], "test.bike_share.not_null_int_time_day.73126b147a": ["model.bike_share.int_time"], "test.bike_share.not_null_int_time_day_of_week.e08b24b829": ["model.bike_share.int_time"], "test.bike_share.accepted_values_int_time_day_of_week__0__1__2__3__4__5__6.489c861d07": ["model.bike_share.int_time"], "test.bike_share.not_null_int_time_hour.bbc837aa17": ["model.bike_share.int_time"], "test.bike_share.not_null_int_time_is_weekend.c76e9be810": ["model.bike_share.int_time"], "test.bike_share.not_null_int_time_time_of_day.97f588ca6f": ["model.bike_share.int_time"], "test.bike_share.accepted_values_int_time_time_of_day__Morning__Afternoon__Evening__Night.019d7af3ba": ["model.bike_share.int_time"], "test.bike_share.not_null_int_stations_station_id.a04489f6f1": ["model.bike_share.int_stations"], "test.bike_share.unique_int_stations_station_id.705f7995d2": ["model.bike_share.int_stations"], "test.bike_share.not_null_int_stations_station_name.d32d8c9303": ["model.bike_share.int_stations"], "test.bike_share.not_null_int_stations_latitude.c923fa7354": ["model.bike_share.int_stations"], "test.bike_share.not_null_int_stations_longitude.0df6494a69": ["model.bike_share.int_stations"], "test.bike_share.not_null_int_stations_start_count.b9706bfca2": ["model.bike_share.int_stations"], "test.bike_share.not_null_int_stations_end_count.322dbc78cb": ["model.bike_share.int_stations"], "test.bike_share.not_null_int_stations_total_traffic.ad3957e14e": ["model.bike_share.int_stations"], "test.bike_share.not_null_int_rides_enriched_trip_duration.f37c6aeb08": ["model.bike_share.int_rides_enriched"], "test.bike_share.not_null_int_rides_enriched_start_time.530541125c": ["model.bike_share.int_rides_enriched"], "test.bike_share.not_null_int_rides_enriched_stop_time.890673d43a": ["model.bike_share.int_rides_enriched"], "test.bike_share.not_null_int_rides_enriched_start_station_id.7cdb610188": ["model.bike_share.int_rides_enriched"], "test.bike_share.not_null_int_rides_enriched_end_station_id.9358a670b3": ["model.bike_share.int_rides_enriched"], "test.bike_share.not_null_int_rides_enriched_bike_id.34d5c5c4cb": ["model.bike_share.int_rides_enriched"], "test.bike_share.not_null_int_rides_enriched_user_type.72931df95c": ["model.bike_share.int_rides_enriched"], "test.bike_share.not_null_int_rides_enriched_trip_duration_in_min.1f9b0c6130": ["model.bike_share.int_rides_enriched"], "test.bike_share.not_null_int_rides_enriched_route_id.34085e3152": ["model.bike_share.int_rides_enriched"], "test.bike_share.not_null_dim_time_time_key.0069bfd97e": ["model.bike_share.dim_time"], "test.bike_share.unique_dim_time_time_key.d3eade6aef": ["model.bike_share.dim_time"], "test.bike_share.not_null_dim_time_date.2080f42875": ["model.bike_share.dim_time"], "test.bike_share.not_null_dim_time_year.6fb9595d53": ["model.bike_share.dim_time"], "test.bike_share.not_null_dim_time_month.9f6ecf2eb5": ["model.bike_share.dim_time"], "test.bike_share.not_null_dim_time_day.dc0e917166": ["model.bike_share.dim_time"], "test.bike_share.not_null_dim_time_day_of_week.296786d878": ["model.bike_share.dim_time"], "test.bike_share.not_null_dim_time_hour.5b8ccd8f25": ["model.bike_share.dim_time"], "test.bike_share.not_null_dim_time_is_weekend.f294374ebd": ["model.bike_share.dim_time"], "test.bike_share.not_null_dim_time_month_name.5b491402b4": ["model.bike_share.dim_time"], "test.bike_share.not_null_dim_time_day_name.a2e1929d4a": ["model.bike_share.dim_time"], "test.bike_share.not_null_dim_time_time_of_day.b635ba8420": ["model.bike_share.dim_time"], "test.bike_share.not_null_dim_stations_station_id.23dc424efb": ["model.bike_share.dim_stations"], "test.bike_share.unique_dim_stations_station_id.e61d234552": ["model.bike_share.dim_stations"], "test.bike_share.not_null_dim_stations_station_name.d996ede8dc": ["model.bike_share.dim_stations"], "test.bike_share.not_null_dim_stations_latitude.50979c05e1": ["model.bike_share.dim_stations"], "test.bike_share.not_null_dim_stations_longitude.9e0724a62e": ["model.bike_share.dim_stations"], "test.bike_share.not_null_dim_stations_start_count.a0bdafe01d": ["model.bike_share.dim_stations"], "test.bike_share.not_null_dim_stations_end_count.173f8d3617": ["model.bike_share.dim_stations"], "test.bike_share.not_null_dim_stations_total_traffic.09569a444c": ["model.bike_share.dim_stations"], "test.bike_share.not_null_dim_users_user_key.f5cbc01a0f": ["model.bike_share.dim_users"], "test.bike_share.unique_dim_users_user_key.a8e345d46f": ["model.bike_share.dim_users"], "test.bike_share.not_null_dim_users_user_type.fe65be524b": ["model.bike_share.dim_users"], "test.bike_share.accepted_values_dim_users_user_type__Subscriber__Customer.c4551dbcde": ["model.bike_share.dim_users"], "test.bike_share.accepted_values_dim_users_gender__Male__Female__Unknown__Other.3a5f5d575b": ["model.bike_share.dim_users"], "test.bike_share.accepted_values_dim_users_age_group__Under_18__18_24__25_34__35_44__45_54__55_64__65___Unknown.ba547d5738": ["model.bike_share.dim_users"], "test.bike_share.not_null_fact_rides_summary_date.8c98302cfc": ["model.bike_share.fact_rides_summary"], "test.bike_share.relationships_fact_rides_summary_date__date__ref_dim_time_.eaeb822d17": ["model.bike_share.dim_time", "model.bike_share.fact_rides_summary"], "test.bike_share.not_null_fact_rides_summary_start_station_id.3f9d0f7e7c": ["model.bike_share.fact_rides_summary"], "test.bike_share.relationships_fact_rides_summary_start_station_id__station_id__ref_dim_stations_.2f0ebd0b07": ["model.bike_share.dim_stations", "model.bike_share.fact_rides_summary"], "test.bike_share.not_null_fact_rides_summary_end_station_id.05aad8a475": ["model.bike_share.fact_rides_summary"], "test.bike_share.relationships_fact_rides_summary_end_station_id__station_id__ref_dim_stations_.b7950ba64d": ["model.bike_share.dim_stations", "model.bike_share.fact_rides_summary"], "test.bike_share.relationships_fact_rides_summary_user_key__user_key__ref_dim_users_.49ab920d8a": ["model.bike_share.dim_users", "model.bike_share.fact_rides_summary"], "test.bike_share.relationships_fact_rides_summary_time_key__time_key__ref_dim_time_.d65089c77a": ["model.bike_share.dim_time", "model.bike_share.fact_rides_summary"], "test.bike_share.not_null_fact_rides_summary_ride_count.2924975307": ["model.bike_share.fact_rides_summary"], "test.bike_share.not_null_fact_rides_summary_avg_trip_duration_min.e99ac40f12": ["model.bike_share.fact_rides_summary"], "test.bike_share.not_null_fact_rides_summary_route_id.7494dababc": ["model.bike_share.fact_rides_summary"], "test.bike_share.not_null_stg_rides_trip_duration.8b16e7bd66": ["model.bike_share.stg_rides"], "test.bike_share.positive_value_stg_rides_trip_duration.bb4be5fb81": ["model.bike_share.stg_rides"], "test.bike_share.not_null_stg_rides_start_time.2a20850f14": ["model.bike_share.stg_rides"], "test.bike_share.not_null_stg_rides_stop_time.007467d5d6": ["model.bike_share.stg_rides"], "test.bike_share.not_null_stg_rides_start_station_id.2593f32f6b": ["model.bike_share.stg_rides"], "test.bike_share.not_null_stg_rides_start_station_name.78fc17d554": ["model.bike_share.stg_rides"], "test.bike_share.not_null_stg_rides_end_station_id.65eda5c855": ["model.bike_share.stg_rides"], "test.bike_share.not_null_stg_rides_end_station_name.6314817d5d": ["model.bike_share.stg_rides"], "test.bike_share.not_null_stg_rides_bike_id.04363dd72f": ["model.bike_share.stg_rides"], "test.bike_share.not_null_stg_rides_user_type.d8a7d01c6d": ["model.bike_share.stg_rides"], "test.bike_share.accepted_values_stg_rides_user_type__Subscriber__Customer.85f6b0cc16": ["model.bike_share.stg_rides"], "test.bike_share.not_null_stg_rides_trip_duration_in_min.d29834039f": ["model.bike_share.stg_rides"], "test.bike_share.positive_value_stg_rides_trip_duration_in_min.b01ce25599": ["model.bike_share.stg_rides"], "test.bike_share.not_null_stg_stations_station_id.88327b742a": ["model.bike_share.stg_stations"], "test.bike_share.unique_stg_stations_station_id.cc6df0deeb": ["model.bike_share.stg_stations"], "test.bike_share.not_null_stg_stations_station_name.06602c6638": ["model.bike_share.stg_stations"], "test.bike_share.not_null_stg_stations_latitude.145c98253c": ["model.bike_share.stg_stations"], "test.bike_share.not_null_stg_stations_longitude.3fe57995d9": ["model.bike_share.stg_stations"], "test.bike_share.not_null_stg_users_user_type.4d93ecce03": ["model.bike_share.stg_users"], "test.bike_share.accepted_values_stg_users_user_type__Subscriber__Customer.9fa051658f": ["model.bike_share.stg_users"], "source.bike_share.raw.raw_rides": []}, "child_map": {"model.bike_share.int_rides_enriched": ["model.bike_share.dim_users", "model.bike_share.fact_rides_summary", "test.bike_share.not_null_int_rides_enriched_bike_id.34d5c5c4cb", "test.bike_share.not_null_int_rides_enriched_end_station_id.9358a670b3", "test.bike_share.not_null_int_rides_enriched_route_id.34085e3152", "test.bike_share.not_null_int_rides_enriched_start_station_id.7cdb610188", "test.bike_share.not_null_int_rides_enriched_start_time.530541125c", "test.bike_share.not_null_int_rides_enriched_stop_time.890673d43a", "test.bike_share.not_null_int_rides_enriched_trip_duration.f37c6aeb08", "test.bike_share.not_null_int_rides_enriched_trip_duration_in_min.1f9b0c6130", "test.bike_share.not_null_int_rides_enriched_user_type.72931df95c"], "model.bike_share.int_stations": ["model.bike_share.dim_stations", "test.bike_share.not_null_int_stations_end_count.322dbc78cb", "test.bike_share.not_null_int_stations_latitude.c923fa7354", "test.bike_share.not_null_int_stations_longitude.0df6494a69", "test.bike_share.not_null_int_stations_start_count.b9706bfca2", "test.bike_share.not_null_int_stations_station_id.a04489f6f1", "test.bike_share.not_null_int_stations_station_name.d32d8c9303", "test.bike_share.not_null_int_stations_total_traffic.ad3957e14e", "test.bike_share.unique_int_stations_station_id.705f7995d2"], "model.bike_share.int_time": ["model.bike_share.dim_time", "model.bike_share.int_rides_enriched", "test.bike_share.accepted_values_int_time_day_of_week__0__1__2__3__4__5__6.489c861d07", "test.bike_share.accepted_values_int_time_month__1__2__3__4__5__6__7__8__9__10__11__12.c5fc7814cf", "test.bike_share.accepted_values_int_time_time_of_day__Morning__Afternoon__Evening__Night.019d7af3ba", "test.bike_share.not_null_int_time_date.0205b353a5", "test.bike_share.not_null_int_time_day.73126b147a", "test.bike_share.not_null_int_time_day_of_week.e08b24b829", "test.bike_share.not_null_int_time_hour.bbc837aa17", "test.bike_share.not_null_int_time_is_weekend.c76e9be810", "test.bike_share.not_null_int_time_month.35d346cfb3", "test.bike_share.not_null_int_time_time_of_day.97f588ca6f", "test.bike_share.not_null_int_time_year.f71fa658ca"], "model.bike_share.calculate_age": [], "model.bike_share.dim_stations": ["test.bike_share.dim_stations_not_null", "test.bike_share.dim_stations_positive_traffic", "test.bike_share.dim_stations_unique", "test.bike_share.dim_stations_valid_coordinates", "test.bike_share.not_null_dim_stations_end_count.173f8d3617", "test.bike_share.not_null_dim_stations_latitude.50979c05e1", "test.bike_share.not_null_dim_stations_longitude.9e0724a62e", "test.bike_share.not_null_dim_stations_start_count.a0bdafe01d", "test.bike_share.not_null_dim_stations_station_id.23dc424efb", "test.bike_share.not_null_dim_stations_station_name.d996ede8dc", "test.bike_share.not_null_dim_stations_total_traffic.09569a444c", "test.bike_share.relationships_fact_rides_summary_end_station_id__station_id__ref_dim_stations_.b7950ba64d", "test.bike_share.relationships_fact_rides_summary_start_station_id__station_id__ref_dim_stations_.2f0ebd0b07", "test.bike_share.unique_dim_stations_station_id.e61d234552"], "model.bike_share.dim_time": ["model.bike_share.fact_rides_summary", "test.bike_share.dim_time_unique_date_hour", "test.bike_share.dim_time_unique_key", "test.bike_share.dim_time_valid_day_of_week", "test.bike_share.dim_time_valid_hour", "test.bike_share.dim_time_valid_month", "test.bike_share.not_null_dim_time_date.2080f42875", "test.bike_share.not_null_dim_time_day.dc0e917166", "test.bike_share.not_null_dim_time_day_name.a2e1929d4a", "test.bike_share.not_null_dim_time_day_of_week.296786d878", "test.bike_share.not_null_dim_time_hour.5b8ccd8f25", "test.bike_share.not_null_dim_time_is_weekend.f294374ebd", "test.bike_share.not_null_dim_time_month.9f6ecf2eb5", "test.bike_share.not_null_dim_time_month_name.5b491402b4", "test.bike_share.not_null_dim_time_time_key.0069bfd97e", "test.bike_share.not_null_dim_time_time_of_day.b635ba8420", "test.bike_share.not_null_dim_time_year.6fb9595d53", "test.bike_share.relationships_fact_rides_summary_date__date__ref_dim_time_.eaeb822d17", "test.bike_share.relationships_fact_rides_summary_time_key__time_key__ref_dim_time_.d65089c77a", "test.bike_share.unique_dim_time_time_key.d3eade6aef"], "model.bike_share.dim_users": ["model.bike_share.fact_rides_summary", "test.bike_share.accepted_values_dim_users_age_group__Under_18__18_24__25_34__35_44__45_54__55_64__65___Unknown.ba547d5738", "test.bike_share.accepted_values_dim_users_gender__Male__Female__Unknown__Other.3a5f5d575b", "test.bike_share.accepted_values_dim_users_user_type__Subscriber__Customer.c4551dbcde", "test.bike_share.dim_users_unique_key", "test.bike_share.dim_users_valid_age_group", "test.bike_share.dim_users_valid_gender", "test.bike_share.dim_users_valid_user_type", "test.bike_share.not_null_dim_users_user_key.f5cbc01a0f", "test.bike_share.not_null_dim_users_user_type.fe65be524b", "test.bike_share.relationships_fact_rides_summary_user_key__user_key__ref_dim_users_.49ab920d8a", "test.bike_share.unique_dim_users_user_key.a8e345d46f"], "model.bike_share.fact_rides_summary": ["test.bike_share.not_null_fact_rides_summary_avg_trip_duration_min.e99ac40f12", "test.bike_share.not_null_fact_rides_summary_date.8c98302cfc", "test.bike_share.not_null_fact_rides_summary_end_station_id.05aad8a475", "test.bike_share.not_null_fact_rides_summary_ride_count.2924975307", "test.bike_share.not_null_fact_rides_summary_route_id.7494dababc", "test.bike_share.not_null_fact_rides_summary_start_station_id.3f9d0f7e7c", "test.bike_share.relationships_fact_rides_summary_date__date__ref_dim_time_.eaeb822d17", "test.bike_share.relationships_fact_rides_summary_end_station_id__station_id__ref_dim_stations_.b7950ba64d", "test.bike_share.relationships_fact_rides_summary_start_station_id__station_id__ref_dim_stations_.2f0ebd0b07", "test.bike_share.relationships_fact_rides_summary_time_key__time_key__ref_dim_time_.d65089c77a", "test.bike_share.relationships_fact_rides_summary_user_key__user_key__ref_dim_users_.49ab920d8a"], "model.bike_share.stg_rides": ["model.bike_share.int_rides_enriched", "model.bike_share.int_stations", "model.bike_share.int_time", "test.bike_share.accepted_values_stg_rides_user_type__Subscriber__Customer.85f6b0cc16", "test.bike_share.not_null_stg_rides_bike_id.04363dd72f", "test.bike_share.not_null_stg_rides_end_station_id.65eda5c855", "test.bike_share.not_null_stg_rides_end_station_name.6314817d5d", "test.bike_share.not_null_stg_rides_start_station_id.2593f32f6b", "test.bike_share.not_null_stg_rides_start_station_name.78fc17d554", "test.bike_share.not_null_stg_rides_start_time.2a20850f14", "test.bike_share.not_null_stg_rides_stop_time.007467d5d6", "test.bike_share.not_null_stg_rides_trip_duration.8b16e7bd66", "test.bike_share.not_null_stg_rides_trip_duration_in_min.d29834039f", "test.bike_share.not_null_stg_rides_user_type.d8a7d01c6d", "test.bike_share.positive_value_stg_rides_trip_duration.bb4be5fb81", "test.bike_share.positive_value_stg_rides_trip_duration_in_min.b01ce25599", "test.bike_share.stg_rides_positive_duration", "test.bike_share.stg_rides_required_fields", "test.bike_share.stg_rides_station_ids", "test.bike_share.stg_rides_valid_times", "test.bike_share.stg_rides_valid_user_type"], "model.bike_share.stg_stations": ["model.bike_share.int_rides_enriched", "model.bike_share.int_rides_enriched", "model.bike_share.int_stations", "test.bike_share.not_null_stg_stations_latitude.145c98253c", "test.bike_share.not_null_stg_stations_longitude.3fe57995d9", "test.bike_share.not_null_stg_stations_station_id.88327b742a", "test.bike_share.not_null_stg_stations_station_name.06602c6638", "test.bike_share.unique_stg_stations_station_id.cc6df0deeb"], "model.bike_share.stg_users": ["model.bike_share.int_rides_enriched", "test.bike_share.accepted_values_stg_users_user_type__Subscriber__Customer.9fa051658f", "test.bike_share.not_null_stg_users_user_type.4d93ecce03"], "test.bike_share.dim_stations_not_null": [], "test.bike_share.dim_stations_positive_traffic": [], "test.bike_share.dim_stations_unique": [], "test.bike_share.dim_stations_valid_coordinates": [], "test.bike_share.dim_time_unique_date_hour": [], "test.bike_share.dim_time_unique_key": [], "test.bike_share.dim_time_valid_day_of_week": [], "test.bike_share.dim_time_valid_hour": [], "test.bike_share.dim_time_valid_month": [], "test.bike_share.dim_users_unique_key": [], "test.bike_share.dim_users_valid_age_group": [], "test.bike_share.dim_users_valid_gender": [], "test.bike_share.dim_users_valid_user_type": [], "test.bike_share.stg_rides_positive_duration": [], "test.bike_share.stg_rides_required_fields": [], "test.bike_share.stg_rides_station_ids": [], "test.bike_share.stg_rides_valid_times": [], "test.bike_share.stg_rides_valid_user_type": [], "test.bike_share.not_null_int_time_date.0205b353a5": [], "test.bike_share.not_null_int_time_year.f71fa658ca": [], "test.bike_share.not_null_int_time_month.35d346cfb3": [], "test.bike_share.accepted_values_int_time_month__1__2__3__4__5__6__7__8__9__10__11__12.c5fc7814cf": [], "test.bike_share.not_null_int_time_day.73126b147a": [], "test.bike_share.not_null_int_time_day_of_week.e08b24b829": [], "test.bike_share.accepted_values_int_time_day_of_week__0__1__2__3__4__5__6.489c861d07": [], "test.bike_share.not_null_int_time_hour.bbc837aa17": [], "test.bike_share.not_null_int_time_is_weekend.c76e9be810": [], "test.bike_share.not_null_int_time_time_of_day.97f588ca6f": [], "test.bike_share.accepted_values_int_time_time_of_day__Morning__Afternoon__Evening__Night.019d7af3ba": [], "test.bike_share.not_null_int_stations_station_id.a04489f6f1": [], "test.bike_share.unique_int_stations_station_id.705f7995d2": [], "test.bike_share.not_null_int_stations_station_name.d32d8c9303": [], "test.bike_share.not_null_int_stations_latitude.c923fa7354": [], "test.bike_share.not_null_int_stations_longitude.0df6494a69": [], "test.bike_share.not_null_int_stations_start_count.b9706bfca2": [], "test.bike_share.not_null_int_stations_end_count.322dbc78cb": [], "test.bike_share.not_null_int_stations_total_traffic.ad3957e14e": [], "test.bike_share.not_null_int_rides_enriched_trip_duration.f37c6aeb08": [], "test.bike_share.not_null_int_rides_enriched_start_time.530541125c": [], "test.bike_share.not_null_int_rides_enriched_stop_time.890673d43a": [], "test.bike_share.not_null_int_rides_enriched_start_station_id.7cdb610188": [], "test.bike_share.not_null_int_rides_enriched_end_station_id.9358a670b3": [], "test.bike_share.not_null_int_rides_enriched_bike_id.34d5c5c4cb": [], "test.bike_share.not_null_int_rides_enriched_user_type.72931df95c": [], "test.bike_share.not_null_int_rides_enriched_trip_duration_in_min.1f9b0c6130": [], "test.bike_share.not_null_int_rides_enriched_route_id.34085e3152": [], "test.bike_share.not_null_dim_time_time_key.0069bfd97e": [], "test.bike_share.unique_dim_time_time_key.d3eade6aef": [], "test.bike_share.not_null_dim_time_date.2080f42875": [], "test.bike_share.not_null_dim_time_year.6fb9595d53": [], "test.bike_share.not_null_dim_time_month.9f6ecf2eb5": [], "test.bike_share.not_null_dim_time_day.dc0e917166": [], "test.bike_share.not_null_dim_time_day_of_week.296786d878": [], "test.bike_share.not_null_dim_time_hour.5b8ccd8f25": [], "test.bike_share.not_null_dim_time_is_weekend.f294374ebd": [], "test.bike_share.not_null_dim_time_month_name.5b491402b4": [], "test.bike_share.not_null_dim_time_day_name.a2e1929d4a": [], "test.bike_share.not_null_dim_time_time_of_day.b635ba8420": [], "test.bike_share.not_null_dim_stations_station_id.23dc424efb": [], "test.bike_share.unique_dim_stations_station_id.e61d234552": [], "test.bike_share.not_null_dim_stations_station_name.d996ede8dc": [], "test.bike_share.not_null_dim_stations_latitude.50979c05e1": [], "test.bike_share.not_null_dim_stations_longitude.9e0724a62e": [], "test.bike_share.not_null_dim_stations_start_count.a0bdafe01d": [], "test.bike_share.not_null_dim_stations_end_count.173f8d3617": [], "test.bike_share.not_null_dim_stations_total_traffic.09569a444c": [], "test.bike_share.not_null_dim_users_user_key.f5cbc01a0f": [], "test.bike_share.unique_dim_users_user_key.a8e345d46f": [], "test.bike_share.not_null_dim_users_user_type.fe65be524b": [], "test.bike_share.accepted_values_dim_users_user_type__Subscriber__Customer.c4551dbcde": [], "test.bike_share.accepted_values_dim_users_gender__Male__Female__Unknown__Other.3a5f5d575b": [], "test.bike_share.accepted_values_dim_users_age_group__Under_18__18_24__25_34__35_44__45_54__55_64__65___Unknown.ba547d5738": [], "test.bike_share.not_null_fact_rides_summary_date.8c98302cfc": [], "test.bike_share.relationships_fact_rides_summary_date__date__ref_dim_time_.eaeb822d17": [], "test.bike_share.not_null_fact_rides_summary_start_station_id.3f9d0f7e7c": [], "test.bike_share.relationships_fact_rides_summary_start_station_id__station_id__ref_dim_stations_.2f0ebd0b07": [], "test.bike_share.not_null_fact_rides_summary_end_station_id.05aad8a475": [], "test.bike_share.relationships_fact_rides_summary_end_station_id__station_id__ref_dim_stations_.b7950ba64d": [], "test.bike_share.relationships_fact_rides_summary_user_key__user_key__ref_dim_users_.49ab920d8a": [], "test.bike_share.relationships_fact_rides_summary_time_key__time_key__ref_dim_time_.d65089c77a": [], "test.bike_share.not_null_fact_rides_summary_ride_count.2924975307": [], "test.bike_share.not_null_fact_rides_summary_avg_trip_duration_min.e99ac40f12": [], "test.bike_share.not_null_fact_rides_summary_route_id.7494dababc": [], "test.bike_share.not_null_stg_rides_trip_duration.8b16e7bd66": [], "test.bike_share.positive_value_stg_rides_trip_duration.bb4be5fb81": [], "test.bike_share.not_null_stg_rides_start_time.2a20850f14": [], "test.bike_share.not_null_stg_rides_stop_time.007467d5d6": [], "test.bike_share.not_null_stg_rides_start_station_id.2593f32f6b": [], "test.bike_share.not_null_stg_rides_start_station_name.78fc17d554": [], "test.bike_share.not_null_stg_rides_end_station_id.65eda5c855": [], "test.bike_share.not_null_stg_rides_end_station_name.6314817d5d": [], "test.bike_share.not_null_stg_rides_bike_id.04363dd72f": [], "test.bike_share.not_null_stg_rides_user_type.d8a7d01c6d": [], "test.bike_share.accepted_values_stg_rides_user_type__Subscriber__Customer.85f6b0cc16": [], "test.bike_share.not_null_stg_rides_trip_duration_in_min.d29834039f": [], "test.bike_share.positive_value_stg_rides_trip_duration_in_min.b01ce25599": [], "test.bike_share.not_null_stg_stations_station_id.88327b742a": [], "test.bike_share.unique_stg_stations_station_id.cc6df0deeb": [], "test.bike_share.not_null_stg_stations_station_name.06602c6638": [], "test.bike_share.not_null_stg_stations_latitude.145c98253c": [], "test.bike_share.not_null_stg_stations_longitude.3fe57995d9": [], "test.bike_share.not_null_stg_users_user_type.4d93ecce03": [], "test.bike_share.accepted_values_stg_users_user_type__Subscriber__Customer.9fa051658f": [], "source.bike_share.raw.raw_rides": ["model.bike_share.stg_rides", "model.bike_share.stg_stations", "model.bike_share.stg_users"]}}
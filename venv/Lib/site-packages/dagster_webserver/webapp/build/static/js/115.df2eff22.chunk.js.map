{"version":3,"file":"static/js/115.df2eff22.chunk.js","mappings":"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","sources":["../../core/src/runs/RunListTabs.tsx","../../core/src/schedules/SchedulesNextTicks.tsx","../../core/src/runs/ScheduledRunListRoot.tsx","../../core/src/schedules/SchedulerInfo.tsx","../../core/src/schedules/TimestampDisplay.tsx","../../core/src/ui/Loading.tsx","../../core/src/ui/MenuLink.tsx","../../ui/src/components/Alert.tsx","../../ui/src/components/Page.tsx"],"sourcesContent":["import {gql, useQuery} from '@apollo/client';\nimport {Colors, JoinedButtons, TokenizingFieldValue} from '@dagster-io/ui';\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport {useLocation} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {RunStatus, RunsFilter} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nimport {failedStatuses, inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {runsPathWithFilters, useQueryPersistedRunFilters} from './RunsFilterInput';\nimport {RunTabsCountQuery, RunTabsCountQueryVariables} from './types/RunListTabs.types';\n\nconst getDocumentTitle = (selected: ReturnType<typeof useSelectedRunsTab>) => {\n  switch (selected) {\n    case 'all':\n      return 'Runs | All runs';\n    case 'failed':\n      return 'Runs | Failed';\n    case 'in-progress':\n      return 'Runs | In progress';\n    case 'queued':\n      return 'Runs | Queued';\n    case 'scheduled':\n      return 'Runs | Scheduled';\n    default:\n      return 'Runs';\n  }\n};\n\nexport const useRunListTabs = (filter: RunsFilter = {}) => {\n  const queryResult = useQuery<RunTabsCountQuery, RunTabsCountQueryVariables>(\n    RUN_TABS_COUNT_QUERY,\n    {\n      variables: {\n        queuedFilter: {...filter, statuses: Array.from(queuedStatuses)},\n        inProgressFilter: {...filter, statuses: Array.from(inProgressStatuses)},\n      },\n    },\n  );\n\n  const {data: countData} = queryResult;\n  const {queuedCount, inProgressCount} = React.useMemo(() => {\n    return {\n      queuedCount:\n        countData?.queuedCount?.__typename === 'Runs' ? countData.queuedCount.count : null,\n      inProgressCount:\n        countData?.inProgressCount?.__typename === 'Runs' ? countData.inProgressCount.count : null,\n    };\n  }, [countData]);\n\n  const [filterTokens] = useQueryPersistedRunFilters();\n  const selectedTab = useSelectedRunsTab(filterTokens);\n\n  useDocumentTitle(getDocumentTitle(selectedTab));\n\n  const urlForStatus = (statuses: RunStatus[]) => {\n    const tokensMinusStatus = filterTokens.filter((token) => token.token !== 'status');\n    const statusTokens = statuses.map((status) => ({token: 'status' as const, value: status}));\n    return runsPathWithFilters([...statusTokens, ...tokensMinusStatus]);\n  };\n\n  const tabs = (\n    <JoinedButtons>\n      <ActivatableButton to={urlForStatus([])} id=\"all\" $active={selectedTab === 'all'}>\n        All runs\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(queuedStatuses))}\n        id=\"queued\"\n        $active={selectedTab === 'queued'}\n      >\n        Queued ({queuedCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(inProgressStatuses))}\n        id=\"in-progress\"\n        $active={selectedTab === 'in-progress'}\n      >\n        In progress ({inProgressCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(failedStatuses))}\n        id=\"failed\"\n        $active={selectedTab === 'failed'}\n      >\n        Failed\n      </ActivatableButton>\n      <ActivatableButton\n        title=\"Scheduled\"\n        to=\"/runs/scheduled\"\n        id=\"scheduled\"\n        $active={selectedTab === 'scheduled'}\n      >\n        Scheduled\n      </ActivatableButton>\n    </JoinedButtons>\n  );\n\n  return {tabs, queryResult};\n};\n\nexport const ActivatableButton = styled(AnchorButton)<{$active: boolean}>`\n  ${(props) =>\n    props.$active &&\n    `\n    background: ${Colors.Gray200};\n  `}\n`;\n\nexport const useSelectedRunsTab = (filterTokens: TokenizingFieldValue[]) => {\n  const {pathname} = useLocation();\n  if (pathname === '/runs/timeline') {\n    return 'timeline';\n  }\n  if (pathname === '/runs/scheduled') {\n    return 'scheduled';\n  }\n  if (pathname === '/overview/backfills') {\n    return 'backfills';\n  }\n\n  const statusTokens = new Set(\n    filterTokens.filter((token) => token.token === 'status').map((token) => token.value),\n  );\n  if (isEqual(queuedStatuses, statusTokens)) {\n    return 'queued';\n  }\n  if (isEqual(inProgressStatuses, statusTokens)) {\n    return 'in-progress';\n  }\n  if (isEqual(failedStatuses, statusTokens)) {\n    return 'failed';\n  }\n  return 'all';\n};\n\nexport const RUN_TABS_COUNT_QUERY = gql`\n  query RunTabsCountQuery($queuedFilter: RunsFilter!, $inProgressFilter: RunsFilter!) {\n    queuedCount: pipelineRunsOrError(filter: $queuedFilter) {\n      ... on Runs {\n        count\n      }\n    }\n    inProgressCount: pipelineRunsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        count\n      }\n    }\n  }\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  MenuItem,\n  Menu,\n  NonIdealState,\n  Popover,\n  Spinner,\n  Table,\n  Subheading,\n  StyledReadOnlyCodeMirror,\n  ExternalAnchorButton,\n} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useCopyToClipboard} from '../app/browser';\nimport {InstigationStatus} from '../graphql/types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RunTags} from '../runs/RunTags';\nimport {MenuLink} from '../ui/MenuLink';\nimport {\n  findRepositoryAmongOptions,\n  isThisThingAJob,\n  useRepository,\n  useRepositoryOptions,\n} from '../workspace/WorkspaceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {\n  RepositoryForNextTicksFragment,\n  ScheduleFutureTickEvaluationResultFragment,\n  ScheduleFutureTickRunRequestFragment,\n  ScheduleNextFiveTicksFragment,\n  ScheduleTickConfigQuery,\n  ScheduleTickConfigQueryVariables,\n} from './types/SchedulesNextTicks.types';\n\ninterface ScheduleTick {\n  schedule: ScheduleNextFiveTicksFragment;\n  timestamp: number;\n  repoAddress: RepoAddress;\n}\n\nexport const SchedulesNextTicks: React.FC<{\n  repos: RepositoryForNextTicksFragment[];\n}> = React.memo(({repos}) => {\n  const nextTicks: ScheduleTick[] = [];\n  let anyPipelines = false;\n  let anySchedules = false;\n\n  const {options} = useRepositoryOptions();\n\n  repos.forEach((repo) => {\n    const {schedules} = repo;\n    anySchedules = anySchedules || schedules.length > 0;\n\n    const repoAddress = {\n      name: repo.name,\n      location: repo.location.name,\n    };\n\n    const futureTickSchedules = schedules.filter(\n      (schedule) =>\n        schedule.futureTicks.results.length &&\n        schedule.scheduleState.status === InstigationStatus.RUNNING,\n    );\n\n    const minMaxTimestamp = Math.min(\n      ...futureTickSchedules.map(\n        (schedule) =>\n          schedule.futureTicks.results[schedule.futureTicks.results.length - 1]!.timestamp!,\n      ),\n    );\n\n    futureTickSchedules.forEach((schedule) => {\n      schedule.futureTicks.results.forEach((tick) => {\n        if (tick.timestamp! <= minMaxTimestamp) {\n          nextTicks.push({schedule, timestamp: tick.timestamp!, repoAddress});\n        }\n      });\n    });\n\n    if (!anyPipelines) {\n      anyPipelines = schedules.some((schedule) => !!schedule.mode);\n    }\n  });\n\n  nextTicks.sort((a, b) => a.timestamp - b.timestamp);\n\n  if (!nextTicks.length) {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No scheduled ticks\"\n          description={\n            anySchedules ? (\n              <>\n                There are no running schedules.{' '}\n                <Link to=\"/overview/schedules\">Start a schedule</Link> to see scheduled ticks.\n              </>\n            ) : (\n              <>\n                There are no schedules in this workspace. Create a running schedule to view its\n                scheduled ticks.\n              </>\n            )\n          }\n          action={\n            anySchedules ? null : (\n              <ExternalAnchorButton\n                icon={<Icon name=\"open_in_new\" />}\n                href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules\"\n              >\n                View documentation\n              </ExternalAnchorButton>\n            )\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '260px'}}>Timestamp</th>\n          <th style={{width: '30%'}}>Schedule</th>\n          <th>{anyPipelines ? 'Job / Pipeline' : 'Job'}</th>\n          <th>Metadata</th>\n        </tr>\n      </thead>\n      <tbody>\n        {nextTicks.map(({schedule, timestamp, repoAddress}) => {\n          const repo = findRepositoryAmongOptions(options, repoAddress);\n          return (\n            <tr key={`${schedule.id}:${timestamp}`}>\n              <td>\n                <TimestampDisplay\n                  timestamp={timestamp}\n                  timezone={schedule.executionTimezone}\n                  timeFormat={{showSeconds: false, showTimezone: true}}\n                />\n              </td>\n              <td>\n                <Link to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}>\n                  {schedule.name}\n                </Link>\n              </td>\n              <td>\n                <PipelineReference\n                  pipelineName={schedule.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isThisThingAJob(repo, schedule.pipelineName)}\n                />\n              </td>\n              <td>\n                <NextTickMenu\n                  repoAddress={repoAddress}\n                  schedule={schedule}\n                  tickTimestamp={timestamp}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n});\n\nconst NextTickMenu: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: ScheduleNextFiveTicksFragment;\n  tickTimestamp: number;\n}> = React.memo(({repoAddress, schedule, tickTimestamp}) => {\n  const scheduleSelector = {\n    ...repoAddressToSelector(repoAddress),\n    scheduleName: schedule.name,\n  };\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const [loadTickConfig, {called, loading, data}] = useLazyQuery<\n    ScheduleTickConfigQuery,\n    ScheduleTickConfigQueryVariables\n  >(SCHEDULE_TICK_CONFIG_QUERY, {\n    variables: {\n      scheduleSelector,\n      tickTimestamp,\n    },\n  });\n\n  const infoReady = called ? !loading : false;\n  const evaluationResult =\n    data?.scheduleOrError?.__typename === 'Schedule'\n      ? data.scheduleOrError.futureTick.evaluationResult\n      : null;\n\n  const menuItems = infoReady ? (\n    <NextTickMenuItems\n      repoAddress={repoAddress}\n      schedule={schedule}\n      loading={loading}\n      onItemOpen={setOpen}\n      evaluationResult={evaluationResult}\n    />\n  ) : (\n    <Spinner purpose=\"body-text\" />\n  );\n  return (\n    <>\n      <Popover\n        content={<Menu>{menuItems}</Menu>}\n        position=\"bottom-right\"\n        onOpening={() => {\n          if (!called) {\n            loadTickConfig();\n          }\n        }}\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      <NextTickDialog\n        repoAddress={repoAddress}\n        isOpen={isOpen}\n        setOpen={setOpen}\n        schedule={schedule}\n        tickTimestamp={tickTimestamp}\n        evaluationResult={evaluationResult}\n      />\n    </>\n  );\n});\n\nconst NextTickMenuItems: React.FC<{\n  repoAddress: RepoAddress;\n  evaluationResult: ScheduleFutureTickEvaluationResultFragment | null;\n  schedule: ScheduleNextFiveTicksFragment;\n  loading: boolean;\n  onItemOpen: (value: boolean) => void;\n}> = ({repoAddress, schedule, evaluationResult, loading, onItemOpen}) => {\n  if (!evaluationResult) {\n    return <MenuItem text=\"Could not preview tick for this schedule\" />;\n  }\n\n  if (evaluationResult.skipReason) {\n    return <MenuItem text=\"View skip reason...\" onClick={() => onItemOpen(true)} />;\n  }\n\n  if (evaluationResult.error) {\n    return <MenuItem text=\"View error...\" onClick={() => onItemOpen(true)} />;\n  }\n\n  if (!evaluationResult.runRequests || !evaluationResult.runRequests.length) {\n    return <MenuItem text=\"No runs requested for this projected schedule tick\" />;\n  }\n\n  if (evaluationResult.runRequests.length === 1) {\n    const runRequest = evaluationResult.runRequests[0];\n    const runConfigYaml = runRequest ? runRequest.runConfigYaml : '';\n    return (\n      <>\n        <MenuItem\n          text={loading ? 'Loading Configuration...' : 'View Configuration...'}\n          icon=\"open_in_new\"\n          onClick={() => onItemOpen(true)}\n        />\n        <MenuLink\n          text=\"Open in Launchpad...\"\n          icon=\"edit\"\n          target=\"_blank\"\n          to={workspacePathFromAddress(\n            repoAddress,\n            `/pipeline_or_job/${schedule.pipelineName}/playground/setup?${qs.stringify({\n              mode: schedule.mode,\n              config: runConfigYaml,\n              solidSelection: schedule.solidSelection,\n            })}`,\n          )}\n        />\n      </>\n    );\n  }\n\n  return (\n    <MenuItem\n      text={`View ${evaluationResult.runRequests.length} run requests...`}\n      icon=\"edit\"\n      target=\"_blank\"\n      onClick={() => onItemOpen(true)}\n    />\n  );\n};\n\nconst NextTickDialog: React.FC<{\n  repoAddress: RepoAddress;\n  isOpen: boolean;\n  setOpen: (value: boolean) => void;\n  evaluationResult: ScheduleFutureTickEvaluationResultFragment | null;\n  schedule: ScheduleNextFiveTicksFragment;\n  tickTimestamp: number;\n}> = ({repoAddress, evaluationResult, schedule, tickTimestamp, setOpen, isOpen}) => {\n  const [\n    selectedRunRequest,\n    setSelectedRunRequest,\n  ] = React.useState<ScheduleFutureTickRunRequestFragment | null>(\n    evaluationResult && evaluationResult.runRequests && evaluationResult.runRequests.length === 1\n      ? evaluationResult.runRequests[0]!\n      : null,\n  );\n\n  const copy = useCopyToClipboard();\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, schedule.pipelineName);\n\n  React.useEffect(() => {\n    if (\n      evaluationResult &&\n      evaluationResult.runRequests &&\n      evaluationResult.runRequests.length === 1\n    ) {\n      setSelectedRunRequest(evaluationResult.runRequests[0]!);\n    }\n  }, [evaluationResult]);\n\n  const close = () => {\n    setSelectedRunRequest(null);\n    setOpen(false);\n  };\n\n  let body;\n  if (!evaluationResult) {\n    body = null;\n  } else if (selectedRunRequest) {\n    body = (\n      <Box flex={{direction: 'column', gap: 20}}>\n        <Box flex={{direction: 'column', gap: 12}} padding={{top: 16, horizontal: 24}}>\n          <Subheading>Tags</Subheading>\n          {selectedRunRequest.tags.length ? (\n            <RunTags tags={selectedRunRequest.tags} mode={isJob ? null : schedule.mode} />\n          ) : null}\n        </Box>\n        <div>\n          <Box\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            padding={{left: 24, bottom: 16}}\n          >\n            <Subheading>Config</Subheading>\n          </Box>\n          <StyledReadOnlyCodeMirror\n            value={selectedRunRequest.runConfigYaml}\n            options={{lineNumbers: true, mode: 'yaml'}}\n          />\n        </div>\n      </Box>\n    );\n  } else if (evaluationResult.error) {\n    body = (\n      <DialogBody>\n        <PythonErrorInfo error={evaluationResult.error} />\n      </DialogBody>\n    );\n  } else if (evaluationResult.skipReason) {\n    body = (\n      <DialogBody>\n        <SkipWrapper>{evaluationResult.skipReason}</SkipWrapper>\n      </DialogBody>\n    );\n  } else if (evaluationResult.runRequests) {\n    body = (\n      <DialogBody>\n        <RunRequestBody>\n          <Table>\n            <thead>\n              <tr>\n                <th>Run key</th>\n                <th>Config</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {evaluationResult.runRequests.map((runRequest, idx) => {\n                if (!runRequest) {\n                  return null;\n                }\n                return (\n                  <tr key={idx}>\n                    <td>{runRequest.runKey || <span>&mdash;</span>}</td>\n                    <td>\n                      <ButtonLink\n                        onClick={() => setSelectedRunRequest(runRequest)}\n                        underline={false}\n                      >\n                        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                          <Icon name=\"open_in_new\" color={Colors.Gray400} />\n                          <span>View config</span>\n                        </Group>\n                      </ButtonLink>\n                    </td>\n                    <td>\n                      <Popover\n                        content={\n                          <Menu>\n                            <MenuLink\n                              text=\"Open in Launchpad...\"\n                              icon=\"edit\"\n                              target=\"_blank\"\n                              to={workspacePathFromAddress(\n                                repoAddress,\n                                `/${isJob ? 'jobs' : 'pipelines'}/${\n                                  schedule.pipelineName\n                                }/playground/setup?${qs.stringify({\n                                  mode: schedule.mode,\n                                  config: runRequest.runConfigYaml,\n                                  solidSelection: schedule.solidSelection,\n                                })}`,\n                              )}\n                            />\n                          </Menu>\n                        }\n                        position=\"bottom\"\n                      >\n                        <Button icon={<Icon name=\"expand_more\" />} />\n                      </Popover>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </RunRequestBody>\n      </DialogBody>\n    );\n  }\n\n  return (\n    <Dialog\n      onClose={() => close()}\n      style={{width: '50vw'}}\n      title={\n        <Box flex={{direction: 'row', gap: 4}}>\n          <TimestampDisplay timestamp={tickTimestamp} timezone={schedule.executionTimezone} />\n          {selectedRunRequest?.runKey ? <div>: {selectedRunRequest?.runKey}</div> : null}\n        </Box>\n      }\n      isOpen={isOpen}\n    >\n      {body}\n      <DialogFooter topBorder>\n        {selectedRunRequest ? (\n          <Button\n            autoFocus={false}\n            onClick={async () => {\n              copy(selectedRunRequest.runConfigYaml);\n              await showSharedToaster({\n                intent: 'success',\n                icon: 'copy_to_clipboard_done',\n                message: 'Copied!',\n              });\n            }}\n          >\n            Copy config\n          </Button>\n        ) : null}\n        <Button intent=\"primary\" autoFocus={true} onClick={() => close()}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst SCHEDULE_NEXT_FIVE_TICKS_FRAGMENT = gql`\n  fragment ScheduleNextFiveTicksFragment on Schedule {\n    id\n    name\n    executionTimezone\n    mode\n    solidSelection\n    pipelineName\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(limit: 5) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n\nexport const REPOSITORY_FOR_NEXT_TICKS_FRAGMENT = gql`\n  fragment RepositoryForNextTicksFragment on Repository {\n    name\n    id\n    location {\n      id\n      name\n    }\n    schedules {\n      id\n      ...ScheduleNextFiveTicksFragment\n    }\n  }\n\n  ${SCHEDULE_NEXT_FIVE_TICKS_FRAGMENT}\n`;\n\nconst SCHEDULE_TICK_CONFIG_QUERY = gql`\n  query ScheduleTickConfigQuery($scheduleSelector: ScheduleSelector!, $tickTimestamp: Int!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        futureTick(tickTimestamp: $tickTimestamp) {\n          evaluationResult {\n            ...ScheduleFutureTickEvaluationResult\n          }\n        }\n      }\n    }\n  }\n\n  fragment ScheduleFutureTickEvaluationResult on TickEvaluation {\n    runRequests {\n      ...ScheduleFutureTickRunRequest\n    }\n    skipReason\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment ScheduleFutureTickRunRequest on RunRequest {\n    runKey\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst RunRequestBody = styled.div`\n  font-size: 13px;\n`;\n\nconst SkipWrapper = styled.div`\n  background-color: #fdfcf2;\n  border: 1px solid ${Colors.Yellow500};\n  border-radius: 3px;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Page, Alert, ButtonLink, Colors, Group, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useMergedRefresh,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {\n  REPOSITORY_FOR_NEXT_TICKS_FRAGMENT,\n  SchedulesNextTicks,\n} from '../schedules/SchedulesNextTicks';\nimport {Loading} from '../ui/Loading';\n\nimport {useRunListTabs} from './RunListTabs';\nimport {\n  ScheduledRunsListQuery,\n  ScheduledRunsListQueryVariables,\n} from './types/ScheduledRunListRoot.types';\n\nexport const ScheduledRunListRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Runs | Scheduled');\n\n  const queryResult = useQuery<ScheduledRunsListQuery, ScheduledRunsListQueryVariables>(\n    SCHEDULED_RUNS_LIST_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {tabs, queryResult: runQueryResult} = useRunListTabs();\n  const countRefreshState = useQueryRefreshAtInterval(runQueryResult, FIFTEEN_SECONDS);\n  const combinedRefreshState = useMergedRefresh(countRefreshState, refreshState);\n\n  return (\n    <Page>\n      <Box\n        flex={{direction: 'row', gap: 8, alignItems: 'center', justifyContent: 'space-between'}}\n        padding={{vertical: 8, left: 24, right: 12}}\n      >\n        {tabs}\n        <QueryRefreshCountdown refreshState={combinedRefreshState} />\n      </Box>\n      <Loading queryResult={queryResult} allowStaleData>\n        {(result) => {\n          const {repositoriesOrError, instance} = result;\n          if (repositoriesOrError.__typename === 'PythonError') {\n            const message = repositoriesOrError.message;\n            return (\n              <Alert\n                intent=\"warning\"\n                title={\n                  <Group direction=\"row\" spacing={4}>\n                    <div>Could not load scheduled ticks.</div>\n                    <ButtonLink\n                      color={Colors.Link}\n                      underline=\"always\"\n                      onClick={() => {\n                        showCustomAlert({\n                          title: 'Python error',\n                          body: message,\n                        });\n                      }}\n                    >\n                      View error\n                    </ButtonLink>\n                  </Group>\n                }\n              />\n            );\n          }\n          return (\n            <>\n              <SchedulerInfo\n                daemonHealth={instance.daemonHealth}\n                padding={{vertical: 16, horizontal: 24}}\n              />\n              <SchedulesNextTicks repos={repositoriesOrError.nodes} />\n            </>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default ScheduledRunListRoot;\n\nconst SCHEDULED_RUNS_LIST_QUERY = gql`\n  query ScheduledRunsListQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n    repositoriesOrError {\n      ... on RepositoryConnection {\n        nodes {\n          id\n          ... on Repository {\n            id\n            ...RepositoryForNextTicksFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n  ${REPOSITORY_FOR_NEXT_TICKS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Alert, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SchedulerInfo: React.FC<Props> = ({daemonHealth, ...boxProps}) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const schedulerHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SCHEDULER',\n    );\n    if (schedulerHealths.length > 0) {\n      const schedulerHealth = schedulerHealths[0]!;\n      healthy = schedulerHealth.required && schedulerHealth.healthy;\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The scheduler daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a href=\"https://docs.dagster.io/deployment/dagster-daemon\">\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {Colors, Icon, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {TimeContext} from '../app/time/TimeContext';\nimport {DEFAULT_TIME_FORMAT, TimeFormat} from '../app/time/TimestampFormat';\nimport {timestampToString} from '../app/time/timestampToString';\n\ninterface Props {\n  timestamp: number;\n  timezone?: string | null;\n  timeFormat?: TimeFormat;\n  tooltipTimeFormat?: TimeFormat;\n}\n\nexport const TimestampDisplay = (props: Props) => {\n  const {timestamp, timezone, timeFormat, tooltipTimeFormat} = props;\n  const {\n    timezone: [userTimezone],\n    hourCycle: [hourCycle],\n  } = React.useContext(TimeContext);\n\n  const locale = navigator.language;\n  const mainString = timestampToString({\n    timestamp: {unix: timestamp},\n    locale,\n    timezone: timezone || userTimezone,\n    timeFormat,\n    hourCycle,\n  });\n\n  return (\n    <span>\n      <TabularNums style={{minWidth: 0}} title={mainString}>\n        {mainString}\n      </TabularNums>\n      {timezone && timezone !== userTimezone ? (\n        <TimestampTooltip\n          placement=\"top\"\n          content={\n            <TabularNums>\n              {timestampToString({\n                timestamp: {unix: timestamp},\n                locale,\n                timezone: userTimezone,\n                timeFormat: tooltipTimeFormat,\n              })}\n            </TabularNums>\n          }\n        >\n          <Icon name=\"schedule\" color={Colors.Gray400} size={12} />\n        </TimestampTooltip>\n      ) : null}\n    </span>\n  );\n};\n\nTimestampDisplay.defaultProps = {\n  timeFormat: DEFAULT_TIME_FORMAT,\n  tooltipTimeFormat: {showSeconds: false, showTimezone: true},\n};\n\nconst TabularNums = styled.span`\n  font-variant-numeric: tabular-nums;\n`;\n\nconst TimestampTooltip = styled(Tooltip)`\n  cursor: pointer;\n  position: relative;\n  top: 2px;\n  margin-left: 4px;\n`;\n","import {ApolloError, QueryResult} from '@apollo/client';\nimport {Box, NonIdealState, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {ERROR_CODES_TO_SURFACE, errorCodeToMessage} from '../app/HTTPErrorCodes';\n\ninterface ILoadingProps<TData> {\n  queryResult: QueryResult<TData, any>;\n  children: (data: TData) => React.ReactNode;\n  renderError?: (error: ApolloError) => React.ReactNode;\n  allowStaleData?: boolean;\n  purpose: 'section' | 'page';\n}\n\nconst BLANK_LOADING_DELAY_MSEC = 500;\n\nexport const Loading = <TData extends Record<string, any>>(props: ILoadingProps<TData>) => {\n  const {children, purpose, allowStaleData = false, renderError} = props;\n  const {error, data, loading} = props.queryResult;\n\n  const [blankLoading, setBlankLoading] = React.useState(true);\n  const isLoading = !data || (loading && !allowStaleData) || Object.keys(data as any).length === 0;\n\n  React.useEffect(() => {\n    let timer: ReturnType<typeof setTimeout> | undefined;\n\n    // Wait a brief moment so that we don't awkwardly flash the loading bar.\n    // This is often enough time for data to become available.\n    if (isLoading) {\n      timer = setTimeout(() => setBlankLoading(false), BLANK_LOADING_DELAY_MSEC);\n    } else {\n      setBlankLoading(true);\n    }\n\n    return () => {\n      timer && clearTimeout(timer);\n    };\n  }, [isLoading]);\n\n  // either error.networkError or error.graphQLErrors is set,\n  // so check that the error is not just a transient network error\n  if (error) {\n    if (renderError) {\n      return <>{renderError(error)}</>;\n    }\n\n    const {networkError} = error;\n    if (!networkError) {\n      return (\n        <Box padding={64} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"error\" title=\"GraphQL Error - see console for details\" />\n        </Box>\n      );\n    }\n\n    if ('statusCode' in networkError && ERROR_CODES_TO_SURFACE.has(networkError.statusCode)) {\n      const statusCode = networkError.statusCode;\n      return (\n        <Box padding={64} flex={{justifyContent: 'center'}}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"Network error\"\n            description={errorCodeToMessage(statusCode)}\n          />\n        </Box>\n      );\n    }\n  }\n\n  if (isLoading) {\n    return blankLoading ? null : <LoadingSpinner purpose={purpose} />;\n  }\n\n  return <>{children(data as TData)}</>;\n};\n\nexport const LoadingSpinner: React.FC<{purpose: 'page' | 'section'}> = ({purpose}) => {\n  const isPage = purpose === 'page';\n  return (\n    <Box\n      padding={64}\n      flex={{\n        grow: isPage ? 1 : undefined,\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n      style={isPage ? {height: '100%'} : undefined}\n    >\n      <Spinner purpose={purpose} />\n    </Box>\n  );\n};\n\nLoading.defaultProps = {\n  purpose: 'page',\n};\n","// eslint-disable-next-line no-restricted-imports\nimport {\n  Box,\n  Colors,\n  CommonMenuItemProps,\n  IconWrapper,\n  iconWithColor,\n  MenuItem,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ninterface MenuLinkProps\n  extends CommonMenuItemProps,\n    Omit<React.ComponentProps<typeof MenuItem>, 'icon' | 'onClick' | 'onFocus' | 'target'>,\n    LinkProps {}\n\n/**\n * If you want to use a menu item as a link, use `MenuLink` and provide a `to` prop.\n */\nexport const MenuLink: React.FC<MenuLinkProps> = (props) => {\n  const {icon, intent, text, disabled, ...rest} = props;\n\n  if (disabled) {\n    return <MenuItem disabled icon={icon} intent={intent} text={text} />;\n  }\n  return (\n    <StyledMenuLink {...rest}>\n      <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n        {iconWithColor(icon, intent)}\n        <div>{text}</div>\n      </Box>\n    </StyledMenuLink>\n  );\n};\n\nconst StyledMenuLink = styled(Link)`\n  text-decoration: none;\n\n  border-radius: 4px;\n  display: block;\n  line-height: 20px;\n  padding: 6px 8px 6px 12px;\n  transition: background-color 50ms, box-shadow 150ms;\n  align-items: flex-start;\n  user-select: none;\n\n  /**\n   * Use margin instead of align-items: center because the contents of the menu item may wrap \n   * in unusual circumstances.\n   */\n  ${IconWrapper} {\n    margin-top: 2px;\n  }\n\n  ${IconWrapper}:first-child {\n    margin-left: -4px;\n  }\n\n  &&&:link,\n  &&&:visited,\n  &&&:hover,\n  &&&:active {\n    color: ${Colors.Gray900};\n    text-decoration: none;\n  }\n\n  &&&:hover {\n    background: ${Colors.Gray100};\n  }\n`;\n","import * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Box} from './Box';\nimport {Colors} from './Colors';\nimport {Group} from './Group';\nimport {IconName, Icon} from './Icon';\n\nexport type AlertIntent = 'info' | 'warning' | 'error' | 'success';\n\ninterface Props {\n  intent: AlertIntent;\n  title: React.ReactNode;\n  description?: React.ReactNode;\n  icon?: React.ReactNode;\n  onClose?: () => void;\n}\n\nexport const Alert: React.FC<Props> = (props) => {\n  const {intent, title, description, onClose} = props;\n\n  const {backgroundColor, borderColor, icon, iconColor, textColor} = React.useMemo(() => {\n    switch (intent) {\n      case 'warning':\n        return {\n          backgroundColor: Colors.Yellow50,\n          borderColor: Colors.Yellow500,\n          icon: 'warning',\n          iconColor: Colors.Yellow500,\n          textColor: Colors.Yellow700,\n        };\n      case 'error':\n        return {\n          backgroundColor: Colors.Red50,\n          borderColor: Colors.Red500,\n          icon: 'error',\n          iconColor: Colors.Red500,\n          textColor: Colors.Red700,\n        };\n      case 'success':\n        return {\n          backgroundColor: Colors.Green50,\n          borderColor: Colors.Green500,\n          icon: 'done',\n          iconColor: Colors.Green500,\n          textColor: Colors.Green700,\n        };\n      case 'info':\n      default:\n        return {\n          backgroundColor: Colors.Blue50,\n          borderColor: Colors.Blue500,\n          icon: 'info',\n          iconColor: Colors.Blue500,\n          textColor: Colors.Blue700,\n        };\n    }\n  }, [intent]);\n\n  return (\n    <AlertContainer\n      background={backgroundColor}\n      $borderColor={borderColor}\n      $textColor={textColor}\n      padding={{horizontal: 16, vertical: 12}}\n    >\n      <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n        <Group direction=\"row\" spacing={12} alignItems=\"flex-start\">\n          {props.icon || <Icon name={icon as IconName} color={iconColor} />}\n          <Group direction=\"column\" spacing={8}>\n            <AlertTitle>{title}</AlertTitle>\n            {description ? <AlertDescription>{description}</AlertDescription> : null}\n          </Group>\n        </Group>\n        {!!onClose ? (\n          <ButtonWrapper onClick={onClose}>\n            <Icon name=\"close\" color={textColor} />\n          </ButtonWrapper>\n        ) : null}\n      </Box>\n    </AlertContainer>\n  );\n};\n\nAlert.defaultProps = {\n  intent: 'info',\n};\n\nconst ButtonWrapper = styled.button`\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  flex-direction: column;\n  height: fit-content;\n`;\n\nconst AlertContainer = styled(Box)<{$borderColor: string; $textColor: string}>`\n  box-shadow: inset 4px 0 ${({$borderColor}) => $borderColor};\n  color: ${({$textColor}) => $textColor};\n\n  a:link,\n  a:visited,\n  a:hover,\n  a:active {\n    color: ${({$textColor}) => $textColor};\n    text-decoration: underline;\n  }\n`;\n\nconst AlertTitle = styled.div`\n  font-weight: 600;\n`;\n\nconst AlertDescription = styled.div`\n  font-weight: 400;\n`;\n","import styled from 'styled-components/macro';\n\nexport const Page = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  padding-bottom: 64px;\n  width: 100%;\n`;\n"],"names":["useRunListTabs","filter","arguments","length","undefined","queryResult","useQuery","RUN_TABS_COUNT_QUERY","variables","queuedFilter","_objectSpread","statuses","Array","from","queuedStatuses","inProgressFilter","inProgressStatuses","countData","data","_React$useMemo","React","_countData$queuedCoun","_countData$inProgress","queuedCount","__typename","count","inProgressCount","_useQueryPersistedRun","useQueryPersistedRunFilters","filterTokens","_slicedToArray","selectedTab","useSelectedRunsTab","useDocumentTitle","selected","getDocumentTitle","urlForStatus","tokensMinusStatus","token","statusTokens","map","status","value","runsPathWithFilters","concat","_toConsumableArray","tabs","_jsxs","JoinedButtons","children","_jsx","ActivatableButton","to","id","$active","failedStatuses","title","styled","AnchorButton","withConfig","displayName","componentId","props","Colors","pathname","useLocation","Set","isEqual","gql","_templateObject","_taggedTemplateLiteral","SchedulesNextTicks","_ref","repos","nextTicks","anyPipelines","anySchedules","options","useRepositoryOptions","forEach","repo","schedules","repoAddress","name","location","futureTickSchedules","schedule","futureTicks","results","scheduleState","InstigationStatus","minMaxTimestamp","Math","min","apply","timestamp","tick","push","some","mode","sort","a","b","Table","style","width","_ref2","findRepositoryAmongOptions","TimestampDisplay","timezone","executionTimezone","timeFormat","showSeconds","showTimezone","Link","workspacePathFromAddress","PipelineReference","pipelineName","pipelineHrefContext","isJob","isThisThingAJob","NextTickMenu","tickTimestamp","Box","padding","vertical","NonIdealState","icon","description","_Fragment","action","ExternalAnchorButton","Icon","href","_ref3","_data$scheduleOrError","scheduleSelector","repoAddressToSelector","scheduleName","_React$useState","_React$useState2","isOpen","setOpen","_useLazyQuery","useLazyQuery","SCHEDULE_TICK_CONFIG_QUERY","_useLazyQuery2","loadTickConfig","_useLazyQuery2$","called","loading","infoReady","evaluationResult","scheduleOrError","futureTick","menuItems","NextTickMenuItems","onItemOpen","Spinner","purpose","Popover","content","Menu","position","onOpening","Button","NextTickDialog","_ref4","MenuItem","text","skipReason","onClick","error","runRequests","runRequest","runConfigYaml","MenuLink","target","qs","config","solidSelection","_ref5","_React$useState3","_React$useState4","selectedRunRequest","setSelectedRunRequest","copy","useCopyToClipboard","useRepository","body","close","flex","direction","gap","top","horizontal","Subheading","tags","RunTags","border","side","color","left","bottom","StyledReadOnlyCodeMirror","lineNumbers","DialogBody","PythonErrorInfo","SkipWrapper","RunRequestBody","idx","runKey","ButtonLink","underline","Group","spacing","alignItems","Dialog","onClose","DialogFooter","topBorder","autoFocus","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","showSharedToaster","intent","message","stop","SCHEDULE_NEXT_FIVE_TICKS_FRAGMENT","REPOSITORY_FOR_NEXT_TICKS_FRAGMENT","_templateObject2","_templateObject3","PYTHON_ERROR_FRAGMENT","ScheduledRunListRoot","useTrackPageView","SCHEDULED_RUNS_LIST_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","_useRunListTabs","runQueryResult","countRefreshState","combinedRefreshState","useMergedRefresh","Page","justifyContent","right","QueryRefreshCountdown","Loading","allowStaleData","result","repositoriesOrError","instance","Alert","showCustomAlert","SchedulerInfo","daemonHealth","nodes","INSTANCE_HEALTH_FRAGMENT","boxProps","_objectWithoutProperties","_excluded","healthy","schedulerHealths","allDaemonStatuses","daemon","daemonType","schedulerHealth","required","tooltipTimeFormat","_React$useContext","TimeContext","userTimezone","hourCycle","locale","navigator","language","mainString","timestampToString","unix","TabularNums","minWidth","TimestampTooltip","placement","size","defaultProps","DEFAULT_TIME_FORMAT","Tooltip","_props$allowStaleData","renderError","_props$queryResult","blankLoading","setBlankLoading","isLoading","Object","keys","timer","setTimeout","clearTimeout","networkError","ERROR_CODES_TO_SURFACE","statusCode","errorCodeToMessage","LoadingSpinner","isPage","grow","height","disabled","rest","StyledMenuLink","iconWithColor","IconWrapper","backgroundColor","borderColor","iconColor","textColor","AlertContainer","background","$borderColor","$textColor","AlertTitle","AlertDescription","ButtonWrapper"],"sourceRoot":""}
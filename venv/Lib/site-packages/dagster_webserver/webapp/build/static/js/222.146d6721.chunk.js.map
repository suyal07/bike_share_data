{"version":3,"file":"static/js/222.146d6721.chunk.js","mappings":"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","sources":["../../core/src/ui/Loading.tsx","../../core/src/workspace/GuessJobLocationRoot.tsx","../../ui/src/components/Alert.tsx","../../ui/src/components/NonIdealState.tsx","../../ui/src/components/Page.tsx","../../ui/src/components/PageHeader.tsx"],"sourcesContent":["import {ApolloError, QueryResult} from '@apollo/client';\nimport {Box, NonIdealState, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {ERROR_CODES_TO_SURFACE, errorCodeToMessage} from '../app/HTTPErrorCodes';\n\ninterface ILoadingProps<TData> {\n  queryResult: QueryResult<TData, any>;\n  children: (data: TData) => React.ReactNode;\n  renderError?: (error: ApolloError) => React.ReactNode;\n  allowStaleData?: boolean;\n  purpose: 'section' | 'page';\n}\n\nconst BLANK_LOADING_DELAY_MSEC = 500;\n\nexport const Loading = <TData extends Record<string, any>>(props: ILoadingProps<TData>) => {\n  const {children, purpose, allowStaleData = false, renderError} = props;\n  const {error, data, loading} = props.queryResult;\n\n  const [blankLoading, setBlankLoading] = React.useState(true);\n  const isLoading = !data || (loading && !allowStaleData) || Object.keys(data as any).length === 0;\n\n  React.useEffect(() => {\n    let timer: ReturnType<typeof setTimeout> | undefined;\n\n    // Wait a brief moment so that we don't awkwardly flash the loading bar.\n    // This is often enough time for data to become available.\n    if (isLoading) {\n      timer = setTimeout(() => setBlankLoading(false), BLANK_LOADING_DELAY_MSEC);\n    } else {\n      setBlankLoading(true);\n    }\n\n    return () => {\n      timer && clearTimeout(timer);\n    };\n  }, [isLoading]);\n\n  // either error.networkError or error.graphQLErrors is set,\n  // so check that the error is not just a transient network error\n  if (error) {\n    if (renderError) {\n      return <>{renderError(error)}</>;\n    }\n\n    const {networkError} = error;\n    if (!networkError) {\n      return (\n        <Box padding={64} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"error\" title=\"GraphQL Error - see console for details\" />\n        </Box>\n      );\n    }\n\n    if ('statusCode' in networkError && ERROR_CODES_TO_SURFACE.has(networkError.statusCode)) {\n      const statusCode = networkError.statusCode;\n      return (\n        <Box padding={64} flex={{justifyContent: 'center'}}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"Network error\"\n            description={errorCodeToMessage(statusCode)}\n          />\n        </Box>\n      );\n    }\n  }\n\n  if (isLoading) {\n    return blankLoading ? null : <LoadingSpinner purpose={purpose} />;\n  }\n\n  return <>{children(data as TData)}</>;\n};\n\nexport const LoadingSpinner: React.FC<{purpose: 'page' | 'section'}> = ({purpose}) => {\n  const isPage = purpose === 'page';\n  return (\n    <Box\n      padding={64}\n      flex={{\n        grow: isPage ? 1 : undefined,\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n      style={isPage ? {height: '100%'} : undefined}\n    >\n      <Spinner purpose={purpose} />\n    </Box>\n  );\n};\n\nLoading.defaultProps = {\n  purpose: 'page',\n};\n","import {Alert, Box, NonIdealState, Page, PageHeader, Table, Heading} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, Redirect, useLocation, useParams, useRouteMatch} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {LoadingSpinner} from '../ui/Loading';\n\nimport {isThisThingAJob, optionToRepoAddress, useRepositoryOptions} from './WorkspaceContext';\nimport {buildRepoPathForHuman} from './buildRepoAddress';\nimport {findRepoContainingPipeline} from './findRepoContainingPipeline';\nimport {workspacePath, workspacePathFromAddress} from './workspacePath';\n\nexport const GuessJobLocationRoot = () => {\n  useTrackPageView();\n\n  const params = useParams<{jobPath: string}>();\n  const {jobPath} = params;\n\n  const entireMatch = useRouteMatch('/guess/(/?.*)');\n  const location = useLocation();\n\n  const toAppend = (entireMatch!.params as any)[0];\n  const {search} = location;\n\n  const {pipelineName} = explorerPathFromString(jobPath);\n  const {loading, options} = useRepositoryOptions();\n\n  if (loading) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n\n  const reposWithMatch = findRepoContainingPipeline(options, pipelineName);\n  if (reposWithMatch.length === 0) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"no-results\"\n          title=\"No matching jobs\"\n          description={\n            <div>\n              <div>\n                <strong>{pipelineName}</strong>\n              </div>\n              was not found in any of your definitions.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  if (reposWithMatch.length === 1) {\n    const match = reposWithMatch[0]!;\n    const repoAddress = optionToRepoAddress(match);\n    const isJob = isThisThingAJob(match, pipelineName);\n    const to = workspacePathFromAddress(\n      repoAddress,\n      `/${isJob ? 'jobs' : 'pipelines'}/${toAppend}${search}`,\n    );\n    return <Redirect to={to} />;\n  }\n\n  const anyPipelines = reposWithMatch.some((repo) => !isThisThingAJob(repo, pipelineName));\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pipelineName}</Heading>}\n        icon=\"job\"\n        description={\n          anyPipelines\n            ? 'Job / pipeline in multiple code locations'\n            : 'Job in multiple code locations'\n        }\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Alert\n          intent=\"info\"\n          title={\n            <div>\n              {anyPipelines ? (\n                <>\n                  Jobs or pipelines named <strong>{pipelineName}</strong> were found in multiple\n                  code locations.\n                </>\n              ) : (\n                <>\n                  Jobs named <strong>{pipelineName}</strong> were found in multiple code locations.\n                </>\n              )}\n            </div>\n          }\n        />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th>Code location</th>\n            <th>{anyPipelines ? 'Job / Pipeline' : 'Job'}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {reposWithMatch.map((repository) => {\n            const {\n              repository: {name},\n              repositoryLocation: {name: location},\n            } = repository;\n            const repoString = buildRepoPathForHuman(name, location);\n            return (\n              <tr key={repoString}>\n                <td style={{width: '40%'}}>{repoString}</td>\n                <td>\n                  <Link\n                    to={workspacePath(\n                      name,\n                      location,\n                      `/${\n                        isThisThingAJob(repository, pipelineName) ? 'jobs' : 'pipelines'\n                      }/${pipelineName}`,\n                    )}\n                  >\n                    {pipelineName}\n                  </Link>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default GuessJobLocationRoot;\n","import * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Box} from './Box';\nimport {Colors} from './Colors';\nimport {Group} from './Group';\nimport {IconName, Icon} from './Icon';\n\nexport type AlertIntent = 'info' | 'warning' | 'error' | 'success';\n\ninterface Props {\n  intent: AlertIntent;\n  title: React.ReactNode;\n  description?: React.ReactNode;\n  icon?: React.ReactNode;\n  onClose?: () => void;\n}\n\nexport const Alert: React.FC<Props> = (props) => {\n  const {intent, title, description, onClose} = props;\n\n  const {backgroundColor, borderColor, icon, iconColor, textColor} = React.useMemo(() => {\n    switch (intent) {\n      case 'warning':\n        return {\n          backgroundColor: Colors.Yellow50,\n          borderColor: Colors.Yellow500,\n          icon: 'warning',\n          iconColor: Colors.Yellow500,\n          textColor: Colors.Yellow700,\n        };\n      case 'error':\n        return {\n          backgroundColor: Colors.Red50,\n          borderColor: Colors.Red500,\n          icon: 'error',\n          iconColor: Colors.Red500,\n          textColor: Colors.Red700,\n        };\n      case 'success':\n        return {\n          backgroundColor: Colors.Green50,\n          borderColor: Colors.Green500,\n          icon: 'done',\n          iconColor: Colors.Green500,\n          textColor: Colors.Green700,\n        };\n      case 'info':\n      default:\n        return {\n          backgroundColor: Colors.Blue50,\n          borderColor: Colors.Blue500,\n          icon: 'info',\n          iconColor: Colors.Blue500,\n          textColor: Colors.Blue700,\n        };\n    }\n  }, [intent]);\n\n  return (\n    <AlertContainer\n      background={backgroundColor}\n      $borderColor={borderColor}\n      $textColor={textColor}\n      padding={{horizontal: 16, vertical: 12}}\n    >\n      <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n        <Group direction=\"row\" spacing={12} alignItems=\"flex-start\">\n          {props.icon || <Icon name={icon as IconName} color={iconColor} />}\n          <Group direction=\"column\" spacing={8}>\n            <AlertTitle>{title}</AlertTitle>\n            {description ? <AlertDescription>{description}</AlertDescription> : null}\n          </Group>\n        </Group>\n        {!!onClose ? (\n          <ButtonWrapper onClick={onClose}>\n            <Icon name=\"close\" color={textColor} />\n          </ButtonWrapper>\n        ) : null}\n      </Box>\n    </AlertContainer>\n  );\n};\n\nAlert.defaultProps = {\n  intent: 'info',\n};\n\nconst ButtonWrapper = styled.button`\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  flex-direction: column;\n  height: fit-content;\n`;\n\nconst AlertContainer = styled(Box)<{$borderColor: string; $textColor: string}>`\n  box-shadow: inset 4px 0 ${({$borderColor}) => $borderColor};\n  color: ${({$textColor}) => $textColor};\n\n  a:link,\n  a:visited,\n  a:hover,\n  a:active {\n    color: ${({$textColor}) => $textColor};\n    text-decoration: underline;\n  }\n`;\n\nconst AlertTitle = styled.div`\n  font-weight: 600;\n`;\n\nconst AlertDescription = styled.div`\n  font-weight: 400;\n`;\n","import * as React from 'react';\n\nimport {Box} from './Box';\nimport {Colors} from './Colors';\nimport {IconName, Icon} from './Icon';\nimport {Spinner} from './Spinner';\nimport {Subheading} from './Text';\n\nexport type NonIdealStateProps = React.DetailedHTMLProps<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n> & {\n  icon?: 'error' | 'no-results' | 'spinner' | IconName;\n  title: string;\n  description?: React.ReactNode;\n  action?: React.ReactNode;\n  shrinkable?: boolean;\n};\n\nexport const NonIdealState: React.FC<NonIdealStateProps> = ({\n  title,\n  description,\n  icon,\n  action,\n  shrinkable,\n}) => {\n  const singleContentElement = [title, description, action].filter(Boolean).length === 1;\n\n  return (\n    <Box\n      flex={{gap: 20, alignItems: singleContentElement ? 'center' : 'flex-start'}}\n      background={Colors.Gray50}\n      padding={24}\n      style={{\n        margin: 'auto',\n        borderRadius: 8,\n        width: shrinkable ? 'initial' : 'max-content',\n        maxWidth: 500,\n      }}\n    >\n      {icon === 'spinner' ? (\n        <Spinner purpose=\"section\" />\n      ) : icon === 'no-results' ? (\n        <Icon name=\"search\" size={48} color={Colors.Gray400} />\n      ) : icon ? (\n        <Icon name={icon} size={48} color={Colors.Gray400} />\n      ) : null}\n      <Box\n        flex={{\n          gap: 8,\n          direction: 'column',\n          alignItems: 'flex-start',\n          shrink: 1,\n          grow: 1,\n        }}\n      >\n        {title && <Subheading style={{color: Colors.Gray900}}>{title}</Subheading>}\n        {description && <div style={{color: Colors.Gray500}}>{description}</div>}\n        {action}\n      </Box>\n    </Box>\n  );\n};\n","import styled from 'styled-components/macro';\n\nexport const Page = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  padding-bottom: 64px;\n  width: 100%;\n`;\n","import * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Box} from './Box';\nimport {Colors} from './Colors';\nimport {IconName} from './Icon';\n\ninterface Props {\n  title: React.ReactNode;\n  tags?: React.ReactNode;\n  icon?: IconName;\n  description?: React.ReactNode;\n  metadata?: React.ReactNode;\n  right?: React.ReactNode;\n  tabs?: React.ReactNode;\n}\n\nexport const PageHeader = (props: Props) => {\n  const {title, tags, right, tabs} = props;\n  return (\n    <PageHeaderContainer\n      background={Colors.Gray50}\n      padding={{top: 16, left: 24, right: 12}}\n      border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n    >\n      <Box flex={{direction: 'row', justifyContent: 'space-between'}} padding={{bottom: 16}}>\n        <Box flex={{direction: 'row', alignItems: 'flex-start', gap: 12, wrap: 'wrap'}}>\n          {title}\n          {tags}\n        </Box>\n        {right}\n      </Box>\n      {tabs}\n    </PageHeaderContainer>\n  );\n};\n\nconst PageHeaderContainer = styled(Box)`\n  width: 100%;\n\n  /**\n   * Blueprint breadcrumbs annoyingly have a built-in height.\n   */\n  .bp4-breadcrumbs {\n    height: auto;\n  }\n`;\n"],"names":["Loading","props","children","purpose","_props$allowStaleData","allowStaleData","renderError","_props$queryResult","queryResult","error","data","loading","_React$useState","React","_React$useState2","_slicedToArray","blankLoading","setBlankLoading","isLoading","Object","keys","length","timer","setTimeout","clearTimeout","_jsx","_Fragment","networkError","Box","padding","flex","justifyContent","NonIdealState","icon","title","ERROR_CODES_TO_SURFACE","statusCode","description","errorCodeToMessage","LoadingSpinner","_ref","isPage","grow","undefined","alignItems","style","height","Spinner","defaultProps","GuessJobLocationRoot","useTrackPageView","jobPath","useParams","entireMatch","useRouteMatch","location","useLocation","toAppend","params","search","pipelineName","explorerPathFromString","_useRepositoryOptions","useRepositoryOptions","options","reposWithMatch","findRepoContainingPipeline","vertical","_jsxs","match","repoAddress","optionToRepoAddress","isJob","isThisThingAJob","to","workspacePathFromAddress","concat","Redirect","anyPipelines","some","repo","Page","PageHeader","Heading","horizontal","Alert","intent","Table","map","repository","name","repositoryLocation","repoString","buildRepoPathForHuman","width","Link","workspacePath","onClose","_React$useMemo","backgroundColor","Colors","borderColor","iconColor","textColor","AlertContainer","background","$borderColor","$textColor","direction","Group","spacing","Icon","color","AlertTitle","AlertDescription","ButtonWrapper","onClick","styled","displayName","componentId","withConfig","_ref2","_ref3","action","shrinkable","singleContentElement","filter","Boolean","gap","margin","borderRadius","maxWidth","size","shrink","Subheading","tags","right","tabs","PageHeaderContainer","top","left","border","side","bottom","wrap"],"sourceRoot":""}
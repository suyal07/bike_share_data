{"version":3,"file":"static/js/545.8e4d82d8.chunk.js","mappings":"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","sources":["../../core/src/asset-graph/layout.ts","../../../node_modules/lodash/_arrayAggregator.js","../../../node_modules/lodash/_baseAggregator.js","../../../node_modules/lodash/_createAggregator.js","../../../node_modules/lodash/groupBy.js","../../../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import * as dagre from 'dagre';\nimport groupBy from 'lodash/groupBy';\n\nimport {IBounds, IPoint} from '../graph/common';\n\nimport {GraphData, GraphNode, GraphId} from './Utils';\n\nexport interface AssetLayout {\n  id: GraphId;\n  bounds: IBounds; // Overall frame of the box relative to 0,0 on the graph\n}\n\nexport interface GroupLayout {\n  id: GraphId;\n  groupName: string;\n  repositoryName: string;\n  repositoryLocationName: string;\n  repositoryDisambiguationRequired: boolean;\n  bounds: IBounds; // Overall frame of the box relative to 0,0 on the graph\n}\nexport type AssetLayoutEdge = {\n  from: IPoint;\n  fromId: string;\n  to: IPoint;\n  toId: string;\n};\n\nexport type AssetGraphLayout = {\n  width: number;\n  height: number;\n  edges: AssetLayoutEdge[];\n  nodes: {[id: string]: AssetLayout};\n  groups: {[name: string]: GroupLayout};\n};\n\n// Prefix group nodes in the Dagre layout so that an asset and an asset\n// group cannot have the same name.\nconst GROUP_NODE_PREFIX = 'group__';\n\nconst MARGIN = 100;\n\nexport type LayoutAssetGraphOptions = {horizontalDAGs: boolean};\n\nexport const layoutAssetGraph = (\n  graphData: GraphData,\n  opts: LayoutAssetGraphOptions,\n): AssetGraphLayout => {\n  const g = new dagre.graphlib.Graph({compound: true});\n\n  g.setGraph(\n    opts.horizontalDAGs\n      ? {\n          rankdir: 'LR',\n          marginx: MARGIN,\n          marginy: MARGIN,\n          nodesep: -10,\n          edgesep: 10,\n          ranksep: 30,\n        }\n      : {\n          rankdir: 'TB',\n          marginx: MARGIN,\n          marginy: MARGIN,\n          nodesep: 40,\n          edgesep: 10,\n          ranksep: 10,\n        },\n  );\n  g.setDefaultEdgeLabel(() => ({}));\n\n  const parentNodeIdForNode = (node: GraphNode) =>\n    [\n      GROUP_NODE_PREFIX,\n      node.definition.repository.location.name,\n      node.definition.repository.name,\n      node.definition.groupName,\n    ].join('__');\n\n  // const shouldRender = (node?: GraphNode) => node && node.definition.opNames.length > 0;\n  const shouldRender = (node?: GraphNode) => node;\n  const renderedNodes = Object.values(graphData.nodes).filter(shouldRender);\n\n  const groups: {[id: string]: GroupLayout} = {};\n  for (const node of renderedNodes) {\n    if (node.definition.groupName) {\n      const id = parentNodeIdForNode(node);\n      groups[id] = {\n        id,\n        groupName: node.definition.groupName,\n        repositoryName: node.definition.repository.name,\n        repositoryLocationName: node.definition.repository.location.name,\n        repositoryDisambiguationRequired: false,\n        bounds: {x: 0, y: 0, width: 0, height: 0},\n      };\n    }\n  }\n\n  // Add all the group boxes to the graph\n  const showGroups = Object.keys(groups).length > 1;\n  if (showGroups) {\n    Object.keys(groups).forEach((groupId) => g.setNode(groupId, {}));\n  }\n\n  // Add all the nodes to the graph\n  renderedNodes.forEach((node) => {\n    g.setNode(node.id, getAssetNodeDimensions(node.definition));\n    if (showGroups && node.definition.groupName) {\n      g.setParent(node.id, parentNodeIdForNode(node));\n    }\n  });\n\n  const linksToAssetsOutsideGraphedSet: {[id: string]: true} = {};\n\n  // Add the edges to the graph, and accumulate a set of \"foreign nodes\" (for which\n  // we have an inbound/outbound edge, but we don't have the `node` in the graphData).\n  Object.entries(graphData.downstream).forEach(([upstreamId, graphDataDownstream]) => {\n    const downstreamIds = Object.keys(graphDataDownstream);\n    downstreamIds.forEach((downstreamId) => {\n      if (\n        !shouldRender(graphData.nodes[downstreamId]) &&\n        !shouldRender(graphData.nodes[upstreamId])\n      ) {\n        return;\n      }\n\n      g.setEdge({v: upstreamId, w: downstreamId}, {weight: 1});\n\n      if (!shouldRender(graphData.nodes[downstreamId])) {\n        (linksToAssetsOutsideGraphedSet as any)[downstreamId] = true;\n      } else if (!shouldRender(graphData.nodes[upstreamId])) {\n        (linksToAssetsOutsideGraphedSet as any)[upstreamId] = true;\n      }\n    });\n  });\n\n  // Add all the link nodes to the graph\n  Object.keys(linksToAssetsOutsideGraphedSet).forEach((id) => {\n    const path = JSON.parse(id);\n    const label = path[path.length - 1] || '';\n    g.setNode(id, getAssetLinkDimensions(label, opts));\n  });\n\n  dagre.layout(g);\n\n  let maxWidth = 0;\n  let maxHeight = 0;\n\n  const nodes: {[id: string]: AssetLayout} = {};\n\n  g.nodes().forEach((id) => {\n    const dagreNode = g.node(id);\n    if (!dagreNode) {\n      return;\n    }\n    const bounds = {\n      x: dagreNode.x - dagreNode.width / 2,\n      y: dagreNode.y - dagreNode.height / 2,\n      width: dagreNode.width,\n      height: dagreNode.height,\n    };\n    if (!id.startsWith(GROUP_NODE_PREFIX)) {\n      nodes[id] = {id, bounds};\n    }\n\n    maxWidth = Math.max(maxWidth, dagreNode.x + dagreNode.width / 2);\n    maxHeight = Math.max(maxHeight, dagreNode.y + dagreNode.height / 2);\n  });\n\n  // Apply bounds to the groups based on the nodes inside them\n  if (showGroups) {\n    for (const node of renderedNodes) {\n      if (node.definition.groupName) {\n        const groupId = parentNodeIdForNode(node);\n        const groupForId = groups[groupId]!;\n        groupForId.bounds =\n          groupForId.bounds.width === 0\n            ? nodes[node.id]!.bounds\n            : extendBounds(groupForId.bounds, nodes[node.id]!.bounds);\n      }\n    }\n    for (const group of Object.values(groups)) {\n      group.bounds = padBounds(group.bounds, {x: 15, top: 70, bottom: -10});\n    }\n  }\n\n  // Annotate groups that require disambiguation (same group name appears twice)\n  Object.values(groupBy(Object.values(groups), (g) => g.groupName))\n    .filter((set) => set.length > 1)\n    .flat()\n    .forEach((group) => {\n      group.bounds.y -= 18;\n      group.bounds.height += 18;\n      group.repositoryDisambiguationRequired = true;\n    });\n\n  const edges: AssetLayoutEdge[] = [];\n\n  g.edges().forEach((e) => {\n    const v = g.node(e.v);\n    const vXInset = !!linksToAssetsOutsideGraphedSet[e.v] ? 16 : 24;\n    const w = g.node(e.w);\n    const wXInset = !!linksToAssetsOutsideGraphedSet[e.w] ? 16 : 24;\n\n    // Ignore the coordinates from dagre and use the top left + bottom left of the\n    edges.push(\n      opts.horizontalDAGs\n        ? {\n            from: {x: v.x + v.width / 2, y: v.y},\n            fromId: e.v,\n            to: {x: w.x - w.width / 2 - 5, y: w.y},\n            toId: e.w,\n          }\n        : {\n            from: {x: v.x - v.width / 2 + vXInset, y: v.y - 30 + v.height / 2},\n            fromId: e.v,\n            to: {x: w.x - w.width / 2 + wXInset, y: w.y + 20 - w.height / 2},\n            toId: e.w,\n          },\n    );\n  });\n\n  return {\n    nodes,\n    edges,\n    width: maxWidth + MARGIN,\n    height: maxHeight + MARGIN,\n    groups: showGroups ? groups : {},\n  };\n};\n\nexport const ASSET_LINK_NAME_MAX_LENGTH = 10;\n\nexport const getAssetLinkDimensions = (label: string, opts: LayoutAssetGraphOptions) => {\n  return opts.horizontalDAGs\n    ? {width: 32 + 8 * Math.min(ASSET_LINK_NAME_MAX_LENGTH, label.length), height: 90}\n    : {width: 106, height: 90};\n};\n\nexport const padBounds = (a: IBounds, padding: {x: number; top: number; bottom: number}) => {\n  return {\n    x: a.x - padding.x,\n    y: a.y - padding.top,\n    width: a.width + padding.x * 2,\n    height: a.height + padding.top + padding.bottom,\n  };\n};\n\nexport const extendBounds = (a: IBounds, b: IBounds) => {\n  const xmin = Math.min(a.x, b.x);\n  const ymin = Math.min(a.y, b.y);\n  const xmax = Math.max(a.x + a.width, b.x + b.width);\n  const ymax = Math.max(a.y + a.height, b.y + b.height);\n  return {x: xmin, y: ymin, width: xmax - xmin, height: ymax - ymin};\n};\n\nexport const ASSET_NODE_NAME_MAX_LENGTH = 28;\n\nexport const getAssetNodeDimensions = (def: {\n  assetKey: {path: string[]};\n  opNames: string[];\n  isSource: boolean;\n  isObservable: boolean;\n  isPartitioned: boolean;\n  graphName: string | null;\n  description?: string | null;\n  computeKind: string | null;\n}) => {\n  const width = 265;\n\n  if (def.isSource && !def.isObservable) {\n    return {width, height: 102};\n  } else {\n    let height = 100; // top tags area + name + description\n\n    if (def.isPartitioned) {\n      height += 40;\n    }\n    if (def.isSource) {\n      height += 30; // observed\n    } else {\n      height += 26; // status row\n    }\n\n    height += 30; // tag\n\n    return {width, height};\n  }\n};\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n","var baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nmodule.exports = groupBy;\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["GROUP_NODE_PREFIX","MARGIN","layoutAssetGraph","graphData","opts","g","dagre","compound","setGraph","horizontalDAGs","rankdir","marginx","marginy","nodesep","edgesep","ranksep","setDefaultEdgeLabel","_step","parentNodeIdForNode","node","definition","repository","location","name","groupName","join","shouldRender","renderedNodes","Object","values","nodes","filter","groups","_iterator","_createForOfIteratorHelper","s","n","done","value","id","repositoryName","repositoryLocationName","repositoryDisambiguationRequired","bounds","x","y","width","height","err","e","f","showGroups","keys","length","forEach","groupId","setNode","getAssetNodeDimensions","setParent","linksToAssetsOutsideGraphedSet","entries","downstream","_ref","_ref2","_slicedToArray","upstreamId","graphDataDownstream","downstreamId","setEdge","v","w","weight","path","JSON","parse","label","getAssetLinkDimensions","maxWidth","maxHeight","dagreNode","startsWith","Math","max","_step2","_iterator2","groupForId","extendBounds","_i","_Object$values","group","padBounds","top","bottom","groupBy","set","flat","edges","vXInset","wXInset","push","from","fromId","to","toId","ASSET_LINK_NAME_MAX_LENGTH","min","a","padding","b","xmin","ymin","ASSET_NODE_NAME_MAX_LENGTH","def","isSource","isObservable","isPartitioned","module","exports","array","setter","iteratee","accumulator","index","baseEach","require","collection","key","arrayAggregator","baseAggregator","baseIteratee","isArray","initializer","func","baseAssignValue","createAggregator","hasOwnProperty","prototype","result","call","o","allowArrayLike","it","Symbol","iterator","Array","i","F","_e","TypeError","normalCompletion","didErr","step","next","_e2"],"sourceRoot":""}
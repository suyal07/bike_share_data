{"version":3,"file":"static/js/619.95405f21.chunk.js","mappings":"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","sources":["../../core/src/instance/RepoFilterButton.tsx","../../core/src/overview/OverviewTabs.tsx","../../core/src/instance/InstanceBackfills.tsx","../../core/src/instance/backfill/BackfillPage.tsx","../../core/src/overview/OverviewAssetsRoot.tsx","../../core/src/instance/NextTick.tsx","../../core/src/runs/useRunsForTimeline.tsx","../../core/src/overview/OverviewTimelineRoot.tsx","../../core/src/runs/useHourWindow.tsx","../../core/src/overview/OverviewActivityRoot.tsx","../../core/src/overview/OverviewJobsTable.tsx","../../core/src/overview/sortRepoBuckets.tsx","../../core/src/overview/visibleRepoKeys.tsx","../../core/src/overview/OverviewJobsRoot.tsx","../../core/src/overview/OverviewResourcesTable.tsx","../../core/src/overview/OverviewResourcesRoot.tsx","../../core/src/instigation/Unloadable.tsx","../../core/src/ui/Filters/useCodeLocationFilter.tsx","../../core/src/overview/OverviewSchedulesTable.tsx","../../core/src/overview/OverviewSchedulesRoot.tsx","../../core/src/overview/OverviewSensorsTable.tsx","../../core/src/overview/OverviewSensorsRoot.tsx","../../core/src/overview/OverviewRoot.tsx","../../core/src/runs/RunListTabs.tsx"],"sourcesContent":["import {Box, Button, DialogFooter, DialogHeader, Dialog, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton: React.FC = () => {\n  const {allRepos, visibleRepos, toggleVisible} = React.useContext(WorkspaceContext);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        intent=\"none\"\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"activity\" title=\"Activity\" to=\"/overview/activity\" />\n        <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />\n        <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  CursorPaginationControls,\n  NonIdealState,\n  PageHeader,\n  Heading,\n  Page,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewTabs} from '../overview/OverviewTabs';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {Loading} from '../ui/Loading';\n\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from './BackfillTable';\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n  InstanceHealthForBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\n\nconst PAGE_SIZE = 10;\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<\n    InstanceHealthForBackfillsQuery,\n    InstanceHealthForBackfillsQueryVariables\n  >(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {},\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"backfills\" refreshState={refreshState} />}\n      />\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {({partitionBackfillsOrError}) => {\n          if (partitionBackfillsOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={partitionBackfillsOrError} />;\n          }\n\n          if (!partitionBackfillsOrError.results.length) {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"no-results\"\n                  title=\"No backfills found\"\n                  description={<p>This instance does not have any backfill jobs.</p>}\n                />\n              </Box>\n            );\n          }\n\n          const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n          const backfillHealths = daemonHealths\n            .filter((daemon) => daemon.daemonType === 'BACKFILL')\n            .map((daemon) => daemon.required && daemon.healthy);\n          const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n          return (\n            <div>\n              {isBackfillHealthy ? null : (\n                <Box padding={{horizontal: 24, vertical: 16}}>\n                  <DaemonNotRunningAlertBody />\n                </Box>\n              )}\n              <BackfillTable\n                backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n                refetch={queryResult.refetch}\n              />\n              {partitionBackfillsOrError.results.length > 0 ? (\n                <div style={{marginTop: '16px'}}>\n                  <CursorPaginationControls {...paginationProps} />\n                </div>\n              ) : null}\n            </div>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($cursor: String, $limit: Int) {\n    partitionBackfillsOrError(cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Page,\n  PageHeader,\n  Colors,\n  Box,\n  Tag,\n  Table,\n  Spinner,\n  Dialog,\n  Button,\n  DialogFooter,\n  ButtonLink,\n  DialogBody,\n  NonIdealState,\n} from '@dagster-io/ui';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport React from 'react';\nimport {Link, useParams} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../../assets/assetDetailsPathForKey';\nimport {BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\nimport {numberFormatter} from '../../ui/formatters';\n\nimport {\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n  PartitionBackfillFragment,\n} from './types/BackfillPage.types';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {\n      variables: {backfillId},\n    },\n  );\n  const {data} = queryResult;\n\n  const backfill = data?.partitionBackfillOrError;\n\n  let isInProgress = true;\n  if (backfill && backfill.__typename === 'PartitionBackfill') {\n    // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n    isInProgress = [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(\n      backfill.status,\n    );\n  }\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!backfill || !data) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (backfill.__typename === 'PythonError') {\n      return <PythonErrorInfo error={backfill} />;\n    }\n    if (backfill.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={backfill.message} />;\n    }\n\n    function getRunsUrl(status: 'inProgress' | 'complete' | 'failed' | 'targeted') {\n      const filters: RunFilterToken[] = [\n        {\n          token: 'tag',\n          value: `dagster/backfill=${backfillId}`,\n        },\n      ];\n      switch (status) {\n        case 'inProgress':\n          filters.push(\n            {\n              token: 'status',\n              value: RunStatus.STARTED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.QUEUED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.STARTING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.CANCELING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.NOT_STARTED,\n            },\n          );\n          break;\n        case 'complete':\n          filters.push({\n            token: 'status',\n            value: RunStatus.SUCCESS,\n          });\n          break;\n        case 'failed':\n          filters.push({\n            token: 'status',\n            value: RunStatus.FAILURE,\n          });\n          filters.push({\n            token: 'status',\n            value: RunStatus.CANCELED,\n          });\n          break;\n      }\n      return runsPathWithFilters(filters);\n    }\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n          data-testid={testId('backfill-page-details')}\n        >\n          <Detail\n            label=\"Created\"\n            detail={\n              <Timestamp\n                timestamp={{ms: Number(backfill.timestamp * 1000)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            }\n          />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <Duration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition Selection\"\n            detail={\n              <PartitionSelection\n                numPartitions={backfill.numPartitions || 0}\n                rootAssetTargetedPartitions={\n                  backfill.assetBackfillData?.rootAssetTargetedPartitions\n                }\n                rootAssetTargetedRanges={backfill.assetBackfillData?.rootAssetTargetedRanges}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<StatusLabel backfill={backfill} />} />\n        </Box>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '50%'}}>Asset name</th>\n              <th>\n                <Link to={getRunsUrl('targeted')}>Partitions targeted</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('inProgress')}>In progress</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('complete')}>Completed</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('failed')}>Failed</Link>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {backfill.assetBackfillData?.assetBackfillStatuses.map((asset) => {\n              let targeted;\n              let inProgress;\n              let completed;\n              let failed;\n              if (asset.__typename === 'AssetPartitionsStatusCounts') {\n                targeted = asset.numPartitionsTargeted;\n                inProgress = asset.numPartitionsInProgress;\n                completed = asset.numPartitionsMaterialized;\n                failed = asset.numPartitionsFailed;\n              } else {\n                targeted = 1;\n                failed = asset.failed ? 1 : 0;\n                inProgress = asset.inProgress ? 1 : 0;\n                completed = asset.materialized ? 1 : 0;\n              }\n              return (\n                <tr\n                  key={tokenForAssetKey(asset.assetKey)}\n                  data-testid={testId(`backfill-asset-row-${tokenForAssetKey(asset.assetKey)}`)}\n                >\n                  <td>\n                    <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                      <div>\n                        <Link to={assetDetailsPathForKey(asset.assetKey)}>\n                          {asset.assetKey.path.join('/')}\n                        </Link>\n                      </div>\n                      <div>\n                        <StatusBar\n                          targeted={targeted}\n                          inProgress={inProgress}\n                          completed={completed}\n                          failed={failed}\n                        />\n                      </div>\n                    </Box>\n                  </td>\n                  {asset.__typename === 'AssetPartitionsStatusCounts' ? (\n                    <>\n                      <td>{targeted}</td>\n                      <td>{inProgress}</td>\n                      <td>{completed}</td>\n                      <td>{failed}</td>\n                    </>\n                  ) : (\n                    <>\n                      <td>-</td>\n                      <td>\n                        {inProgress ? (\n                          <Tag icon=\"spinner\" intent=\"primary\">\n                            In progress\n                          </Tag>\n                        ) : (\n                          '-'\n                        )}\n                      </td>\n                      <td>{completed ? <Tag intent=\"success\">Completed</Tag> : '-'}</td>\n                      <td>{failed ? <Tag intent=\"danger\">Failed</Tag> : '-'}</td>\n                    </>\n                  )}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={\n          <div style={{fontSize: '18px'}}>\n            <Link to=\"/overview/backfills\" style={{color: Colors.Gray700}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </div>\n        }\n        right={isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n      />\n      {content()}\n    </Page>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nconst StatusLabel = ({backfill}: {backfill: PartitionBackfillFragment}) => {\n  function errorState(status: string) {\n    return (\n      <Box margin={{bottom: 12}}>\n        <TagButton\n          onClick={() =>\n            backfill.error &&\n            showCustomAlert({title: 'Error', body: <PythonErrorInfo error={backfill.error} />})\n          }\n        >\n          <Tag intent=\"danger\">{status}</Tag>\n        </TagButton>\n      </Box>\n    );\n  }\n  switch (backfill.status) {\n    case BulkActionStatus.REQUESTED:\n      return <Tag>In Progress</Tag>;\n\n    case BulkActionStatus.CANCELING:\n      return errorState('Canceling');\n    case BulkActionStatus.CANCELED:\n      return errorState('Canceled');\n    case BulkActionStatus.FAILED:\n      return errorState('Failed');\n    case BulkActionStatus.COMPLETED:\n      return <Tag intent=\"success\">Completed</Tag>;\n    default:\n      return <Tag>{backfill.status}</Tag>;\n  }\n};\n\nfunction StatusBar({\n  targeted,\n  inProgress,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  inProgress: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: Colors.Gray100,\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * inProgress) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: Colors.Green500}} />\n      <div style={{background: Colors.Red500}} />\n      <div style={{background: Colors.Blue200}} />\n    </div>\n  );\n}\n\nconst Label = styled.div`\n  color: ${Colors.Gray700};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst Duration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = React.useReducer((s: number, _: any) => s + 1, 0);\n  React.useEffect(() => {\n    if (end) {\n      return;\n    }\n    // re-render once a minute to update the \"time ago\"\n    const intervalId = setInterval(rerender, 60000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  return <span>{formatDuration(duration)}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...PartitionBackfillFragment\n      ...PythonErrorFragment\n      ... on BackfillNotFoundError {\n        message\n      }\n    }\n  }\n\n  fragment PartitionBackfillFragment on PartitionBackfill {\n    id\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    error {\n      ...PythonErrorFragment\n    }\n    assetBackfillData {\n      rootAssetTargetedRanges {\n        start\n        end\n      }\n      rootAssetTargetedPartitions\n      assetBackfillStatuses {\n        ... on AssetPartitionsStatusCounts {\n          assetKey {\n            path\n          }\n          numPartitionsTargeted\n          numPartitionsInProgress\n          numPartitionsMaterialized\n          numPartitionsFailed\n        }\n        ... on UnpartitionedAssetStatus {\n          assetKey {\n            path\n          }\n          inProgress\n          materialized\n          failed\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\ntype AssetBackfillData = Extract<\n  PartitionBackfillFragment['assetBackfillData'],\n  {__typename: 'AssetBackfillData'}\n>;\n\nexport const PartitionSelection = ({\n  numPartitions,\n  rootAssetTargetedRanges,\n  rootAssetTargetedPartitions,\n}: {\n  numPartitions: number;\n  rootAssetTargetedRanges?: AssetBackfillData['rootAssetTargetedRanges'];\n  rootAssetTargetedPartitions?: AssetBackfillData['rootAssetTargetedPartitions'];\n}) => {\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  let dialogContent: JSX.Element | undefined;\n  let content: JSX.Element | undefined;\n  if (rootAssetTargetedPartitions) {\n    if (rootAssetTargetedPartitions.length > 3) {\n      dialogContent = (\n        <div>\n          {rootAssetTargetedPartitions.map((p) => (\n            <div key={p} style={{maxWidth: '100px'}}>\n              <TruncatedTextWithFullTextOnHover text={p} />\n            </div>\n          ))}\n        </div>\n      );\n      content = (\n        <ButtonLink\n          onClick={() => {\n            setIsDialogOpen(true);\n          }}\n        >\n          {numberFormatter.format(numPartitions)} partitions\n        </ButtonLink>\n      );\n    } else {\n      content = (\n        <Box flex={{direction: 'row', gap: 8, wrap: 'wrap'}}>\n          {rootAssetTargetedPartitions.map((p) => (\n            <div key={p}>{p}</div>\n          ))}\n        </Box>\n      );\n    }\n  } else {\n    if (rootAssetTargetedRanges?.length === 1) {\n      const {start, end} = rootAssetTargetedRanges[0]!;\n      content = (\n        <div>\n          {start}...{end}\n        </div>\n      );\n    } else {\n      content = (\n        <ButtonLink\n          onClick={() => {\n            setIsDialogOpen(true);\n          }}\n        >\n          {numberFormatter.format(numPartitions)} partitions\n        </ButtonLink>\n      );\n      dialogContent = (\n        <Box flex={{direction: 'column', gap: 8}}>\n          {rootAssetTargetedRanges?.map((r) => (\n            <div key={`${r.start}:${r.end}`}>\n              {r.start}...{r.end}\n            </div>\n          ))}\n        </Box>\n      );\n    }\n  }\n\n  return (\n    <>\n      <div>{content}</div>\n      <Dialog isOpen={!!dialogContent && isDialogOpen} title=\"Partition selection\">\n        <DialogBody>{dialogContent}</DialogBody>\n        <DialogFooter topBorder>\n          <Button onClick={() => setIsDialogOpen(false)}>Close</Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst formatDuration = (duration: number) => {\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  let result = '';\n  if (days > 0) {\n    result += `${days}d `;\n    result += `${hours}h`;\n  } else if (hours > 0) {\n    result += `${hours}h `;\n    result += `${minutes}m`;\n  } else if (minutes > 0) {\n    result += `${minutes}m `;\n    result += `${seconds}s`;\n  }\n  return result.trim();\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n","import {useQuery} from '@apollo/client';\nimport {\n  Box,\n  Spinner,\n  Colors,\n  Icon,\n  Tag,\n  useViewport,\n  Select,\n  MenuItem,\n  Caption,\n  TextInput,\n} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {StatusCase, buildAssetNodeStatusContent} from '../asset-graph/AssetNode';\nimport {displayNameForAssetKey, toGraphId} from '../asset-graph/Utils';\nimport {useLiveDataForAssetKeys} from '../asset-graph/useLiveDataForAssetKeys';\nimport {partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {ASSET_CATALOG_TABLE_QUERY} from '../assets/AssetsCatalogTable';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {\n  AssetCatalogTableQuery,\n  AssetCatalogTableQueryVariables,\n} from '../assets/types/AssetsCatalogTable.types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {Container, HeaderCell, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  Header: React.FC<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.FC<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewAssetsRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Assets');\n\n  const query = useQuery<AssetCatalogTableQuery, AssetCatalogTableQueryVariables>(\n    ASSET_CATALOG_TABLE_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const refreshState = useQueryRefreshAtInterval(query, FIFTEEN_SECONDS);\n\n  const groupedAssetsUnfiltered = React.useMemo(() => {\n    if (query.data?.assetsOrError.__typename === 'AssetConnection') {\n      const assets = query.data.assetsOrError.nodes;\n      return groupAssets(assets);\n    }\n    return [];\n  }, [query.data?.assetsOrError]);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'q',\n    decode: (qs) => (qs.searchQuery ? JSON.parse(qs.searchQuery) : ''),\n    encode: (searchQuery) => ({searchQuery: searchQuery ? JSON.stringify(searchQuery) : undefined}),\n  });\n\n  const groupedAssets = React.useMemo(() => {\n    if (searchValue === '') {\n      return groupedAssetsUnfiltered;\n    }\n    return groupedAssetsUnfiltered.filter((group) => {\n      return (\n        (group.groupName || UNGROUPED_ASSETS).toLowerCase().includes(searchValue.toLowerCase()) ||\n        group.repositoryName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    });\n  }, [groupedAssetsUnfiltered, searchValue]);\n\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groupedAssets.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 82,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  function content() {\n    const result = query.data?.assetsOrError;\n    if (!query.data && query.loading) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (result?.__typename === 'PythonError') {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <PythonErrorInfo error={result} />\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column'}} style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualHeaderRow />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const group = groupedAssets[index]!;\n              return <VirtualRow key={key} start={start} height={size} group={group} />;\n            })}\n          </Inner>\n        </Container>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'sticky', top: 0, zIndex: 1}}>\n        <Header refreshState={refreshState} />\n        <Box\n          padding={{horizontal: 24, vertical: 16}}\n          flex={{alignItems: 'center', gap: 12, grow: 0}}\n        >\n          <TabButton selected=\"assets\" />\n          <TextInput\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n            }}\n            placeholder=\"Filter asset groups…\"\n          />\n        </Box>\n      </div>\n      {content()}\n    </>\n  );\n};\n\ntype Assets = Extract<\n  AssetCatalogTableQuery['assetsOrError'],\n  {__typename: 'AssetConnection'}\n>['nodes'];\n\nfunction groupAssets(assets: Assets) {\n  const groups: Record<\n    string,\n    {\n      groupName: string | null;\n      repositoryName: string;\n      assets: Assets;\n    }\n  > = {};\n\n  assets.forEach((asset) => {\n    if (!asset.definition) {\n      return;\n    }\n    const groupName = asset.definition.groupName;\n    const repositoryName = asset.definition.repository.name;\n    const key = `${groupName}||${repositoryName}`;\n    const target = groups[key] || {\n      groupName,\n      repositoryName,\n      assets: [] as Assets,\n    };\n    target.assets.push(asset);\n    groups[key] = target;\n  });\n  return Object.values(groups);\n}\n\nconst TEMPLATE_COLUMNS = '5fr 1fr 1fr 1fr 1fr';\n\nfunction VirtualHeaderRow() {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n        position: 'sticky',\n        top: 0,\n        zIndex: 1,\n        background: Colors.White,\n      }}\n    >\n      <HeaderCell>Group name</HeaderCell>\n      <HeaderCell>Missing</HeaderCell>\n      <HeaderCell>Failed/Overdue</HeaderCell>\n      <HeaderCell>In progress</HeaderCell>\n      <HeaderCell>Materialized</HeaderCell>\n    </Box>\n  );\n}\n\nconst UNGROUPED_ASSETS = 'Ungrouped Assets';\ntype RowProps = {\n  height: number;\n  start: number;\n  group: ReturnType<typeof groupAssets>[0];\n};\nfunction VirtualRow({height, start, group}: RowProps) {\n  const assetKeys = React.useMemo(() => group.assets.map((asset) => ({path: asset.key.path})), [\n    group.assets,\n  ]);\n\n  const {liveDataByNode} = useLiveDataForAssetKeys(assetKeys);\n\n  const statuses = React.useMemo(() => {\n    type assetType = typeof group['assets'][0];\n    type StatusesType = {asset: assetType; status: ReturnType<typeof buildAssetNodeStatusContent>};\n    const statuses = {\n      successful: [] as StatusesType[],\n      failed: [] as StatusesType[],\n      inprogress: [] as StatusesType[],\n      missing: [] as StatusesType[],\n      loading: false,\n    };\n    if (!Object.keys(liveDataByNode).length) {\n      statuses.loading = true;\n      return statuses;\n    }\n    Object.keys(liveDataByNode).forEach((key) => {\n      const assetLiveData = liveDataByNode[key];\n      const asset = group.assets.find((asset) => toGraphId(asset.key) === key)!;\n      if (!asset.definition) {\n        console.warn('Expected a definition for asset with key', key);\n      }\n      const status = buildAssetNodeStatusContent({\n        assetKey: {path: JSON.parse(key)},\n        definition: asset.definition!,\n        liveData: assetLiveData,\n        expanded: true,\n      });\n      switch (status.case) {\n        case StatusCase.LOADING:\n          statuses.loading = true;\n          break;\n        case StatusCase.SOURCE_OBSERVING:\n          statuses.inprogress.push({asset, status});\n          break;\n        case StatusCase.SOURCE_OBSERVED:\n          statuses.successful.push({asset, status});\n          break;\n        case StatusCase.SOURCE_NEVER_OBSERVED:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.SOURCE_NO_STATE:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.MATERIALIZING:\n          statuses.inprogress.push({asset, status});\n          break;\n        case StatusCase.LATE_OR_FAILED:\n          statuses.failed.push({asset, status});\n          break;\n        case StatusCase.NEVER_MATERIALIZED:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.MATERIALIZED:\n          statuses.successful.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_FAILED:\n          statuses.failed.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_MISSING:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_MATERIALIZED:\n          statuses.successful.push({asset, status});\n          break;\n      }\n    });\n    return statuses;\n  }, [liveDataByNode, group.assets]);\n\n  const repo = group.assets.find((asset) => asset.definition?.repository)?.definition?.repository;\n  const repoAddress = buildRepoAddress(repo?.name || '', repo?.location.name || '');\n\n  const {containerProps, viewport} = useViewport();\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <Cell>\n          <Box flex={{direction: 'column', gap: 2}}>\n            <Box flex={{direction: 'row', gap: 8}}>\n              <Icon name=\"asset_group\" />\n              {group.groupName ? (\n                <Link\n                  style={{fontWeight: 700}}\n                  to={workspacePathFromAddress(repoAddress, `/asset-groups/${group.groupName}`)}\n                >\n                  {group.groupName}\n                </Link>\n              ) : (\n                UNGROUPED_ASSETS\n              )}\n            </Box>\n            <div {...containerProps}>\n              <RepositoryLinkWrapper maxWidth={viewport.width}>\n                <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n              </RepositoryLinkWrapper>\n            </div>\n          </Box>\n        </Cell>\n        <Cell isLoading={!!statuses.loading}>\n          {statuses.missing.length ? (\n            <SelectOnHover\n              assets={statuses.missing}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MISSING) {\n                  return status.numMissing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"missing\"\n            >\n              <Tag intent=\"none\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: '12px',\n                      height: '12px',\n                      border: `2px solid ${Colors.Gray500}`,\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.missing.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            0\n          )}\n        </Cell>\n        <Cell isLoading={!!statuses.loading}>\n          {statuses.failed.length ? (\n            <SelectOnHover\n              assets={statuses.failed}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_FAILED) {\n                  return status.numFailed || 0;\n                }\n                return 0;\n              }}\n              adjective=\"failed\"\n            >\n              <Tag intent=\"danger\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderLeft: '6px solid transparent',\n                      borderRight: '6px solid transparent',\n                      borderBottom: '10px solid red',\n                      display: 'inline-block',\n                    }}\n                  />\n                  {statuses.failed.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            0\n          )}\n        </Cell>\n        <Cell isLoading={!!statuses.loading}>\n          {statuses.inprogress.length ? (\n            <SelectOnHover\n              assets={statuses.inprogress}\n              getCount={({status}) => {\n                if (status.case === StatusCase.MATERIALIZING) {\n                  return status.numMaterializing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materializing\"\n            >\n              <Tag intent=\"primary\" icon=\"spinner\">\n                {statuses.inprogress.length}\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            0\n          )}\n        </Cell>\n        <Cell isLoading={!!statuses.loading}>\n          {statuses.successful.length ? (\n            <SelectOnHover\n              assets={statuses.successful}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MATERIALIZED) {\n                  return status.numMaterialized || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materialized\"\n            >\n              <Tag intent=\"success\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      backgroundColor: Colors.Green500,\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.successful.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            0\n          )}\n        </Cell>\n      </RowGrid>\n    </Row>\n  );\n}\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    padding-top: 26px 0px;\n  }\n`;\n\nconst Cell = ({children, isLoading}: {children: React.ReactNode; isLoading?: boolean}) => {\n  return (\n    <RowCell style={{color: Colors.Gray900}}>\n      {isLoading ? (\n        <Box flex={{justifyContent: 'center', alignItems: 'center'}} style={{height: '82px'}}>\n          <Spinner purpose=\"body-text\" />\n        </Box>\n      ) : (\n        <Box flex={{direction: 'row', alignItems: 'center', grow: 1}}>{children}</Box>\n      )}\n    </RowCell>\n  );\n};\n\nconst RepositoryLinkWrapper = styled.div<{maxWidth?: number}>`\n  font-size: 12px;\n  pointer-events: none;\n  a {\n    color: ${Colors.Gray600};\n    pointer-events: none;\n    max-width: ${({maxWidth}) => (maxWidth ? 'unset' : `${maxWidth}px`)};\n  }\n`;\n\ntype AssetWithStatusType = {\n  asset: Assets[0];\n  status: ReturnType<typeof buildAssetNodeStatusContent>;\n};\nfunction SelectOnHover({\n  assets,\n  children,\n  getCount,\n  adjective,\n}: {\n  assets: AssetWithStatusType[];\n  children: React.ReactNode;\n  getCount: (asset: AssetWithStatusType) => number;\n  adjective: string;\n}) {\n  return (\n    <SelectWrapper>\n      <Select\n        items={assets}\n        itemPredicate={(query, item) =>\n          displayNameForAssetKey(item.asset.key)\n            .toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase())\n        }\n        itemRenderer={(item) => {\n          const count = getCount(item);\n          return (\n            <LinkWithNoUnderline to={assetDetailsPathForKey(item.asset.key)} target=\"_blank\">\n              <MenuItem\n                key={displayNameForAssetKey(item.asset.key)}\n                text={\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                    <div style={{paddingLeft: '4px'}}>\n                      <Icon name=\"asset\" />\n                    </div>\n                    <div\n                      style={{overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis'}}\n                    >\n                      {displayNameForAssetKey(item.asset.key)}\n                    </div>\n                    {count && count > 0 ? (\n                      <Caption style={{color: Colors.Gray700}}>\n                        {partitionCountString(count)} {adjective}\n                      </Caption>\n                    ) : null}\n                  </Box>\n                }\n              />\n            </LinkWithNoUnderline>\n          );\n        }}\n        onItemSelect={() => {}}\n      >\n        {children}\n      </Select>\n    </SelectWrapper>\n  );\n}\n\nconst SelectWrapper = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst LinkWithNoUnderline = styled(Link)`\n  &:hover {\n    text-decoration: none;\n  }\n`;\n","import {gql} from '@apollo/client';\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {isHiddenAssetGroupJob, __ASSET_JOB_PREFIX} from '../asset-graph/Utils';\nimport {InstigationStatus, RunsFilter, RunStatus} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {RunTimelineQuery, RunTimelineQueryVariables} from './types/useRunsForTimeline.types';\n\nexport const useRunsForTimeline = (range: [number, number], runsFilter: RunsFilter = {}) => {\n  const [start, end] = range;\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const queryData = useQuery<RunTimelineQuery, RunTimelineQueryVariables>(RUN_TIMELINE_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      inProgressFilter: {\n        ...runsFilter,\n        statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n        createdBefore: endSec,\n      },\n      terminatedFilter: {\n        ...runsFilter,\n        statuses: Array.from(doneStatuses),\n        createdBefore: endSec,\n        updatedAfter: startSec,\n      },\n      tickCursor: startSec,\n      ticksUntil: endSec,\n    },\n  });\n\n  const {data, previousData, loading} = queryData;\n\n  const initialLoading = loading && !data;\n  const {unterminated, terminated, workspaceOrError} = data || previousData || {};\n\n  const runsByJobKey = React.useMemo(() => {\n    const map: {[jobKey: string]: TimelineRun[]} = {};\n    const now = Date.now();\n\n    // fetch all the runs in the given range\n    [\n      ...(unterminated?.__typename === 'Runs' ? unterminated.results : []),\n      ...(terminated?.__typename === 'Runs' ? terminated.results : []),\n    ].forEach((run) => {\n      if (!run.startTime) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      if (\n        !overlap(\n          {start, end},\n          {\n            start: run.startTime * 1000,\n            end: run.endTime ? run.endTime * 1000 : now,\n          },\n        )\n      ) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = [\n        ...(map[runJobKey] || []),\n        {\n          id: run.id,\n          status: run.status,\n          startTime: run.startTime * 1000,\n          endTime: run.endTime ? run.endTime * 1000 : now,\n        },\n      ];\n    });\n\n    return map;\n  }, [end, unterminated, terminated, start]);\n\n  const jobsWithRuns: TimelineJob[] = React.useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename !== 'Workspace') {\n      return [];\n    }\n\n    const jobs: TimelineJob[] = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        locationEntry.__typename !== 'WorkspaceLocationEntry' ||\n        locationEntry.locationOrLoadError?.__typename !== 'RepositoryLocation'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (startTime > now && overlap({start, end}, {start: startTime, end: startTime})) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = runsByJobKey[jobKey] || [];\n          if (!jobTicks.length && !jobRuns.length) {\n            continue;\n          }\n\n          const jobsAndTicksToAdd = [...jobRuns, ...jobTicks];\n          if (isAdHoc) {\n            const adHocJobs = jobs.find(\n              (job) => job.jobType === 'asset' && job.repoAddress === repoAddress,\n            );\n            if (adHocJobs) {\n              adHocJobs.runs.push(...jobsAndTicksToAdd);\n              continue;\n            }\n          }\n\n          jobs.push({\n            key: jobKey,\n            jobName,\n            jobType: isAdHoc ? 'asset' : 'job',\n            repoAddress,\n            path: workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: pipeline.name,\n              isJob: pipeline.isJob,\n            }),\n            runs: [...jobRuns, ...jobTicks],\n          } as TimelineJob);\n        }\n      }\n    }\n\n    const earliest = jobs.reduce((accum, job) => {\n      const startTimes = job.runs.map((job) => job.startTime);\n      return {...accum, [job.key]: Math.min(...startTimes)};\n    }, {} as {[jobKey: string]: number});\n\n    return jobs.sort((a, b) => earliest[a.key]! - earliest[b.key]!);\n  }, [workspaceOrError, runsByJobKey, start, end]);\n\n  return React.useMemo(\n    () => ({\n      jobs: jobsWithRuns,\n      initialLoading,\n      queryData,\n    }),\n    [initialLoading, jobsWithRuns, queryData],\n  );\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${jobName}-${repoAddressAsHumanString(repoAddress)}`;\n\nconst RUN_TIMELINE_QUERY = gql`\n  query RunTimelineQuery(\n    $inProgressFilter: RunsFilter!\n    $terminatedFilter: RunsFilter!\n    $tickCursor: Float\n    $ticksUntil: Float\n  ) {\n    unterminated: runsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    terminated: runsOrError(filter: $terminatedFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {Box, TextInput, Button, ButtonGroup, ErrorBoundary} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {useHourWindow, HourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 60 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\ntype Props = {\n  Header: React.FC<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.FC<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewTimelineRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const [hourWindow, setHourWindow] = useHourWindow('12');\n  const [now, setNow] = React.useState(() => Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  React.useEffect(() => {\n    setNow(Date.now());\n    const timer = setInterval(() => {\n      setNow(Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  const range: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + LOOKAHEAD_HOURS * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, offsetMsec],\n  );\n\n  const {jobs, initialLoading, queryData} = useRunsForTimeline(range);\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(() => jobs.filter(({key}) => visibleJobKeys.has(key)), [\n    jobs,\n    visibleJobKeys,\n  ]);\n\n  return (\n    <>\n      <Header refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          <TabButton selected=\"timeline\" />\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={initialLoading} range={range} jobs={visibleJobs} />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import * as React from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagit.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = React.useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(HOUR_WINDOW_KEY, validate);\n  const setHourWindowWithDefault = React.useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return React.useMemo(() => [hourWindow, setHourWindowWithDefault], [\n    hourWindow,\n    setHourWindowWithDefault,\n  ]);\n};\n","import {PageHeader, Heading, Box, JoinedButtons} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ActivatableButton} from '../runs/RunListTabs';\n\nimport {OverviewAssetsRoot} from './OverviewAssetsRoot';\nimport {OverviewTabs} from './OverviewTabs';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\n\nexport const OverviewActivityRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Activity');\n\n  const header = React.useCallback(\n    ({refreshState}: {refreshState: React.ComponentProps<typeof OverviewTabs>['refreshState']}) => (\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"activity\" refreshState={refreshState} />}\n      />\n    ),\n    [],\n  );\n\n  const [defaultTab, setDefaultTab] = useStateWithStorage<'timeline' | 'assets'>(\n    'overview-activity-tab',\n    (json) => (['timeline', 'assets'].includes(json) ? json : 'timeline'),\n  );\n\n  const tabButton = React.useCallback(\n    ({selected}: {selected: 'timeline' | 'assets'}) => {\n      if (defaultTab !== selected) {\n        setDefaultTab(selected);\n      }\n      return (\n        <JoinedButtons>\n          <ActivatableButton $active={selected === 'timeline'} to=\"/overview/activity/timeline\">\n            Timeline\n          </ActivatableButton>\n          <ActivatableButton $active={selected === 'assets'} to=\"/overview/activity/assets\">\n            Assets\n          </ActivatableButton>\n        </JoinedButtons>\n      );\n    },\n    [defaultTab, setDefaultTab],\n  );\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Switch>\n        <Route path=\"/overview/activity/assets\">\n          <OverviewAssetsRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route path=\"/overview/activity/timeline\">\n          <OverviewTimelineRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route\n          path=\"*\"\n          render={React.useCallback(\n            () =>\n              defaultTab === 'timeline' ? (\n                <Redirect to=\"/overview/activity/timeline\" />\n              ) : (\n                <Redirect to=\"/overview/activity/assets\" />\n              ),\n            [defaultTab],\n          )}\n        />\n      </Switch>\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Heading, NonIdealState, PageHeader, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewJobsTable} from './OverviewJobsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/OverviewJobsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"jobs\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedResourceHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.resourceCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Heading, NonIdealState, PageHeader, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"resources\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (data?: OverviewResourcesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {useMutation} from '@apollo/client';\nimport {Alert, Box, Checkbox, Colors, Group, Table, Subheading, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {\n  displayScheduleMutationErrors,\n  STOP_SCHEDULE_MUTATION,\n} from '../schedules/ScheduleMutations';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {displaySensorMutationErrors, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {InstigatorSelectorInformation} from '../workspace/RepositoryInformation';\n\nimport {TickTag} from './InstigationTick';\nimport {InstigatedRunStatus} from './InstigationUtils';\nimport {InstigationStateFragment} from './types/InstigationUtils.types';\n\nexport const UnloadableSensors: React.FC<{\n  sensorStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({sensorStates, showSubheading = true}) => {\n  if (!sensorStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable sensors</Subheading> : null}\n        <UnloadableSensorInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Sensor name</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sensorStates.map((sensorState) => (\n            <SensorStateRow sensorState={sensorState} key={sensorState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport const UnloadableSchedules: React.FC<{\n  scheduleStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({scheduleStates, showSubheading = true}) => {\n  if (!scheduleStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable schedules</Subheading> : null}\n        <UnloadableScheduleInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Schedule name</th>\n            <th style={{width: '150px'}}>Schedule</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n            <th>Partition set status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {scheduleStates.map((scheduleState) => (\n            <ScheduleStateRow scheduleState={scheduleState} key={scheduleState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nconst UnloadableSensorInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following sensors, but you cannot turn them back on.{' '}\n      </div>\n    }\n    description={\n      <div>\n        The following sensors were previously started but now cannot be loaded. They may be part of\n        a different workspace or from a sensor or code location that no longer exists in code. You\n        can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst UnloadableScheduleInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following schedules, but you cannot turn them back on.\n      </div>\n    }\n    description={\n      <div>\n        The following schedules were previously started but now cannot be loaded. They may be part\n        of a different workspace or from a schedule or code location that no longer exists in code.\n        You can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst SensorStateRow = ({sensorState}: {sensorState: InstigationStateFragment}) => {\n  const {id, selectorId, name, status, ticks, hasStopPermission} = sensorState;\n\n  const [stopSensor, {loading: toggleOffInFlight}] = useMutation<\n    StopRunningSensorMutation,\n    StopRunningSensorMutationVariables\n  >(STOP_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const confirm = useConfirmation();\n\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to turn off this sensor?',\n        description:\n          'The definition for this sensor is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSensor({variables: {jobOriginId: id, jobSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !hasStopPermission;\n  const latestTick = ticks.length ? ticks[0] : null;\n\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        disabled={toggleOffInFlight || status === InstigationStatus.STOPPED || lacksPermission}\n        checked={status === InstigationStatus.RUNNING}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          {name}\n        </Group>\n        <InstigatorSelectorInformation instigatorState={sensorState} />\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SENSOR} />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>\n          <InstigatedRunStatus instigationState={sensorState} />\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nconst ScheduleStateRow: React.FC<{\n  scheduleState: InstigationStateFragment;\n}> = ({scheduleState}) => {\n  const [stopSchedule, {loading: toggleOffInFlight}] = useMutation<\n    StopScheduleMutation,\n    StopScheduleMutationVariables\n  >(STOP_SCHEDULE_MUTATION, {\n    onCompleted: displayScheduleMutationErrors,\n  });\n  const confirm = useConfirmation();\n  const {id, selectorId, name, ticks, status, typeSpecificData} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n  const cronSchedule =\n    typeSpecificData && typeSpecificData.__typename === 'ScheduleData'\n      ? typeSpecificData.cronSchedule\n      : null;\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to stop this schedule?',\n        description:\n          'The definition for this schedule is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSchedule({variables: {scheduleOriginId: id, scheduleSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !scheduleState.hasStopPermission;\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        checked={status === InstigationStatus.RUNNING}\n        disabled={status !== InstigationStatus.RUNNING || toggleOffInFlight || lacksPermission}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          <div>{name}</div>\n        </Group>\n        <InstigatorSelectorInformation instigatorState={scheduleState} />\n      </td>\n      <td style={{maxWidth: 150}}>\n        <div\n          style={{\n            position: 'relative',\n            width: '100%',\n            whiteSpace: 'pre-wrap',\n            display: 'block',\n          }}\n        >\n          {cronSchedule ? (\n            <Tooltip position=\"bottom\" content={cronSchedule}>\n              {humanCronString(cronSchedule)}\n            </Tooltip>\n          ) : (\n            <div>&mdash;</div>\n          )}\n        </div>\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n        ) : null}\n      </td>\n      <td>\n        <InstigatedRunStatus instigationState={scheduleState} />\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>&mdash;</div>\n      </td>\n    </tr>\n  );\n};\n","import * as React from 'react';\n\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {WorkspaceContext} from '../../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\n\nimport {useStaticSetFilter} from './useStaticSetFilter';\n\nexport const useCodeLocationFilter = () => {\n  const {allRepos, visibleRepos, setVisible, setHidden} = React.useContext(WorkspaceContext);\n\n  const allRepoAddresses = React.useMemo(() => {\n    return allRepos.map((repo) =>\n      buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n    );\n  }, [allRepos]);\n\n  const visibleRepoAddresses = React.useMemo(() => {\n    return visibleRepos.length === allRepos.length\n      ? []\n      : visibleRepos.map((repo) =>\n          buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n        );\n  }, [allRepos, visibleRepos]);\n\n  return useStaticSetFilter<RepoAddress>({\n    name: 'Code location',\n    icon: 'folder',\n    initialState: visibleRepoAddresses,\n    allValues: allRepoAddresses.map((repoAddress) => {\n      return {value: repoAddress, match: [repoAddressAsHumanString(repoAddress)]};\n    }),\n    getKey: (repoAddress) => repoAddressAsHumanString(repoAddress),\n    renderLabel: ({value}) => (\n      <TruncatedTextWithFullTextOnHover text={repoAddressAsHumanString(value)} />\n    ),\n    getStringValue: (value) => repoAddressAsHumanString(value),\n    onStateChanged: (state: Set<RepoAddress>) => {\n      if (state.size === 0) {\n        setVisible(allRepoAddresses);\n        return;\n      }\n\n      const hidden = allRepoAddresses.filter((repoAddress) => !state.has(repoAddress));\n      setHidden(hidden);\n      setVisible(Array.from(state));\n    },\n    menuWidth: '500px',\n  });\n};\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\n\ntype ScheduleInfo = {name: string; scheduleState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: ScheduleInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: ScheduleInfo};\n\nexport const OverviewScheduleTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((schedule) => {\n          flat.push({type: 'schedule', repoAddress, schedule});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={\n                          row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                        }\n                        placement=\"top\"\n                      >\n                        <Tag>{row.scheduleCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const scheduleKey = makeScheduleKey(row.repoAddress, row.schedule.name);\n\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.schedule.name}\n                  scheduleState={row.schedule.scheduleState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(scheduleKey)}\n                  onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {ScheduleBulkActionMenu} from '../schedules/ScheduleBulkActionMenu';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n  UnloadableSchedulesQuery,\n  UnloadableSchedulesQueryVariables,\n} from './types/OverviewSchedulesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = React.useMemo(() => [codeLocationFilter, runningStateFilter], [\n    codeLocationFilter,\n    runningStateFilter,\n  ]);\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = React.useMemo(() => {\n    return repoBuckets.map(({schedules, ...rest}) => {\n      return {\n        ...rest,\n        schedules: runningState.size\n          ? schedules.filter(({scheduleState}) => runningState.has(scheduleState.status))\n          : schedules,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySchedulesVisible = React.useMemo(\n    () => filteredBySearch.some(({schedules}) => schedules.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all schedules across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSchedules = React.useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, schedules}) => {\n        return schedules\n          .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n          .map(({name, scheduleState}) => ({\n            repoAddress,\n            scheduleName: name,\n            scheduleState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedScheduleKeys = React.useMemo(() => {\n    return allPermissionedSchedules.map(({repoAddress, scheduleName}) =>\n      makeScheduleKey(repoAddress, scheduleName),\n    );\n  }, [allPermissionedSchedules]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedScheduleKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = React.useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules}) => {\n          return schedules.map(({name}) => makeScheduleKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedScheduleKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedScheduleKeys, filteredBySearch]);\n\n  // Determine the list of schedule objects that have been checked by the viewer.\n  // These are the schedules that will be operated on by the bulk start/stop action.\n  const checkedSchedules = React.useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSchedules.filter(({repoAddress, scheduleName}) => {\n      return checkedKeysOnScreen.has(makeScheduleKey(repoAddress, scheduleName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSchedules, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedScheduleKeys.length > 0;\n  const checkedCount = checkedSchedules.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No matching schedules were found in the selected code locations'\n                : 'No matching schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewScheduleTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"schedules\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n              onToggleAll(false);\n            }}\n            placeholder=\"Filter by schedule name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySchedulesVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <ScheduleBulkActionMenu\n            schedules={checkedSchedules}\n            onDone={() => refreshState.refetch()}\n          />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSchedulesAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSchedulesAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable schedule' : `${count} unloadable schedules`;\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Schedules were previously started but now cannot be loaded. They may be part of a\n                code locations that no longer exist. You can turn them off, but you cannot turn them\n                back on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable schedule' : 'View unloadable schedules'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableScheduleDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableScheduleDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSchedulesQuery, UnloadableSchedulesQueryVariables>(\n    UNLOADABLE_SCHEDULES_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSchedules\n        scheduleStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: {name: string; scheduleState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name, scheduleState}) => ({name, scheduleState}));\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                  scheduleState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SCHEDULES_QUERY = gql`\n  query UnloadableSchedulesQuery {\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\n\ntype SensorInfo = {name: string; sensorState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: SensorInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: SensorInfo};\n\nexport const OverviewSensorTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((sensor) => {\n          flat.push({type: 'sensor', repoAddress, sensor});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                        placement=\"top\"\n                      >\n                        <Tag>{row.sensorCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const sensorKey = makeSensorKey(row.repoAddress, row.sensor.name);\n\n              return (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.sensor.name}\n                  sensorState={row.sensor.sensorState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(sensorKey)}\n                  onToggleChecked={onToggleCheckFactory(sensorKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {SensorBulkActionMenu} from '../sensors/SensorBulkActionMenu';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSensorsQuery,\n  OverviewSensorsQueryVariables,\n  UnloadableSensorsQuery,\n  UnloadableSensorsQueryVariables,\n} from './types/OverviewSensorsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = React.useMemo(() => [codeLocationFilter, runningStateFilter], [\n    codeLocationFilter,\n    runningStateFilter,\n  ]);\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = React.useMemo(() => {\n    return repoBuckets.map(({sensors, ...rest}) => {\n      return {\n        ...rest,\n        sensors: runningState.size\n          ? sensors.filter(({sensorState}) => runningState.has(sensorState.status))\n          : sensors,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySensorsVisible = React.useMemo(\n    () => filteredBySearch.some(({sensors}) => sensors.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all sensors across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSensors = React.useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, sensors}) => {\n        return sensors\n          .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n          .map(({name, sensorState}) => ({\n            repoAddress,\n            sensorName: name,\n            sensorState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedSensorKeys = React.useMemo(() => {\n    return allPermissionedSensors.map(({repoAddress, sensorName}) =>\n      makeSensorKey(repoAddress, sensorName),\n    );\n  }, [allPermissionedSensors]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedSensorKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = React.useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, sensors}) => {\n          return sensors.map(({name}) => makeSensorKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedSensorKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedSensorKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedSensors = React.useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSensors.filter(({repoAddress, sensorName}) => {\n      return checkedKeysOnScreen.has(makeSensorKey(repoAddress, sensorName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSensors, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedSensorKeys.length > 0;\n  const checkedCount = checkedSensors.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewSensorTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"sensors\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by sensor name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySensorsVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <SensorBulkActionMenu sensors={checkedSensors} onDone={() => refreshState.refetch()} />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSensorsAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSensorsAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable sensor' : `${count} unloadable sensors`;\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Sensors were previously started but now cannot be loaded. They may be part of a code\n                location that no longer exists. You can turn them off, but you cannot turn them back\n                on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable sensor' : 'View unloadable sensors'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableSensorDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableSensorDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSensorsQuery, UnloadableSensorsQueryVariables>(\n    UNLOADABLE_SENSORS_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSensors\n        sensorStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  sensors: {name: string; sensorState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSensorsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                  sensorState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SENSORS_QUERY = gql`\n  query UnloadableSensorsQuery {\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {InstanceBackfills} from '../instance/InstanceBackfills';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nimport {OverviewActivityRoot} from './OverviewActivityRoot';\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\n\nexport const OverviewRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/overview/activity\">\n        <OverviewActivityRoot />\n      </Route>\n      <Route path=\"/overview/jobs\">\n        <OverviewJobsRoot />\n      </Route>\n      <Route path=\"/overview/schedules\">\n        <OverviewSchedulesRoot />\n      </Route>\n      <Route path=\"/overview/sensors\">\n        <OverviewSensorsRoot />\n      </Route>\n      <Route path=\"/overview/backfills/:backfillId\">\n        <BackfillPage />\n      </Route>\n      <Route path=\"/overview/backfills\" exact>\n        <InstanceBackfills />\n      </Route>\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/overview/activity\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n","import {gql, useQuery} from '@apollo/client';\nimport {Colors, JoinedButtons, TokenizingFieldValue} from '@dagster-io/ui';\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport {useLocation} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {RunStatus, RunsFilter} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nimport {failedStatuses, inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {runsPathWithFilters, useQueryPersistedRunFilters} from './RunsFilterInput';\nimport {RunTabsCountQuery, RunTabsCountQueryVariables} from './types/RunListTabs.types';\n\nconst getDocumentTitle = (selected: ReturnType<typeof useSelectedRunsTab>) => {\n  switch (selected) {\n    case 'all':\n      return 'Runs | All runs';\n    case 'failed':\n      return 'Runs | Failed';\n    case 'in-progress':\n      return 'Runs | In progress';\n    case 'queued':\n      return 'Runs | Queued';\n    case 'scheduled':\n      return 'Runs | Scheduled';\n    default:\n      return 'Runs';\n  }\n};\n\nexport const useRunListTabs = (filter: RunsFilter = {}) => {\n  const queryResult = useQuery<RunTabsCountQuery, RunTabsCountQueryVariables>(\n    RUN_TABS_COUNT_QUERY,\n    {\n      variables: {\n        queuedFilter: {...filter, statuses: Array.from(queuedStatuses)},\n        inProgressFilter: {...filter, statuses: Array.from(inProgressStatuses)},\n      },\n    },\n  );\n\n  const {data: countData} = queryResult;\n  const {queuedCount, inProgressCount} = React.useMemo(() => {\n    return {\n      queuedCount:\n        countData?.queuedCount?.__typename === 'Runs' ? countData.queuedCount.count : null,\n      inProgressCount:\n        countData?.inProgressCount?.__typename === 'Runs' ? countData.inProgressCount.count : null,\n    };\n  }, [countData]);\n\n  const [filterTokens] = useQueryPersistedRunFilters();\n  const selectedTab = useSelectedRunsTab(filterTokens);\n\n  useDocumentTitle(getDocumentTitle(selectedTab));\n\n  const urlForStatus = (statuses: RunStatus[]) => {\n    const tokensMinusStatus = filterTokens.filter((token) => token.token !== 'status');\n    const statusTokens = statuses.map((status) => ({token: 'status' as const, value: status}));\n    return runsPathWithFilters([...statusTokens, ...tokensMinusStatus]);\n  };\n\n  const tabs = (\n    <JoinedButtons>\n      <ActivatableButton to={urlForStatus([])} id=\"all\" $active={selectedTab === 'all'}>\n        All runs\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(queuedStatuses))}\n        id=\"queued\"\n        $active={selectedTab === 'queued'}\n      >\n        Queued ({queuedCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(inProgressStatuses))}\n        id=\"in-progress\"\n        $active={selectedTab === 'in-progress'}\n      >\n        In progress ({inProgressCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(failedStatuses))}\n        id=\"failed\"\n        $active={selectedTab === 'failed'}\n      >\n        Failed\n      </ActivatableButton>\n      <ActivatableButton\n        title=\"Scheduled\"\n        to=\"/runs/scheduled\"\n        id=\"scheduled\"\n        $active={selectedTab === 'scheduled'}\n      >\n        Scheduled\n      </ActivatableButton>\n    </JoinedButtons>\n  );\n\n  return {tabs, queryResult};\n};\n\nexport const ActivatableButton = styled(AnchorButton)<{$active: boolean}>`\n  ${(props) =>\n    props.$active &&\n    `\n    background: ${Colors.Gray200};\n  `}\n`;\n\nexport const useSelectedRunsTab = (filterTokens: TokenizingFieldValue[]) => {\n  const {pathname} = useLocation();\n  if (pathname === '/runs/timeline') {\n    return 'timeline';\n  }\n  if (pathname === '/runs/scheduled') {\n    return 'scheduled';\n  }\n  if (pathname === '/overview/backfills') {\n    return 'backfills';\n  }\n\n  const statusTokens = new Set(\n    filterTokens.filter((token) => token.token === 'status').map((token) => token.value),\n  );\n  if (isEqual(queuedStatuses, statusTokens)) {\n    return 'queued';\n  }\n  if (isEqual(inProgressStatuses, statusTokens)) {\n    return 'in-progress';\n  }\n  if (isEqual(failedStatuses, statusTokens)) {\n    return 'failed';\n  }\n  return 'all';\n};\n\nexport const RUN_TABS_COUNT_QUERY = gql`\n  query RunTabsCountQuery($queuedFilter: RunsFilter!, $inProgressFilter: RunsFilter!) {\n    queuedCount: pipelineRunsOrError(filter: $queuedFilter) {\n      ... on Runs {\n        count\n      }\n    }\n    inProgressCount: pipelineRunsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        count\n      }\n    }\n  }\n`;\n"],"names":["RepoFilterButton","_React$useContext","React","WorkspaceContext","allRepos","visibleRepos","toggleVisible","_React$useState","_React$useState2","_slicedToArray","open","setOpen","_jsxs","_Fragment","children","Dialog","canOutsideClickClose","canEscapeKeyClose","isOpen","style","width","onClose","_jsx","DialogHeader","icon","label","RepoSelector","options","onBrowse","onToggle","selected","DialogFooter","Box","padding","top","Button","intent","onClick","Icon","name","rightIcon","concat","length","OverviewTabs","props","refreshState","tab","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","TabLink","id","title","to","bottom","QueryRefreshCountdown","InstanceBackfills","useTrackPageView","useDocumentTitle","queryData","useQuery","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","_useCursorPaginatedQu","useCursorPaginatedQuery","query","BACKFILLS_QUERY","variables","pageSize","nextCursorForResult","result","_result$partitionBack","partitionBackfillsOrError","__typename","results","PAGE_SIZE","undefined","getResultArray","queryResult","paginationProps","useQueryRefreshAtInterval","FIFTEEN_SECONDS","Page","PageHeader","Heading","tabs","Loading","allowStaleData","_ref","_queryData$data","PythonErrorInfo","error","vertical","NonIdealState","description","backfillHealths","data","instance","daemonHealth","allDaemonStatuses","filter","daemon","daemonType","map","required","healthy","isBackfillHealthy","every","x","horizontal","DaemonNotRunningAlertBody","BackfillTable","backfills","slice","refetch","marginTop","CursorPaginationControls","_objectSpread","gql","_templateObject","_taggedTemplateLiteral","INSTANCE_HEALTH_FRAGMENT","_templateObject2","PYTHON_ERROR_FRAGMENT","BACKFILL_TABLE_FRAGMENT","dayjs","duration","relativeTime","BackfillPage","backfillId","useParams","BACKFILL_DETAILS_QUERY","backfill","partitionBackfillOrError","isInProgress","BulkActionStatus","includes","status","fontSize","Link","color","Colors","right","_backfill$assetBackfi","_backfill$assetBackfi2","_backfill$assetBackfi3","testId","Spinner","purpose","message","getRunsUrl","filters","token","value","push","RunStatus","runsPathWithFilters","wrap","Detail","detail","Timestamp","timestamp","ms","Number","timeFormat","showSeconds","showTimezone","Duration","start","end","endTimestamp","PartitionSelection","numPartitions","rootAssetTargetedPartitions","assetBackfillData","rootAssetTargetedRanges","StatusLabel","Table","assetBackfillStatuses","asset","targeted","inProgress","completed","failed","numPartitionsTargeted","numPartitionsInProgress","numPartitionsMaterialized","numPartitionsFailed","materialized","tokenForAssetKey","assetKey","assetDetailsPathForKey","path","join","StatusBar","Tag","content","gap","minWidth","Label","_ref2","errorState","margin","TagButton","showCustomAlert","body","_ref3","borderRadius","backgroundColor","display","gridTemplateColumns","gridTemplateRows","height","overflow","background","styled","displayName","componentId","_ref4","_React$useReducer","s","_","_React$useReducer2","rerender","intervalId","setInterval","clearInterval","Date","now","formatDuration","_ref5","dialogContent","isDialogOpen","setIsDialogOpen","p","maxWidth","TruncatedTextWithFullTextOnHover","text","ButtonLink","numberFormatter","_ref6","r","DialogBody","topBorder","seconds","Math","floor","minutes","hours","days","trim","OverviewAssetsRoot","_query$data2","Header","TabButton","ASSET_CATALOG_TABLE_QUERY","notifyOnNetworkStatusChange","groupedAssetsUnfiltered","_query$data","assetsOrError","assets","groups","forEach","definition","groupName","repositoryName","repository","key","target","Object","values","groupAssets","nodes","_useQueryPersistedSta","useQueryPersistedState","queryKey","decode","qs","searchQuery","JSON","parse","encode","stringify","_useQueryPersistedSta2","searchValue","setSearchValue","groupedAssets","group","UNGROUPED_ASSETS","toLowerCase","parentRef","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","position","zIndex","grow","TextInput","onChange","e","placeholder","_query$data3","loading","Container","ref","VirtualHeaderRow","Inner","$totalHeight","index","size","VirtualRow","TEMPLATE_COLUMNS","border","side","HeaderCell","_group$assets$find","_group$assets$find$de","assetKeys","liveDataByNode","useLiveDataForAssetKeys","statuses","successful","inprogress","missing","keys","assetLiveData","find","toGraphId","console","warn","buildAssetNodeStatusContent","liveData","expanded","case","StatusCase","repo","_asset$definition","repoAddress","buildRepoAddress","location","_useViewport","useViewport","containerProps","viewport","Row","$height","$start","RowGrid","Cell","fontWeight","workspacePathFromAddress","RepositoryLinkWrapper","RepositoryLink","showRefresh","isLoading","SelectOnHover","getCount","numMissing","adjective","numFailed","borderLeft","borderRight","borderBottom","numMaterializing","_ref7","numMaterialized","withConfig","_ref8","RowCell","_ref9","_ref10","SelectWrapper","Select","itemPredicate","item","displayNameForAssetKey","toLocaleLowerCase","itemRenderer","LinkWithNoUnderline","MenuItem","paddingLeft","whiteSpace","textOverflow","Caption","partitionCountString","onItemSelect","SCHEDULE_FUTURE_TICKS_FRAGMENT","makeJobKey","jobName","repoAddressAsHumanString","RUN_TIMELINE_QUERY","RUN_TIME_FRAGMENT","ONE_HOUR","hourWindowToOffset","hourWindow","OverviewTimelineRoot","_useHourWindow","defaultValue","validate","_useStateWithStorage","useStateWithStorage","_useStateWithStorage2","setHourWindow","setHourWindowWithDefault","useHourWindow","_useHourWindow2","setNow","_React$useState3","_React$useState4","offsetMsec","setOffsetMsec","defaults","search","timer","onPageEarlier","onPageLater","onPageNow","range","LOOKAHEAD_HOURS","_useRunsForTimeline","runsFilter","arguments","_range","startSec","endSec","inProgressFilter","createdBefore","terminatedFilter","Array","from","doneStatuses","updatedAfter","tickCursor","ticksUntil","previousData","initialLoading","unterminated","terminated","workspaceOrError","runsByJobKey","_toConsumableArray","run","startTime","repositoryOrigin","overlap","endTime","runJobKey","repositoryLocationName","pipelineName","jobsWithRuns","_step","jobs","_iterator","_createForOfIteratorHelper","locationEntries","_loop","_locationEntry$locati","locationEntry","locationOrLoadError","_step2","_iterator2","repositories","_loop2","_step3","_iterator3","pipelines","_loop3","_step4","pipeline","schedules","schedule","jobTicks","_iterator4","_loop4","scheduleState","InstigationStatus","futureTicks","n","done","err","f","isAdHoc","isHiddenAssetGroupJob","jobKey","jobRuns","jobsAndTicksToAdd","_adHocJobs$runs","adHocJobs","job","jobType","runs","apply","workspacePipelinePath","repoName","repoLocation","isJob","earliest","reduce","accum","startTimes","_defineProperty","min","sort","a","b","useRunsForTimeline","visibleJobKeys","searchLower","flat","flatMap","repositoryLocation","Set","visibleJobs","has","ButtonGroup","activeItems","buttons","hrWindow","ErrorBoundary","region","RunTimeline","OverviewActivityRoot","header","json","defaultTab","setDefaultTab","tabButton","JoinedButtons","ActivatableButton","$active","Switch","Route","render","Redirect","OverviewJobsTable","repos","allKeys","_useRepoExpansionStat","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","type","jobCount","repoKey","duplicateRepoNames","findDuplicateRepoNames","ii","row","VirtualizedJobHeader","RepoRow","showLocation","rightElement","Tooltip","placement","VirtualizedJobRow","sortRepoBuckets","buckets","aString","bString","localeCompare","visibleRepoKeys","option","OverviewJobsRoot","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","fetchPolicy","repoBuckets","visibleKeys","buildBuckets","sanitizedSearch","anySearch","filteredBySearch","searchToLower","paddingTop","anyReposHidden","entries","entry","OverviewResourcesTable","resources","resourceCount","resource","VirtualizedResourceHeader","VirtualizedResourceRow","OverviewResourcesRoot","OVERVIEW_RESOURCES_QUERY","allTopLevelResourceDetails","RESOURCE_ENTRY_FRAGMENT","UnloadableSensors","sensorStates","_ref$showSubheading","showSubheading","Subheading","UnloadableSensorInfo","sensorState","SensorStateRow","UnloadableSchedules","scheduleStates","_ref2$showSubheading","UnloadableScheduleInfo","ScheduleStateRow","Alert","selectorId","ticks","hasStopPermission","_useMutation","useMutation","STOP_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","_useMutation2","stopSensor","toggleOffInFlight","confirm","useConfirmation","onChangeSwitch","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_context","prev","next","jobOriginId","jobSelectorId","stop","lacksPermission","latestTick","element","Checkbox","format","disabled","checked","DEFAULT_DISABLED_REASON","checkbox","Group","spacing","InstigatorSelectorInformation","instigatorState","TickTag","tick","instigationType","InstigationType","InstigatedRunStatus","instigationState","_useMutation3","STOP_SCHEDULE_MUTATION","displayScheduleMutationErrors","_useMutation4","stopSchedule","typeSpecificData","cronSchedule","_callee2","_context2","scheduleOriginId","scheduleSelectorId","humanCronString","useCodeLocationFilter","setVisible","setHidden","allRepoAddresses","visibleRepoAddresses","useStaticSetFilter","initialState","allValues","match","getKey","renderLabel","getStringValue","onStateChanged","state","hidden","menuWidth","OverviewScheduleTable","headerCheckbox","checkedKeys","onToggleCheckFactory","scheduleCount","VirtualizedScheduleHeader","scheduleKey","makeScheduleKey","VirtualizedScheduleRow","showCheckboxColumn","onToggleChecked","OverviewSchedulesRoot","codeLocationFilter","runningStateFilter","useInstigationStatusFilter","_useFilters","useFilters","filterButton","button","activeFiltersJsx","OVERVIEW_SCHEDULES_QUERY","runningState","filteredBuckets","rest","_objectWithoutProperties","_excluded","anySchedulesVisible","some","allPermissionedSchedules","filterPermissionedInstigationState","scheduleName","allPermissionedScheduleKeys","_ref11","_useSelectionReducer","useSelectionReducer","_useSelectionReducer2","checkedIds","_useSelectionReducer3","onToggleFactory","permissionedKeysOnScreen","filteredKeys","_ref12","_ref13","checkedSchedules","checkedKeysOnScreen","_ref14","viewerHasAnyInstigationPermission","checkedCount","canShow","useDisabledButtonTooltipFix","ScheduleBulkActionMenu","onDone","unloadableInstigationStatesOrError","UnloadableSchedulesAlert","SchedulerInfo","CheckAllBox","totalCount","_ref15","setIsOpen","UnloadableScheduleDialog","UNLOADABLE_SCHEDULES_QUERY","scheduleNames","_ref16","BASIC_INSTIGATION_STATE_FRAGMENT","INSTIGATION_STATE_FRAGMENT","OverviewSensorTable","sensors","sensorCount","sensor","VirtualizedSensorHeader","sensorKey","makeSensorKey","VirtualizedSensorRow","OverviewSensorsRoot","OVERVIEW_SENSORS_QUERY","anySensorsVisible","allPermissionedSensors","sensorName","allPermissionedSensorKeys","checkedSensors","SensorBulkActionMenu","UnloadableSensorsAlert","SensorInfo","UnloadableSensorDialog","UNLOADABLE_SENSORS_QUERY","OverviewRoot","exact","useRunListTabs","RUN_TABS_COUNT_QUERY","queuedFilter","queuedStatuses","inProgressStatuses","countData","_React$useMemo","_countData$queuedCoun","_countData$inProgress","queuedCount","inProgressCount","_useQueryPersistedRun","useQueryPersistedRunFilters","filterTokens","selectedTab","useSelectedRunsTab","getDocumentTitle","urlForStatus","tokensMinusStatus","statusTokens","failedStatuses","AnchorButton","pathname","useLocation","isEqual"],"sourceRoot":""}
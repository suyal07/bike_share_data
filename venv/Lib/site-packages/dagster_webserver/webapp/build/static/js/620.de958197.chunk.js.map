{"version":3,"file":"static/js/620.de958197.chunk.js","mappings":"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","sources":["../../core/src/asset-graph/AssetEdges.tsx","../../core/src/asset-graph/AssetGraphJobSidebar.tsx","../../core/src/assets/LastMaterializationMetadata.tsx","../../core/src/assets/AssetSidebarActivitySummary.tsx","../../core/src/asset-graph/SidebarAssetInfo.tsx","../../core/src/asset-graph/useFindAssetLocation.tsx","../../core/src/asset-graph/AssetGraphExplorer.tsx","../../core/src/asset-graph/AssetGroupNode.tsx","../../core/src/asset-graph/ForeignNode.tsx","../../core/src/asset-graph/useAssetGraphData.tsx","../../core/src/assets/AssetEventSystemTags.tsx","../../core/src/assets/AssetLineageElements.tsx","../../core/src/assets/AssetMaterializationGraphs.tsx","../../core/src/assets/AssetMetadata.tsx","../../core/src/assets/AutomaterializePolicyTag.tsx","../../core/src/assets/CurrentRunsBanner.tsx","../../core/src/assets/DependsOnSelfBanner.tsx","../../core/src/assets/FailedRunSinceMaterializationBanner.tsx","../../core/src/assets/LaunchAssetObservationButton.tsx","../../core/src/assets/UnderlyingOpsOrGraph.tsx","../../core/src/assets/Version.tsx","../../core/src/assets/groupByPartition.tsx","../../core/src/assets/useRecentAssetEvents.tsx","../../core/src/pipelines/NonIdealPipelineQueryResult.tsx","../../core/src/runs/StepLogsDialog.tsx"],"sourcesContent":["import {Colors} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {buildSVGPath} from './Utils';\nimport {AssetLayoutEdge} from './layout';\n\nexport const AssetEdges: React.FC<{\n  edges: AssetLayoutEdge[];\n  highlighted: string | null;\n  strokeWidth?: number;\n  baseColor?: string;\n}> = ({edges, highlighted, strokeWidth = 4, baseColor = Colors.KeylineGray}) => {\n  // Note: we render the highlighted edges twice, but it's so that the first item with\n  // all the edges in it can remain memoized.\n  return (\n    <React.Fragment>\n      <AssetEdgeSet color={baseColor} edges={edges} strokeWidth={strokeWidth} />\n      <AssetEdgeSet\n        color={Colors.Blue500}\n        edges={edges.filter(({fromId, toId}) => highlighted === fromId || highlighted === toId)}\n        strokeWidth={strokeWidth}\n      />\n    </React.Fragment>\n  );\n};\n\nconst AssetEdgeSet: React.FC<{\n  edges: AssetLayoutEdge[];\n  color: string;\n  strokeWidth: number;\n}> = React.memo(({edges, color, strokeWidth}) => (\n  <>\n    <defs>\n      <marker\n        id={`arrow${btoa(color)}`}\n        viewBox=\"0 0 8 10\"\n        refX=\"1\"\n        refY=\"5\"\n        markerUnits=\"strokeWidth\"\n        markerWidth={strokeWidth}\n        orient=\"auto\"\n      >\n        <path d=\"M 0 0 L 8 5 L 0 10 z\" fill={color} />\n      </marker>\n    </defs>\n    {edges.map((edge, idx) => (\n      <path\n        key={idx}\n        d={buildSVGPath({source: edge.from, target: edge.to})}\n        stroke={color}\n        strokeWidth={strokeWidth}\n        fill=\"none\"\n        markerEnd={`url(#arrow${btoa(color)})`}\n      />\n    ))}\n  </>\n));\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PipelineSelector} from '../graphql/types';\nimport {NonIdealPipelineQueryResult} from '../pipelines/NonIdealPipelineQueryResult';\nimport {\n  SidebarContainerOverview,\n  SIDEBAR_ROOT_CONTAINER_FRAGMENT,\n} from '../pipelines/SidebarContainerOverview';\nimport {Loading} from '../ui/Loading';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {\n  AssetGraphSidebarQuery,\n  AssetGraphSidebarQueryVariables,\n} from './types/AssetGraphJobSidebar.types';\n\nexport const AssetGraphJobSidebar: React.FC<{\n  pipelineSelector: PipelineSelector;\n}> = ({pipelineSelector}) => {\n  const queryResult = useQuery<AssetGraphSidebarQuery, AssetGraphSidebarQueryVariables>(\n    ASSET_GRAPH_JOB_SIDEBAR,\n    {\n      variables: {pipelineSelector},\n    },\n  );\n\n  const {repositoryName, repositoryLocationName} = pipelineSelector;\n  const repoAddress = buildRepoAddress(repositoryName, repositoryLocationName);\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({pipelineSnapshotOrError}) => {\n        if (pipelineSnapshotOrError.__typename !== 'PipelineSnapshot') {\n          return (\n            <NonIdealPipelineQueryResult\n              isGraph\n              result={pipelineSnapshotOrError}\n              repoAddress={repoAddress}\n            />\n          );\n        }\n        return (\n          <SidebarContainerOverview container={pipelineSnapshotOrError} repoAddress={repoAddress} />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst ASSET_GRAPH_JOB_SIDEBAR = gql`\n  query AssetGraphSidebarQuery($pipelineSelector: PipelineSelector!) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        ...SidebarRootContainerFragment\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${SIDEBAR_ROOT_CONTAINER_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Colors, Group, Icon, Mono, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {isHiddenAssetGroupJob, LiveDataForNode} from '../asset-graph/Utils';\nimport {AssetKeyInput} from '../graphql/types';\nimport {MetadataEntry} from '../metadata/MetadataEntry';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {linkToRunEvent, titleForRun} from '../runs/RunUtils';\nimport {useStepLogs} from '../runs/StepLogsDialog';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {AssetLineageElements} from './AssetLineageElements';\nimport {StaleReasonsTags} from './Stale';\nimport {\n  AssetObservationFragment,\n  AssetMaterializationFragment,\n} from './types/useRecentAssetEvents.types';\n\nexport const LatestMaterializationMetadata: React.FC<{\n  assetKey: AssetKeyInput;\n  latest: AssetObservationFragment | AssetMaterializationFragment | undefined;\n  liveData: LiveDataForNode | undefined;\n}> = ({assetKey, latest, liveData}) => {\n  const latestRun = latest?.runOrError.__typename === 'Run' ? latest?.runOrError : null;\n  const repositoryOrigin = latestRun?.repositoryOrigin;\n  const repoAddress = repositoryOrigin\n    ? buildRepoAddress(repositoryOrigin.repositoryName, repositoryOrigin.repositoryLocationName)\n    : null;\n  const repo = useRepository(repoAddress);\n  const latestEvent = latest;\n  const latestAssetLineage =\n    latestEvent?.__typename === 'MaterializationEvent' ? latestEvent?.assetLineage : [];\n\n  const stepLogs = useStepLogs(\n    latestEvent?.stepKey\n      ? {runId: latestEvent.runId, stepKeys: [latestEvent.stepKey]}\n      : {runId: undefined, stepKeys: []},\n  );\n\n  return (\n    <>\n      {stepLogs.dialog}\n      {latestEvent ? (\n        <MetadataTable>\n          <tbody>\n            <tr>\n              <td>Run</td>\n              <td>\n                {latestRun ? (\n                  <div>\n                    <Box\n                      flex={{\n                        direction: 'row',\n                        justifyContent: 'space-between',\n                        gap: 8,\n                        alignItems: 'flex-start',\n                      }}\n                    >\n                      <Box>\n                        {'Run '}\n                        <Link to={`/runs/${latestEvent.runId}?timestamp=${latestEvent.timestamp}`}>\n                          <Mono>{titleForRun({id: latestEvent.runId})}</Mono>\n                        </Link>\n                      </Box>\n                      {stepLogs.button}\n                    </Box>\n                    {!isHiddenAssetGroupJob(latestRun.pipelineName) && (\n                      <>\n                        <Box padding={{left: 8, top: 4}}>\n                          <PipelineReference\n                            showIcon\n                            pipelineName={latestRun.pipelineName}\n                            pipelineHrefContext={repoAddress || 'repo-unknown'}\n                            snapshotId={latestRun.pipelineSnapshotId}\n                            isJob={isThisThingAJob(repo, latestRun.pipelineName)}\n                          />\n                        </Box>\n                        <Group direction=\"row\" padding={{left: 8}} spacing={8} alignItems=\"center\">\n                          <Icon name=\"linear_scale\" color={Colors.Gray400} />\n                          <Link to={linkToRunEvent(latestRun, latestEvent)}>\n                            {latestEvent.stepKey}\n                          </Link>\n                        </Group>\n                      </>\n                    )}\n                  </div>\n                ) : (\n                  'No materialization events'\n                )}\n              </td>\n            </tr>\n            {latest?.partition ? (\n              <tr>\n                <td>Partition</td>\n                <td>{latest ? latest.partition : 'No materialization events'}</td>\n              </tr>\n            ) : null}\n            <tr>\n              <td>Timestamp</td>\n              <td>\n                <Box flex={{gap: 8, alignItems: 'center'}}>\n                  {latestEvent ? (\n                    <Timestamp timestamp={{ms: Number(latestEvent.timestamp)}} />\n                  ) : (\n                    'No materialization events'\n                  )}\n                  {liveData && (\n                    <StaleReasonsTags assetKey={assetKey} liveData={liveData} include=\"all\" />\n                  )}\n                </Box>\n              </td>\n            </tr>\n            {latestAssetLineage?.length ? (\n              <tr>\n                <td>Parent assets</td>\n                <td>\n                  <AssetLineageElements\n                    elements={latestAssetLineage}\n                    timestamp={latestEvent.timestamp}\n                  />\n                </td>\n              </tr>\n            ) : null}\n            {latestEvent?.metadataEntries.map((entry) => (\n              <tr key={`metadata-${entry.label}`}>\n                <td>{entry.label}</td>\n                <td>\n                  <MetadataEntry\n                    entry={entry}\n                    expandSmallValues={true}\n                    repoLocation={repoAddress?.location}\n                  />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </MetadataTable>\n      ) : (\n        <Box padding={{top: 16, bottom: 32}}>\n          <NonIdealState\n            icon=\"materialization\"\n            title=\"No metadata\"\n            description=\"No metadata was found for this asset.\"\n          />\n        </Box>\n      )}\n    </>\n  );\n};\n\nconst MetadataTable = styled(Table)`\n  td:first-child {\n    white-space: nowrap;\n    width: 1px;\n    max-width: 400px;\n    word-break: break-word;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n","import {Body, Box, Colors, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {SidebarAssetFragment} from '../asset-graph/types/SidebarAssetInfo.types';\nimport {SidebarSection} from '../pipelines/SidebarComponents';\n\nimport {AssetEventSystemTags} from './AssetEventSystemTags';\nimport {AssetMaterializationGraphs} from './AssetMaterializationGraphs';\nimport {\n  AutomaterializePolicyTag,\n  automaterializePolicyDescription,\n} from './AutomaterializePolicyTag';\nimport {CurrentRunsBanner} from './CurrentRunsBanner';\nimport {FailedRunSinceMaterializationBanner} from './FailedRunSinceMaterializationBanner';\nimport {LatestMaterializationMetadata} from './LastMaterializationMetadata';\nimport {OverdueTag, freshnessPolicyDescription} from './OverdueTag';\nimport {useGroupedEvents} from './groupByPartition';\nimport {useRecentAssetEvents} from './useRecentAssetEvents';\n\ninterface Props {\n  asset: SidebarAssetFragment;\n  liveData?: LiveDataForNode;\n  isSourceAsset: boolean;\n  stepKey: string;\n\n  // This timestamp is a \"hint\", when it changes this component will refetch\n  // to retrieve new data. Just don't want to poll the entire table query.\n  assetLastMaterializedAt: string | undefined;\n}\n\nexport const AssetSidebarActivitySummary: React.FC<Props> = ({\n  asset,\n  assetLastMaterializedAt,\n  isSourceAsset,\n  liveData,\n  stepKey,\n}) => {\n  const {\n    materializations,\n    observations,\n    loadedPartitionKeys,\n    loading,\n    refetch,\n    xAxis,\n  } = useRecentAssetEvents(\n    asset.assetKey,\n    {},\n    {assetHasDefinedPartitions: !!asset.partitionDefinition},\n  );\n\n  const grouped = useGroupedEvents(xAxis, materializations, observations, loadedPartitionKeys);\n  const displayedEvent = isSourceAsset ? observations[0] : materializations[0];\n\n  React.useEffect(() => {\n    refetch();\n  }, [assetLastMaterializedAt, refetch]);\n\n  return (\n    <>\n      {!asset.partitionDefinition && (\n        <>\n          <FailedRunSinceMaterializationBanner\n            stepKey={stepKey}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n            run={liveData?.runWhichFailedToMaterialize || null}\n          />\n          <CurrentRunsBanner\n            stepKey={stepKey}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n            liveData={liveData}\n          />\n        </>\n      )}\n\n      {asset.freshnessPolicy && (\n        <SidebarSection title=\"Freshness policy\">\n          <Box margin={{horizontal: 24, vertical: 12}} flex={{gap: 12, alignItems: 'flex-start'}}>\n            <Body style={{flex: 1}}>{freshnessPolicyDescription(asset.freshnessPolicy)}</Body>\n            <OverdueTag\n              liveData={liveData}\n              policy={asset.freshnessPolicy}\n              assetKey={asset.assetKey}\n            />\n          </Box>\n        </SidebarSection>\n      )}\n\n      {asset.autoMaterializePolicy && (\n        <SidebarSection title=\"Auto-materialize policy\">\n          <Box margin={{horizontal: 24, vertical: 12}} flex={{gap: 12, alignItems: 'flex-start'}}>\n            <Body style={{flex: 1}}>\n              {automaterializePolicyDescription(asset.autoMaterializePolicy)}\n            </Body>\n            <AutomaterializePolicyTag policy={asset.autoMaterializePolicy} />\n          </Box>\n        </SidebarSection>\n      )}\n\n      {loadedPartitionKeys.length > 1 ? null : (\n        <>\n          <SidebarSection\n            title={!isSourceAsset ? 'Materialization in last run' : 'Observation in last run'}\n          >\n            {displayedEvent ? (\n              <div style={{margin: -1, maxWidth: '100%', overflowX: 'auto'}}>\n                <LatestMaterializationMetadata\n                  assetKey={asset.assetKey}\n                  latest={displayedEvent}\n                  liveData={liveData}\n                />\n              </div>\n            ) : loading ? (\n              <Box padding={{vertical: 20}}>\n                <Spinner purpose=\"section\" />\n              </Box>\n            ) : (\n              <Box\n                margin={{horizontal: 24, vertical: 12}}\n                style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n              >\n                {!isSourceAsset ? `No materializations found` : `No observations found`}\n              </Box>\n            )}\n          </SidebarSection>\n          <SidebarSection\n            title={!isSourceAsset ? 'Materialization system tags' : 'Observation system tags'}\n            collapsedByDefault\n          >\n            {displayedEvent ? (\n              <div style={{margin: -1, maxWidth: '100%', overflowX: 'auto'}}>\n                <AssetEventSystemTags event={displayedEvent} paddingLeft={24} />\n              </div>\n            ) : loading ? (\n              <Box padding={{vertical: 20}}>\n                <Spinner purpose=\"section\" />\n              </Box>\n            ) : (\n              <Box\n                margin={{horizontal: 24, vertical: 12}}\n                style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n              >\n                {!isSourceAsset ? `No materializations found` : `No observations found`}\n              </Box>\n            )}\n          </SidebarSection>\n        </>\n      )}\n      <SidebarSection title=\"Metadata plots\">\n        <AssetMaterializationGraphs\n          xAxis={xAxis}\n          asSidebarSection\n          groups={grouped}\n          columnCount={1}\n        />\n      </SidebarSection>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, ConfigTypeSchema, Icon, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {ASSET_NODE_CONFIG_FRAGMENT} from '../assets/AssetConfig';\nimport {AssetDefinedInMultipleReposNotice} from '../assets/AssetDefinedInMultipleReposNotice';\nimport {\n  AssetMetadataTable,\n  ASSET_NODE_OP_METADATA_FRAGMENT,\n  metadataForAssetNode,\n} from '../assets/AssetMetadata';\nimport {AssetSidebarActivitySummary} from '../assets/AssetSidebarActivitySummary';\nimport {DependsOnSelfBanner} from '../assets/DependsOnSelfBanner';\nimport {PartitionHealthSummary} from '../assets/PartitionHealthSummary';\nimport {UnderlyingOpsOrGraph} from '../assets/UnderlyingOpsOrGraph';\nimport {Version} from '../assets/Version';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {\n  healthRefreshHintFromLiveData,\n  usePartitionHealthData,\n} from '../assets/usePartitionHealthData';\nimport {DagsterTypeSummary} from '../dagstertype/DagsterType';\nimport {DagsterTypeFragment} from '../dagstertype/types/DagsterType.types';\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {Description} from '../pipelines/Description';\nimport {SidebarSection, SidebarTitle} from '../pipelines/SidebarComponents';\nimport {ResourceContainer, ResourceHeader} from '../pipelines/SidebarOpHelpers';\nimport {pluginForMetadata} from '../plugins';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {\n  LiveDataForNode,\n  displayNameForAssetKey,\n  GraphNode,\n  nodeDependsOnSelf,\n  stepKeyForAsset,\n} from './Utils';\nimport {SidebarAssetQuery, SidebarAssetQueryVariables} from './types/SidebarAssetInfo.types';\nimport {AssetNodeForGraphQueryFragment} from './types/useAssetGraphData.types';\n\nexport const SidebarAssetInfo: React.FC<{\n  graphNode: GraphNode;\n  liveData?: LiveDataForNode;\n}> = ({graphNode, liveData}) => {\n  const {assetKey, definition} = graphNode;\n  const partitionHealthRefreshHint = healthRefreshHintFromLiveData(liveData);\n  const partitionHealthData = usePartitionHealthData(\n    [assetKey],\n    partitionHealthRefreshHint,\n    'background',\n  );\n  const {data} = useQuery<SidebarAssetQuery, SidebarAssetQueryVariables>(SIDEBAR_ASSET_QUERY, {\n    variables: {assetKey: {path: assetKey.path}},\n  });\n\n  const {lastMaterialization} = liveData || {};\n  const asset = data?.assetNodeOrError.__typename === 'AssetNode' ? data.assetNodeOrError : null;\n  if (!asset) {\n    return (\n      <>\n        <Header assetNode={definition} repoAddress={null} />\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  const repoAddress = buildRepoAddress(asset.repository.name, asset.repository.location.name);\n  const {assetMetadata, assetType} = metadataForAssetNode(asset);\n  const hasAssetMetadata = assetType || assetMetadata.length > 0;\n  const assetConfigSchema = asset.configField?.configType;\n\n  const OpMetadataPlugin = asset.op?.metadata && pluginForMetadata(asset.op.metadata);\n\n  return (\n    <>\n      <Header assetNode={definition} repoAddress={repoAddress} />\n\n      <AssetDefinedInMultipleReposNotice\n        assetKey={assetKey}\n        loadedFromRepo={repoAddress}\n        padded={false}\n      />\n\n      {(asset.description || OpMetadataPlugin?.SidebarComponent || !hasAssetMetadata) && (\n        <SidebarSection title=\"Description\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <Description description={asset.description || 'No description provided'} />\n          </Box>\n          {asset.op && OpMetadataPlugin?.SidebarComponent && (\n            <Box padding={{bottom: 16, horizontal: 24}}>\n              <OpMetadataPlugin.SidebarComponent definition={asset.op} repoAddress={repoAddress} />\n            </Box>\n          )}\n        </SidebarSection>\n      )}\n\n      <AssetSidebarActivitySummary\n        asset={asset}\n        assetLastMaterializedAt={lastMaterialization?.timestamp}\n        isSourceAsset={definition.isSource}\n        stepKey={stepKeyForAsset(definition)}\n        liveData={liveData}\n      />\n\n      <div style={{borderBottom: `2px solid ${Colors.Gray300}`}} />\n\n      {nodeDependsOnSelf(graphNode) && <DependsOnSelfBanner />}\n\n      {asset.opVersion && (\n        <SidebarSection title=\"Code Version\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <Version>{asset.opVersion}</Version>\n          </Box>\n        </SidebarSection>\n      )}\n\n      {assetConfigSchema && (\n        <SidebarSection title=\"Config\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <ConfigTypeSchema\n              type={assetConfigSchema}\n              typesInScope={assetConfigSchema.recursiveConfigTypes}\n            />\n          </Box>\n        </SidebarSection>\n      )}\n\n      {asset.requiredResources.length > 0 && (\n        <SidebarSection title=\"Required Resources\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            {asset.requiredResources.map((resource) => (\n              <ResourceContainer key={resource.resourceKey}>\n                <Icon name=\"resource\" color={Colors.Gray700} />\n                {repoAddress ? (\n                  <Link\n                    to={workspacePathFromAddress(repoAddress, `/resources/${resource.resourceKey}`)}\n                  >\n                    <ResourceHeader>{resource.resourceKey}</ResourceHeader>\n                  </Link>\n                ) : (\n                  <ResourceHeader>{resource.resourceKey}</ResourceHeader>\n                )}\n              </ResourceContainer>\n            ))}\n          </Box>\n        </SidebarSection>\n      )}\n\n      {assetMetadata.length > 0 && (\n        <SidebarSection title=\"Metadata\">\n          <AssetMetadataTable assetMetadata={assetMetadata} repoLocation={repoAddress?.location} />\n        </SidebarSection>\n      )}\n\n      {assetType && <TypeSidebarSection assetType={assetType} />}\n\n      {asset.partitionDefinition && (\n        <SidebarSection title=\"Partitions\">\n          <Box padding={{vertical: 16, horizontal: 24}} flex={{direction: 'column', gap: 16}}>\n            <p>{asset.partitionDefinition.description}</p>\n            <PartitionHealthSummary assetKey={asset.assetKey} data={partitionHealthData} />\n          </Box>\n        </SidebarSection>\n      )}\n    </>\n  );\n};\n\nconst TypeSidebarSection: React.FC<{\n  assetType: DagsterTypeFragment;\n}> = ({assetType}) => {\n  return (\n    <SidebarSection title=\"Type\">\n      <DagsterTypeSummary type={assetType} />\n    </SidebarSection>\n  );\n};\n\nconst Header: React.FC<{\n  assetNode: AssetNodeForGraphQueryFragment;\n  opName?: string;\n  repoAddress?: RepoAddress | null;\n}> = ({assetNode, repoAddress}) => {\n  const displayName = displayNameForAssetKey(assetNode.assetKey);\n\n  return (\n    <Box flex={{gap: 4, direction: 'column'}} margin={{left: 24, right: 12, vertical: 16}}>\n      <SidebarTitle\n        style={{\n          marginBottom: 0,\n          display: 'flex',\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n        }}\n      >\n        <Box>{displayName}</Box>\n      </SidebarTitle>\n      <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n        <AssetCatalogLink to={assetDetailsPathForKey(assetNode.assetKey)}>\n          {'View in Asset Catalog '}\n          <Icon name=\"open_in_new\" color={Colors.Link} />\n        </AssetCatalogLink>\n\n        {repoAddress && (\n          <UnderlyingOpsOrGraph assetNode={assetNode} repoAddress={repoAddress} minimal />\n        )}\n      </Box>\n    </Box>\n  );\n};\nconst AssetCatalogLink = styled(Link)`\n  display: flex;\n  gap: 5px;\n  padding: 6px;\n  margin: -6px;\n  align-items: center;\n  white-space: nowrap;\n`;\n\nconst SIDEBAR_ASSET_FRAGMENT = gql`\n  fragment SidebarAssetFragment on AssetNode {\n    id\n    description\n    ...AssetNodeConfigFragment\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    freshnessPolicy {\n      maximumLagMinutes\n      cronSchedule\n      cronScheduleTimezone\n    }\n    autoMaterializePolicy {\n      policyType\n    }\n    partitionDefinition {\n      description\n    }\n    assetKey {\n      path\n    }\n    op {\n      name\n      description\n      metadata {\n        key\n        value\n      }\n    }\n    opVersion\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n    requiredResources {\n      resourceKey\n    }\n\n    ...AssetNodeOpMetadataFragment\n  }\n\n  ${ASSET_NODE_CONFIG_FRAGMENT}\n  ${METADATA_ENTRY_FRAGMENT}\n  ${ASSET_NODE_OP_METADATA_FRAGMENT}\n`;\n\nexport const SIDEBAR_ASSET_QUERY = gql`\n  query SidebarAssetQuery($assetKey: AssetKeyInput!) {\n    assetNodeOrError(assetKey: $assetKey) {\n      ... on AssetNode {\n        id\n        ...SidebarAssetFragment\n      }\n    }\n  }\n\n  ${SIDEBAR_ASSET_FRAGMENT}\n`;\n","import {gql, useApolloClient} from '@apollo/client';\nimport React from 'react';\n\nimport {AssetKey} from '../assets/types';\nimport {AssetKeyInput} from '../graphql/types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {RepoAddress} from '../workspace/types';\n\nimport {isHiddenAssetGroupJob} from './Utils';\nimport {\n  AssetForNavigationQuery,\n  AssetForNavigationQueryVariables,\n} from './types/useFindAssetLocation.types';\n\nexport interface AssetLocation {\n  assetKey: AssetKey;\n  opNames: string[];\n  jobName: string | null;\n  groupName: string | null;\n  repoAddress: RepoAddress | null;\n}\n\nexport function useFindAssetLocation() {\n  const apollo = useApolloClient();\n\n  return React.useCallback(\n    async (key: AssetKeyInput): Promise<AssetLocation> => {\n      const {data} = await apollo.query<AssetForNavigationQuery, AssetForNavigationQueryVariables>({\n        query: ASSET_FOR_NAVIGATION_QUERY,\n        variables: {key},\n      });\n      if (data?.assetOrError.__typename === 'Asset' && data?.assetOrError.definition) {\n        const def = data.assetOrError.definition;\n        return {\n          assetKey: key,\n          opNames: def.opNames,\n          jobName: def.jobNames.find((jobName) => !isHiddenAssetGroupJob(jobName)) || null,\n          groupName: def.groupName,\n          repoAddress: def.repository\n            ? buildRepoAddress(def.repository.name, def.repository.location.name)\n            : null,\n        };\n      }\n      return {assetKey: key, opNames: [], jobName: null, groupName: null, repoAddress: null};\n    },\n    [apollo],\n  );\n}\n\nconst ASSET_FOR_NAVIGATION_QUERY = gql`\n  query AssetForNavigationQuery($key: AssetKeyInput!) {\n    assetOrError(assetKey: $key) {\n      ... on Asset {\n        id\n        definition {\n          id\n          opNames\n          jobNames\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {\n  Box,\n  Checkbox,\n  Colors,\n  NonIdealState,\n  SplitPanelContainer,\n  ErrorBoundary,\n} from '@dagster-io/ui';\nimport pickBy from 'lodash/pickBy';\nimport uniq from 'lodash/uniq';\nimport without from 'lodash/without';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {LaunchAssetExecutionButton} from '../assets/LaunchAssetExecutionButton';\nimport {LaunchAssetObservationButton} from '../assets/LaunchAssetObservationButton';\nimport {AssetKey} from '../assets/types';\nimport {SVGViewport} from '../graph/SVGViewport';\nimport {useAssetLayout} from '../graph/asyncGraphLayout';\nimport {closestNodeInDirection} from '../graph/common';\nimport {\n  GraphExplorerOptions,\n  OptionsOverlay,\n  QueryOverlay,\n  RightInfoPanel,\n  RightInfoPanelContent,\n} from '../pipelines/GraphExplorer';\nimport {\n  EmptyDAGNotice,\n  EntirelyFilteredDAGNotice,\n  LargeDAGNotice,\n  LoadingNotice,\n} from '../pipelines/GraphNotices';\nimport {ExplorerPath} from '../pipelines/PipelinePathUtils';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {Loading} from '../ui/Loading';\n\nimport {AssetEdges} from './AssetEdges';\nimport {AssetGraphJobSidebar} from './AssetGraphJobSidebar';\nimport {AssetGroupNode} from './AssetGroupNode';\nimport {AssetNode, AssetNodeMinimal} from './AssetNode';\nimport {AssetNodeLink} from './ForeignNode';\nimport {SidebarAssetInfo} from './SidebarAssetInfo';\nimport {GraphData, graphHasCycles, LiveData, GraphNode, tokenForAssetKey} from './Utils';\nimport {AssetGraphLayout} from './layout';\nimport {AssetNodeForGraphQueryFragment} from './types/useAssetGraphData.types';\nimport {AssetGraphFetchScope, AssetGraphQueryItem, useAssetGraphData} from './useAssetGraphData';\nimport {AssetLocation, useFindAssetLocation} from './useFindAssetLocation';\nimport {useLiveDataForAssetKeys} from './useLiveDataForAssetKeys';\n\ntype AssetNode = AssetNodeForGraphQueryFragment;\n\ninterface Props {\n  options: GraphExplorerOptions;\n  setOptions?: (options: GraphExplorerOptions) => void;\n\n  fetchOptions: AssetGraphFetchScope;\n  fetchOptionFilters?: React.ReactNode;\n\n  explorerPath: ExplorerPath;\n  onChangeExplorerPath: (path: ExplorerPath, mode: 'replace' | 'push') => void;\n  onNavigateToSourceAssetNode: (node: AssetLocation) => void;\n}\n\nexport const MINIMAL_SCALE = 0.6;\nexport const GROUPS_ONLY_SCALE = 0.15;\n\nexport const AssetGraphExplorer: React.FC<Props> = (props) => {\n  const {\n    fetchResult,\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  } = useAssetGraphData(props.explorerPath.opsQuery, props.fetchOptions);\n\n  const {liveDataByNode, liveDataRefreshState} = useLiveDataForAssetKeys(graphAssetKeys);\n\n  return (\n    <Loading allowStaleData queryResult={fetchResult}>\n      {() => {\n        if (!assetGraphData || !allAssetKeys) {\n          return <NonIdealState icon=\"error\" title=\"Query Error\" />;\n        }\n\n        const hasCycles = graphHasCycles(assetGraphData);\n\n        if (hasCycles) {\n          return (\n            <NonIdealState\n              icon=\"error\"\n              title=\"Cycle detected\"\n              description=\"Assets dependencies form a cycle\"\n            />\n          );\n        }\n        return (\n          <AssetGraphExplorerWithData\n            key={props.explorerPath.pipelineName}\n            assetGraphData={assetGraphData}\n            allAssetKeys={allAssetKeys}\n            graphQueryItems={graphQueryItems}\n            applyingEmptyDefault={applyingEmptyDefault}\n            liveDataRefreshState={liveDataRefreshState}\n            liveDataByNode={liveDataByNode}\n            {...props}\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\ntype WithDataProps = {\n  allAssetKeys: AssetKey[];\n  assetGraphData: GraphData;\n  graphQueryItems: AssetGraphQueryItem[];\n  liveDataByNode: LiveData;\n  liveDataRefreshState: QueryRefreshState;\n  applyingEmptyDefault: boolean;\n} & Props;\n\nconst AssetGraphExplorerWithData: React.FC<WithDataProps> = ({\n  options,\n  setOptions,\n  explorerPath,\n  onChangeExplorerPath,\n  onNavigateToSourceAssetNode: onNavigateToSourceAssetNode,\n  liveDataRefreshState,\n  liveDataByNode,\n  assetGraphData,\n  graphQueryItems,\n  applyingEmptyDefault,\n  fetchOptions,\n  fetchOptionFilters,\n}) => {\n  const findAssetLocation = useFindAssetLocation();\n  const {layout, loading, async} = useAssetLayout(assetGraphData);\n  const viewportEl = React.useRef<SVGViewport>();\n  const {flagHorizontalDAGs} = useFeatureFlags();\n\n  const [highlighted, setHighlighted] = React.useState<string | null>(null);\n\n  const selectedAssetValues = explorerPath.opNames[explorerPath.opNames.length - 1]!.split(',');\n  const selectedGraphNodes = Object.values(assetGraphData.nodes).filter((node) =>\n    selectedAssetValues.includes(tokenForAssetKey(node.definition.assetKey)),\n  );\n  const lastSelectedNode = selectedGraphNodes[selectedGraphNodes.length - 1]!;\n\n  const selectedDefinitions = selectedGraphNodes.map((a) => a.definition);\n  const allDefinitionsForMaterialize = applyingEmptyDefault\n    ? graphQueryItems.map((a) => a.node)\n    : Object.values(assetGraphData.nodes).map((a) => a.definition);\n\n  const onSelectNode = React.useCallback(\n    async (\n      e: React.MouseEvent<any> | React.KeyboardEvent<any>,\n      assetKey: {path: string[]},\n      node: GraphNode | null,\n    ) => {\n      e.stopPropagation();\n\n      const token = tokenForAssetKey(assetKey);\n      const nodeIsInDisplayedGraph = node?.definition;\n\n      if (!nodeIsInDisplayedGraph) {\n        // The asset's definition was not provided in our query for job.assetNodes. It's either\n        // in another job or asset group, or is a source asset not defined in any repository.\n        return onNavigateToSourceAssetNode(await findAssetLocation(assetKey));\n      }\n\n      // This asset is in a job and we can stay in the job graph explorer!\n      // If it's in our current job, allow shift / meta multi-selection.\n      let nextOpsNameSelection = token;\n\n      if (e.shiftKey || e.metaKey) {\n        // Meta key adds the node you clicked to your existing selection\n        let tokensToAdd = [token];\n\n        // Shift key adds the nodes between the node you clicked and your existing selection.\n        // To better support clicking a bunch of leaves and extending selection, we try to reach\n        // the new node from each node in your current selection until we find a path.\n        if (e.shiftKey && selectedGraphNodes.length && node) {\n          const reversed = [...selectedGraphNodes].reverse();\n          for (const from of reversed) {\n            const tokensInRange = assetKeyTokensInRange({from, to: node, graph: assetGraphData});\n            if (tokensInRange.length) {\n              tokensToAdd = tokensInRange;\n              break;\n            }\n          }\n        }\n\n        const existing = explorerPath.opNames[0]!.split(',');\n        nextOpsNameSelection = (existing.includes(token)\n          ? without(existing, token)\n          : uniq([...existing, ...tokensToAdd])\n        ).join(',');\n      }\n\n      const nextCenter = layout?.nodes[nextOpsNameSelection[nextOpsNameSelection.length - 1]!];\n      if (nextCenter) {\n        viewportEl.current?.zoomToSVGCoords(nextCenter.bounds.x, nextCenter.bounds.y, true);\n      }\n\n      onChangeExplorerPath(\n        {\n          ...explorerPath,\n          opNames: [nextOpsNameSelection],\n          opsQuery: nodeIsInDisplayedGraph\n            ? explorerPath.opsQuery\n            : `${explorerPath.opsQuery},++\"${token}\"++`,\n          pipelineName: explorerPath.pipelineName,\n        },\n        'replace',\n      );\n    },\n    [\n      explorerPath,\n      onChangeExplorerPath,\n      onNavigateToSourceAssetNode,\n      findAssetLocation,\n      selectedGraphNodes,\n      assetGraphData,\n      layout,\n    ],\n  );\n\n  const [lastRenderedLayout, setLastRenderedLayout] = React.useState<AssetGraphLayout | null>(null);\n  const renderingNewLayout = lastRenderedLayout !== layout;\n\n  React.useEffect(() => {\n    if (!renderingNewLayout || !layout || !viewportEl.current) {\n      return;\n    }\n    // The first render where we have our layout and viewport, autocenter or\n    // focus on the selected node. (If selection was specified in the URL).\n    // Don't animate this change.\n    if (lastSelectedNode) {\n      // viewportEl.current.zoomToSVGBox(layout.nodes[lastSelectedNode.id].bounds, false);\n      viewportEl.current.focus();\n    } else {\n      viewportEl.current.autocenter(false);\n    }\n    setLastRenderedLayout(layout);\n  }, [renderingNewLayout, lastSelectedNode, layout, viewportEl]);\n\n  const onClickBackground = () =>\n    onChangeExplorerPath(\n      {...explorerPath, pipelineName: explorerPath.pipelineName, opNames: []},\n      'replace',\n    );\n\n  const onArrowKeyDown = (e: React.KeyboardEvent<any>, dir: string) => {\n    if (!layout) {\n      return;\n    }\n    const hasDefinition = (node: {id: string}) => !!assetGraphData.nodes[node.id]?.definition;\n    const layoutWithoutExternalLinks = {...layout, nodes: pickBy(layout.nodes, hasDefinition)};\n\n    const nextId = closestNodeInDirection(layoutWithoutExternalLinks, lastSelectedNode.id, dir);\n    const node = nextId && assetGraphData.nodes[nextId];\n    if (node && viewportEl.current) {\n      onSelectNode(e, node.assetKey, node);\n      viewportEl.current.zoomToSVGBox(layout.nodes[nextId]!.bounds, true);\n    }\n  };\n\n  const allowGroupsOnlyZoomLevel = !!(layout && Object.keys(layout.groups).length);\n\n  return (\n    <SplitPanelContainer\n      identifier=\"explorer\"\n      firstInitialPercent={70}\n      firstMinSize={400}\n      first={\n        <ErrorBoundary region=\"graph\">\n          {graphQueryItems.length === 0 ? (\n            <EmptyDAGNotice nodeType=\"asset\" isGraph />\n          ) : applyingEmptyDefault ? (\n            <LargeDAGNotice nodeType=\"asset\" />\n          ) : Object.keys(assetGraphData.nodes).length === 0 ? (\n            <EntirelyFilteredDAGNotice nodeType=\"asset\" />\n          ) : undefined}\n          {loading || !layout ? (\n            <LoadingNotice async={async} nodeType=\"asset\" />\n          ) : (\n            <SVGViewport\n              ref={(r) => (viewportEl.current = r || undefined)}\n              defaultZoom={flagHorizontalDAGs ? 'zoom-to-fit-width' : 'zoom-to-fit'}\n              interactor={SVGViewport.Interactors.PanAndZoom}\n              graphWidth={layout.width}\n              graphHeight={layout.height}\n              graphHasNoMinimumZoom={allowGroupsOnlyZoomLevel}\n              onClick={onClickBackground}\n              onArrowKeyDown={onArrowKeyDown}\n              onDoubleClick={(e) => {\n                viewportEl.current?.autocenter(true);\n                e.stopPropagation();\n              }}\n              maxZoom={1.2}\n              maxAutocenterZoom={1.0}\n            >\n              {({scale}) => (\n                <SVGContainer width={layout.width} height={layout.height}>\n                  <AssetEdges\n                    highlighted={highlighted}\n                    edges={layout.edges}\n                    strokeWidth={allowGroupsOnlyZoomLevel ? Math.max(4, 3 / scale) : 4}\n                    baseColor={\n                      allowGroupsOnlyZoomLevel && scale < GROUPS_ONLY_SCALE\n                        ? Colors.Gray400\n                        : Colors.KeylineGray\n                    }\n                  />\n\n                  {Object.values(layout.groups)\n                    .sort((a, b) => a.id.length - b.id.length)\n                    .map((group) => (\n                      <foreignObject\n                        key={group.id}\n                        {...group.bounds}\n                        onDoubleClick={(e) => {\n                          if (!viewportEl.current) {\n                            return;\n                          }\n                          const targetScale = viewportEl.current.scaleForSVGBounds(\n                            group.bounds.width,\n                            group.bounds.height,\n                          );\n                          viewportEl.current.zoomToSVGBox(group.bounds, true, targetScale * 0.9);\n                          e.stopPropagation();\n                        }}\n                      >\n                        <AssetGroupNode group={group} scale={scale} />\n                      </foreignObject>\n                    ))}\n\n                  {Object.values(layout.nodes).map(({id, bounds}) => {\n                    const graphNode = assetGraphData.nodes[id]!;\n                    const path = JSON.parse(id);\n                    if (allowGroupsOnlyZoomLevel && scale < GROUPS_ONLY_SCALE) {\n                      return;\n                    }\n                    return (\n                      <foreignObject\n                        {...bounds}\n                        key={id}\n                        onMouseEnter={() => setHighlighted(id)}\n                        onMouseLeave={() => setHighlighted(null)}\n                        onClick={(e) => onSelectNode(e, {path}, graphNode)}\n                        onDoubleClick={(e) => {\n                          viewportEl.current?.zoomToSVGBox(bounds, true, 1.2);\n                          e.stopPropagation();\n                        }}\n                        style={{overflow: 'visible'}}\n                      >\n                        {!graphNode ? (\n                          <AssetNodeLink assetKey={{path}} />\n                        ) : scale < MINIMAL_SCALE ? (\n                          <AssetNodeMinimal\n                            definition={graphNode.definition}\n                            liveData={liveDataByNode[graphNode.id]}\n                            selected={selectedGraphNodes.includes(graphNode)}\n                          />\n                        ) : (\n                          <AssetNode\n                            definition={graphNode.definition}\n                            liveData={liveDataByNode[graphNode.id]}\n                            selected={selectedGraphNodes.includes(graphNode)}\n                          />\n                        )}\n                      </foreignObject>\n                    );\n                  })}\n                </SVGContainer>\n              )}\n            </SVGViewport>\n          )}\n          {setOptions && (\n            <OptionsOverlay>\n              <Checkbox\n                format=\"switch\"\n                label=\"View as Asset Graph\"\n                checked={options.preferAssetRendering}\n                onChange={() => {\n                  onChangeExplorerPath(\n                    {...explorerPath, opNames: selectedDefinitions[0]?.opNames || []},\n                    'replace',\n                  );\n                  setOptions({\n                    ...options,\n                    preferAssetRendering: !options.preferAssetRendering,\n                  });\n                }}\n              />\n            </OptionsOverlay>\n          )}\n\n          <Box\n            flex={{direction: 'column', alignItems: 'flex-end', gap: 8}}\n            style={{position: 'absolute', right: 12, top: 8}}\n          >\n            <Box flex={{alignItems: 'center', gap: 12}}>\n              <QueryRefreshCountdown\n                refreshState={liveDataRefreshState}\n                dataDescription=\"materializations\"\n              />\n              <LaunchAssetObservationButton\n                preferredJobName={explorerPath.pipelineName}\n                scope={\n                  selectedDefinitions.length\n                    ? {selected: selectedDefinitions.filter((a) => a.isObservable)}\n                    : {all: allDefinitionsForMaterialize.filter((a) => a.isObservable)}\n                }\n              />\n              <LaunchAssetExecutionButton\n                preferredJobName={explorerPath.pipelineName}\n                liveDataForStale={liveDataByNode}\n                scope={\n                  selectedDefinitions.length\n                    ? {selected: selectedDefinitions}\n                    : {all: allDefinitionsForMaterialize}\n                }\n              />\n            </Box>\n          </Box>\n          <QueryOverlay>\n            {fetchOptionFilters}\n\n            <GraphQueryInput\n              items={graphQueryItems}\n              value={explorerPath.opsQuery}\n              placeholder=\"Type an asset subset…\"\n              onChange={(opsQuery) => onChangeExplorerPath({...explorerPath, opsQuery}, 'replace')}\n              popoverPosition=\"bottom-left\"\n            />\n          </QueryOverlay>\n        </ErrorBoundary>\n      }\n      second={\n        selectedGraphNodes.length === 1 && selectedGraphNodes[0] ? (\n          <RightInfoPanel>\n            <RightInfoPanelContent>\n              <ErrorBoundary region=\"asset sidebar\" resetErrorOnChange={[selectedGraphNodes[0].id]}>\n                <SidebarAssetInfo\n                  graphNode={selectedGraphNodes[0]}\n                  liveData={liveDataByNode[selectedGraphNodes[0].id]}\n                />\n              </ErrorBoundary>\n            </RightInfoPanelContent>\n          </RightInfoPanel>\n        ) : fetchOptions.pipelineSelector ? (\n          <RightInfoPanel>\n            <RightInfoPanelContent>\n              <ErrorBoundary region=\"asset job sidebar\">\n                <AssetGraphJobSidebar pipelineSelector={fetchOptions.pipelineSelector} />\n              </ErrorBoundary>\n            </RightInfoPanelContent>\n          </RightInfoPanel>\n        ) : null\n      }\n    />\n  );\n};\n\nconst SVGContainer = styled.svg`\n  overflow: visible;\n  border-radius: 0;\n`;\n\n// Helpers\n\nconst graphDirectionOf = ({\n  graph,\n  from,\n  to,\n}: {\n  graph: GraphData;\n  from: GraphNode;\n  to: GraphNode;\n}) => {\n  const stack = [from];\n  while (stack.length) {\n    const node = stack.pop()!;\n\n    const downstream = [...Object.keys(graph.downstream[node.id] || {})]\n      .map((n) => graph.nodes[n]!)\n      .filter(Boolean);\n    if (downstream.some((d) => d.id === to.id)) {\n      return 'downstream';\n    }\n    stack.push(...downstream);\n  }\n  return 'upstream';\n};\n\nconst assetKeyTokensInRange = (\n  {graph, from, to}: {graph: GraphData; from: GraphNode; to: GraphNode},\n  seen: string[] = [],\n) => {\n  if (!from) {\n    return [];\n  }\n  if (from.id === to.id) {\n    return [tokenForAssetKey(to.definition.assetKey)];\n  }\n\n  if (seen.length === 0 && graphDirectionOf({graph, from, to}) === 'upstream') {\n    [from, to] = [to, from];\n  }\n\n  const downstream = [...Object.keys(graph.downstream[from.id] || {})]\n    .map((n) => graph.nodes[n]!)\n    .filter(Boolean);\n\n  const ledToTarget: string[] = [];\n\n  for (const node of downstream) {\n    if (seen.includes(node.id)) {\n      continue;\n    }\n    const result: string[] = assetKeyTokensInRange({graph, from: node, to}, [...seen, from.id]);\n    if (result.length) {\n      ledToTarget.push(tokenForAssetKey(from.definition.assetKey), ...result);\n    }\n  }\n\n  return uniq(ledToTarget);\n};\n","import {Box, Colors, FontFamily, Icon, Mono} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {withMiddleTruncation} from '../app/Util';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\nimport {workspacePath} from '../workspace/workspacePath';\n\nimport {MINIMAL_SCALE, GROUPS_ONLY_SCALE} from './AssetGraphExplorer';\nimport {GroupLayout} from './layout';\n\nexport const AssetGroupNode: React.FC<{group: GroupLayout; scale: number}> = ({group, scale}) => {\n  const {\n    repositoryLocationName,\n    repositoryDisambiguationRequired,\n    repositoryName,\n    groupName,\n  } = group;\n\n  return (\n    <div style={{position: 'relative', width: '100%', height: '100%'}}>\n      {scale > GROUPS_ONLY_SCALE && (\n        <Box flex={{alignItems: 'flex-end'}} style={{height: 70}}>\n          <Mono\n            style={{\n              fontWeight: 600,\n              userSelect: 'none',\n              fontSize: scale > MINIMAL_SCALE ? '16px' : '32px',\n              display: 'flex',\n              gap: 6,\n            }}\n          >\n            <Icon\n              name=\"asset_group\"\n              color={Colors.Gray400}\n              size={scale > MINIMAL_SCALE ? 20 : 48}\n            />\n            <Box flex={{direction: 'column'}}>\n              <Link\n                style={{color: Colors.Gray400}}\n                onClick={(e) => e.stopPropagation()}\n                to={workspacePath(\n                  repositoryName,\n                  repositoryLocationName,\n                  `/asset-groups/${groupName}`,\n                )}\n              >\n                {groupName}\n              </Link>\n              {repositoryDisambiguationRequired && (\n                <GroupRepoName style={{marginBottom: '0.5em'}}>\n                  {withMiddleTruncation(\n                    buildRepoPathForHuman(repositoryName, repositoryLocationName),\n                    {\n                      maxLength: 45,\n                    },\n                  )}\n                </GroupRepoName>\n              )}\n            </Box>\n          </Mono>\n        </Box>\n      )}\n\n      <GroupOutline\n        style={{\n          inset: 0,\n          top: 75,\n          position: 'absolute',\n          background:\n            scale < GROUPS_ONLY_SCALE ? `rgba(234, 234, 234, 1)` : `rgba(217, 217, 217, 0.25)`,\n        }}\n      />\n\n      {scale < GROUPS_ONLY_SCALE ? (\n        <Box\n          flex={{justifyContent: 'center', alignItems: 'center'}}\n          style={{inset: 0, position: 'absolute', fontSize: `${12 / scale}px`, userSelect: 'none'}}\n        >\n          <Box\n            flex={{direction: 'column', alignItems: 'center'}}\n            style={{fontWeight: 600, fontFamily: FontFamily.monospace}}\n          >\n            {groupName}\n            {repositoryDisambiguationRequired && (\n              <GroupRepoName>\n                {withMiddleTruncation(\n                  buildRepoPathForHuman(repositoryName, repositoryLocationName),\n                  {\n                    maxLength: 45,\n                  },\n                )}\n              </GroupRepoName>\n            )}\n          </Box>\n        </Box>\n      ) : undefined}\n    </div>\n  );\n};\n\nconst GroupOutline = styled.div`\n  width: 100%;\n  border-radius: 10px;\n  pointer-events: none;\n`;\n\nconst GroupRepoName = styled.div`\n  font-size: 0.8em;\n  line-height: 0.6em;\n  white-space: nowrap;\n  color: ${Colors.Gray400};\n`;\n","import {Colors, Icon, FontFamily} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {withMiddleTruncation} from '../app/Util';\n\nimport {ASSET_LINK_NAME_MAX_LENGTH} from './layout';\n\nexport const AssetNodeLink: React.FC<{\n  assetKey: {path: string[]};\n}> = React.memo(({assetKey}) => {\n  const label = assetKey.path[assetKey.path.length - 1]!;\n  return (\n    <AssetNodeLinkContainer>\n      <Icon name=\"open_in_new\" color={Colors.Link} />\n      <span className=\"label\" title={label}>\n        {withMiddleTruncation(label, {\n          maxLength: ASSET_LINK_NAME_MAX_LENGTH,\n        })}\n      </span>\n    </AssetNodeLinkContainer>\n  );\n});\n\nconst AssetNodeLinkContainer = styled.div`\n  display: flex;\n  padding: 4px 8px 6px;\n  margin-top: 26px;\n  line-height: 30px;\n  font-family: ${FontFamily.monospace};\n  color: ${Colors.Link};\n  align-items: center;\n  font-weight: 600;\n  gap: 4px;\n  &:hover .label {\n    color: ${Colors.Link};\n    text-decoration: underline;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport groupBy from 'lodash/groupBy';\nimport keyBy from 'lodash/keyBy';\nimport reject from 'lodash/reject';\nimport React from 'react';\n\nimport {filterByQuery, GraphQueryItem} from '../app/GraphQueryImpl';\nimport {AssetKey} from '../assets/types';\nimport {AssetGroupSelector, PipelineSelector} from '../graphql/types';\n\nimport {ASSET_NODE_FRAGMENT} from './AssetNode';\nimport {buildGraphData, GraphData, toGraphId, tokenForAssetKey} from './Utils';\nimport {\n  AssetGraphQuery,\n  AssetGraphQueryVariables,\n  AssetNodeForGraphQueryFragment,\n} from './types/useAssetGraphData.types';\n\nexport interface AssetGraphFetchScope {\n  hideEdgesToNodesOutsideQuery?: boolean;\n  hideNodesMatching?: (node: AssetNodeForGraphQueryFragment) => boolean;\n  pipelineSelector?: PipelineSelector;\n  groupSelector?: AssetGroupSelector;\n}\n\nexport type AssetGraphQueryItem = GraphQueryItem & {\n  node: AssetNode;\n};\n\n/** Fetches data for rendering an asset graph:\n *\n * @param pipelineSelector: Optionally scope to an asset job, or pass null for the global graph\n *\n * @param opsQuery: filter the returned graph using selector syntax string (eg: asset_name++)\n *\n * @param filterNodes: filter the returned graph using the provided function. The global graph\n * uses this option to implement the \"3 of 4 repositories\" picker.\n */\nexport function useAssetGraphData(opsQuery: string, options: AssetGraphFetchScope) {\n  const fetchResult = useQuery<AssetGraphQuery, AssetGraphQueryVariables>(ASSET_GRAPH_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      pipelineSelector: options.pipelineSelector,\n      groupSelector: options.groupSelector,\n    },\n  });\n\n  const nodes = fetchResult.data?.assetNodes;\n\n  const {\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  } = React.useMemo(() => {\n    if (nodes === undefined) {\n      return {\n        graphAssetKeys: [],\n        graphQueryItems: [],\n        assetGraphData: null,\n        applyingEmptyDefault: false,\n      };\n    }\n\n    // Apply any filters provided by the caller. This is where we do repo filtering\n    let matching = nodes;\n    if (options.hideNodesMatching) {\n      matching = reject(matching, options.hideNodesMatching);\n    }\n\n    // Filter the set of all AssetNodes down to those matching the `opsQuery`.\n    // In the future it might be ideal to move this server-side, but we currently\n    // get to leverage the useQuery cache almost 100% of the time above, making this\n    // super fast after the first load vs a network fetch on every page view.\n    const graphQueryItems = buildGraphQueryItems(matching);\n    const {all, applyingEmptyDefault} = filterByQuery(graphQueryItems, opsQuery);\n\n    // Assemble the response into the data structure used for layout, traversal, etc.\n    const assetGraphData = buildGraphData(all.map((n) => n.node));\n    if (options.hideEdgesToNodesOutsideQuery) {\n      removeEdgesToHiddenAssets(assetGraphData, nodes);\n    }\n\n    return {\n      allAssetKeys: matching.map((n) => n.assetKey),\n      graphAssetKeys: all.map((n) => ({path: n.node.assetKey.path})),\n      assetGraphData,\n      graphQueryItems,\n      applyingEmptyDefault,\n    };\n  }, [nodes, opsQuery, options.hideEdgesToNodesOutsideQuery, options.hideNodesMatching]);\n\n  return {\n    fetchResult,\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  };\n}\n\ntype AssetNode = AssetNodeForGraphQueryFragment;\n\nconst buildGraphQueryItems = (nodes: AssetNode[]) => {\n  const items: {[name: string]: AssetGraphQueryItem} = {};\n\n  for (const node of nodes) {\n    const name = tokenForAssetKey(node.assetKey);\n    items[name] = {\n      node,\n      name,\n      inputs: node.dependencyKeys.map((key) => ({\n        dependsOn: [{solid: {name: tokenForAssetKey(key)}}],\n      })),\n      outputs: node.dependedByKeys.map((key) => ({\n        dependedBy: [{solid: {name: tokenForAssetKey(key)}}],\n      })),\n    };\n  }\n  return Object.values(items);\n};\n\nconst removeEdgesToHiddenAssets = (graphData: GraphData, allNodes: AssetNode[]) => {\n  const allNodesById = groupBy(allNodes, (n) => toGraphId(n.assetKey));\n  const notSourceAsset = (id: string) => !!allNodesById[id];\n\n  for (const node of Object.keys(graphData.upstream)) {\n    for (const edge of Object.keys(graphData.upstream[node]!)) {\n      if (!graphData.nodes[edge] && notSourceAsset(node)) {\n        delete graphData.upstream[node]![edge];\n        delete graphData.downstream[edge]![node];\n      }\n    }\n  }\n\n  for (const node of Object.keys(graphData.downstream)) {\n    for (const edge of Object.keys(graphData.downstream[node]!)) {\n      if (!graphData.nodes[edge] && notSourceAsset(node)) {\n        delete graphData.upstream[edge]![node];\n        delete graphData.downstream[node]![edge];\n      }\n    }\n  }\n};\n\nexport const calculateGraphDistances = (items: GraphQueryItem[], assetKey: AssetKey) => {\n  const map = keyBy(items, (g) => g.name);\n  const start = map[tokenForAssetKey(assetKey)];\n  if (!start) {\n    return {upstream: 0, downstream: 0};\n  }\n\n  const dfsUpstream = (name: string, depth: number): number => {\n    const next = map[name]!.inputs.flatMap((i) => i.dependsOn.map((d) => d.solid.name)).filter(\n      (dname) => dname !== name,\n    );\n\n    return Math.max(depth, ...next.map((dname) => dfsUpstream(dname, depth + 1)));\n  };\n  const dfsDownstream = (name: string, depth: number): number => {\n    const next = map[name]!.outputs.flatMap((i) => i.dependedBy.map((d) => d.solid.name)).filter(\n      (dname) => dname !== name,\n    );\n\n    return Math.max(depth, ...next.map((dname) => dfsDownstream(dname, depth + 1)));\n  };\n\n  return {\n    upstream: dfsUpstream(start.name, 0),\n    downstream: dfsDownstream(start.name, 0),\n  };\n};\n\nexport const ASSET_GRAPH_QUERY = gql`\n  query AssetGraphQuery($pipelineSelector: PipelineSelector, $groupSelector: AssetGroupSelector) {\n    assetNodes(pipeline: $pipelineSelector, group: $groupSelector) {\n      id\n      ...AssetNodeForGraphQuery\n    }\n  }\n\n  fragment AssetNodeForGraphQuery on AssetNode {\n    id\n    groupName\n    hasMaterializePermission\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n    dependencyKeys {\n      path\n    }\n    dependedByKeys {\n      path\n    }\n    ...AssetNodeFragment\n  }\n\n  ${ASSET_NODE_FRAGMENT}\n`;\n","import {Box, ButtonLink, Caption, Colors, Icon, Mono} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {DagsterTag} from '../runs/RunTag';\n\nimport {AssetEventGroup} from './groupByPartition';\n\n// There can be other keys in the event tags, but we want to show data and code version\n// at the top consistently regardless of their alphabetical / backend ordering.\nconst ORDER = [\n  DagsterTag.AssetEventDataVersion.valueOf(),\n  DagsterTag.AssetEventDataVersionDeprecated.valueOf(),\n  DagsterTag.AssetEventCodeVersion.valueOf(),\n];\n\nexport const AssetEventSystemTags: React.FC<{\n  event: AssetEventGroup['latest'] | null;\n  paddingLeft?: number;\n  collapsible?: boolean;\n}> = ({event, paddingLeft, collapsible}) => {\n  const [shown, setShown] = useStateWithStorage('show-asset-system-tags', Boolean);\n\n  if (collapsible && !shown) {\n    return (\n      <Caption>\n        <ButtonLink onClick={() => setShown(true)}>\n          <Box flex={{alignItems: 'center'}}>\n            <span>Show tags ({event?.tags.length || 0})</span>\n            <Icon name=\"arrow_drop_down\" style={{transform: 'rotate(0deg)'}} />\n          </Box>\n        </ButtonLink>\n      </Caption>\n    );\n  }\n\n  return (\n    <>\n      <AssetEventSystemTagsTable>\n        <tbody>\n          {event?.tags.length ? (\n            [...event.tags]\n              .sort((a, b) => ORDER.indexOf(b.key) - ORDER.indexOf(a.key))\n              .map((t) => (\n                <tr key={t.key}>\n                  <td style={{paddingLeft}}>\n                    <Mono>{t.key.replace(DagsterTag.Namespace, '')}</Mono>\n                  </td>\n                  <td>{t.value}</td>\n                </tr>\n              ))\n          ) : (\n            <tr>\n              <td style={{paddingLeft}}>No tags to display.</td>\n            </tr>\n          )}\n        </tbody>\n      </AssetEventSystemTagsTable>\n      {collapsible && (\n        <Caption>\n          <ButtonLink onClick={() => setShown(false)}>\n            <Box flex={{alignItems: 'center'}}>\n              <span>Hide tags</span>\n              <Icon name=\"arrow_drop_down\" style={{transform: 'rotate(180deg)'}} />\n            </Box>\n          </ButtonLink>\n        </Caption>\n      )}\n    </>\n  );\n};\n\nconst AssetEventSystemTagsTable = styled.table`\n  width: 100%;\n  border-spacing: 0;\n  border-collapse: collapse;\n\n  tr td:first-child {\n    max-width: 300px;\n    word-wrap: break-word;\n    width: 25%;\n  }\n  tr td {\n    border: 1px solid ${Colors.KeylineGray};\n    padding: 8px 12px;\n    font-size: 14px;\n    vertical-align: top;\n  }\n`;\n","import {gql} from '@apollo/client';\nimport {Box, ButtonLink, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {Timestamp} from '../app/time/Timestamp';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetLineageFragment} from './types/AssetLineageElements.types';\n\nconst AssetLineageInfoElement: React.FC<{\n  lineage_info: AssetLineageFragment;\n  timestamp: string;\n}> = ({lineage_info, timestamp}) => {\n  const partition_list_label = lineage_info.partitions.length === 1 ? 'Partition' : 'Partitions';\n  const partition_list_str = lineage_info.partitions\n    .map((partition) => `\"${partition}\"`)\n    .join(', ');\n  const to = assetDetailsPathForKey(lineage_info.assetKey, {asOf: timestamp});\n\n  return (\n    <Box margin={{bottom: 4}}>\n      {lineage_info.partitions.length > 0\n        ? `${partition_list_label} ${partition_list_str} of `\n        : ''}\n      <Tooltip\n        content={\n          <>\n            View snapshot as of{' '}\n            <Timestamp\n              timestamp={{ms: Number(timestamp)}}\n              timeFormat={{showSeconds: true, showTimezone: true}}\n            />\n          </>\n        }\n        modifiers={{offset: {enabled: true, options: {offset: [0, 16]}}}}\n        placement=\"right\"\n      >\n        <Link to={to}>\n          <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n            {lineage_info.assetKey.path\n              .map((p, i) => <span key={i}>{p}</span>)\n              .reduce(\n                (accum, curr, ii) => [\n                  ...accum,\n                  ii > 0 ? (\n                    <React.Fragment key={`${ii}-space`}>&nbsp;{'>'}&nbsp;</React.Fragment>\n                  ) : null,\n                  curr,\n                ],\n                [] as React.ReactNode[],\n              )}\n          </Box>\n        </Link>\n      </Tooltip>\n    </Box>\n  );\n};\n\nconst MAX_COLLAPSED = 5;\n\nexport const AssetLineageElements: React.FC<{\n  elements: AssetLineageFragment[];\n  timestamp: string;\n}> = ({elements, timestamp}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <div>\n      {elements.length > MAX_COLLAPSED && (\n        <ButtonLink onClick={() => setCollapsed(!collapsed)}>\n          {collapsed ? 'Show More' : 'Show Less'}\n        </ButtonLink>\n      )}\n      {(collapsed ? elements.slice(elements.length - MAX_COLLAPSED) : elements).map((info, idx) => (\n        <AssetLineageInfoElement key={idx} lineage_info={info} timestamp={timestamp} />\n      ))}\n    </div>\n  );\n};\n\nexport const ASSET_LINEAGE_FRAGMENT = gql`\n  fragment AssetLineageFragment on AssetLineageInfo {\n    assetKey {\n      path\n    }\n    partitions\n  }\n`;\n","import {\n  Box,\n  Colors,\n  NonIdealState,\n  Caption,\n  Subheading,\n  ExternalAnchorButton,\n} from '@dagster-io/ui';\nimport flatMap from 'lodash/flatMap';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\n\nimport {AssetValueGraph, AssetValueGraphData} from './AssetValueGraph';\nimport {AssetEventGroup} from './groupByPartition';\n\nexport const AssetMaterializationGraphs: React.FC<{\n  groups: AssetEventGroup[];\n  xAxis: 'partition' | 'time';\n  asSidebarSection?: boolean;\n  columnCount?: number;\n}> = (props) => {\n  const [xHover, setXHover] = React.useState<string | number | null>(null);\n\n  const reversed = React.useMemo(() => {\n    return [...props.groups].reverse();\n  }, [props.groups]);\n\n  const graphDataByMetadataLabel = extractNumericData(reversed, props.xAxis);\n  const graphLabels = Object.keys(graphDataByMetadataLabel).slice(0, 20).sort();\n\n  if (process.env.NODE_ENV === 'test') {\n    return <span />; // chartjs and our useViewport hook don't play nicely with jest\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `1fr `.repeat(props.columnCount || 2),\n          justifyContent: 'stretch',\n        }}\n      >\n        {graphLabels.map((label) => (\n          <Box\n            key={label}\n            style={{width: '100%'}}\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n          >\n            <Box\n              style={{width: '100%'}}\n              border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n            >\n              {props.asSidebarSection ? (\n                <Box padding={{horizontal: 24, top: 8}} flex={{justifyContent: 'space-between'}}>\n                  <Caption style={{fontWeight: 700}}>{label}</Caption>\n                </Box>\n              ) : (\n                <Box\n                  padding={{horizontal: 24, vertical: 16}}\n                  border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n                  flex={{justifyContent: 'space-between'}}\n                >\n                  <Subheading>{label}</Subheading>\n                </Box>\n              )}\n              <Box padding={{horizontal: 24, vertical: 16}}>\n                <AssetValueGraph\n                  label={label}\n                  width=\"100%\"\n                  data={graphDataByMetadataLabel[label]!}\n                  xHover={xHover}\n                  onHoverX={(x) => x !== xHover && setXHover(x)}\n                />\n              </Box>\n            </Box>\n          </Box>\n        ))}\n      </div>\n      {graphLabels.length === 0 ? (\n        props.asSidebarSection ? (\n          <Box\n            margin={{horizontal: 24, vertical: 12}}\n            style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n          >\n            No numeric metadata entries available to be graphed.\n          </Box>\n        ) : (\n          <Box padding={{horizontal: 24, top: 64}}>\n            <NonIdealState\n              shrinkable\n              icon=\"asset_plot\"\n              title=\"Asset plots are automatically generated by metadata\"\n              description=\"Include numeric metadata entries in your materializations and observations to see data graphed by time or partition.\"\n              action={\n                <ExternalAnchorButton href=\"https://docs.dagster.io/concepts/assets/software-defined-assets#recording-materialization-metadata\">\n                  View documentation\n                </ExternalAnchorButton>\n              }\n            />\n          </Box>\n        )\n      ) : (\n        props.xAxis === 'partition' && (\n          <Box padding={{vertical: 16, horizontal: 24}} style={{color: Colors.Gray400}}>\n            When graphing values by partition, the highest data point for each materialized event\n            label is displayed.\n          </Box>\n        )\n      )}\n    </>\n  );\n};\n\n/**\n * Helper function that iterates over the asset materializations and assembles time series data\n * and stats for all numeric metadata entries. This function makes the following guaruntees:\n *\n * - If a metadata entry is sparsely emitted, points are still included for missing x values\n *   with y = NaN. (For compatiblity with react-chartjs-2)\n * - If a metadata entry is generated many times for the same partition, and xAxis = partition,\n *   the MAX value emitted is used as the data point.\n *\n * Assumes that the data is pre-sorted in ascending partition order if using xAxis = partition.\n */\nconst extractNumericData = (datapoints: AssetEventGroup[], xAxis: 'time' | 'partition') => {\n  const series: {\n    [metadataEntryLabel: string]: AssetValueGraphData;\n  } = {};\n\n  // Build a set of the numeric metadata entry labels (note they may be sparsely emitted)\n  const numericMetadataLabels = uniq(\n    flatMap(datapoints, (e) =>\n      (e.latest?.metadataEntries || [])\n        .filter((k) => ['IntMetadataEntry', 'FloatMetadataEntry'].includes(k.__typename))\n        .map((k) => k.label),\n    ),\n  );\n\n  const append = (label: string, {x, y}: {x: number | string; y: number}) => {\n    const target: AssetValueGraphData = series[label] || {\n      minY: 0,\n      maxY: 0,\n      minXNumeric: 0,\n      maxXNumeric: 0,\n      values: [],\n      xAxis,\n    };\n\n    if (xAxis === 'partition') {\n      // If the xAxis is partition keys, the graph may only contain one value for each partition.\n      // If the existing sample for the partition was null, replace it. Otherwise take the\n      // most recent value.\n      const existingForPartition = target.values.find((v) => v.x === x);\n      if (existingForPartition) {\n        if (!isNaN(y)) {\n          existingForPartition.y = y;\n        }\n        return;\n      }\n    }\n    target.values.push({\n      xNumeric: typeof x === 'number' ? x : target.values.length,\n      x,\n      y,\n    });\n\n    series[label] = target;\n  };\n\n  for (const {partition, latest} of datapoints) {\n    const x = (xAxis === 'partition' ? partition : Number(latest?.timestamp)) || null;\n\n    if (x === null) {\n      // exclude materializations where partition = null from partitioned graphs\n      continue;\n    }\n\n    // Add an entry for every numeric metadata label\n    for (const label of numericMetadataLabels) {\n      const entry = latest?.metadataEntries.find((l) => l.label === label);\n      if (!entry) {\n        append(label, {x, y: NaN});\n        continue;\n      }\n\n      let y = NaN;\n      if (entry.__typename === 'IntMetadataEntry') {\n        if (entry.intValue !== null) {\n          y = entry.intValue;\n        } else {\n          // will incur precision loss here\n          y = parseInt(entry.intRepr);\n        }\n      }\n      if (entry.__typename === 'FloatMetadataEntry' && entry.floatValue !== null) {\n        y = entry.floatValue;\n      }\n      append(label, {x, y});\n    }\n  }\n\n  for (const serie of Object.values(series)) {\n    const xs = serie.values.map((v) => v.xNumeric);\n    const ys = serie.values.map((v) => v.y).filter((v) => !isNaN(v));\n    serie.minXNumeric = Math.min(...xs);\n    serie.maxXNumeric = Math.max(...xs);\n    serie.minY = Math.min(...ys);\n    serie.maxY = Math.max(...ys);\n  }\n  return series;\n};\n","import {gql} from '@apollo/client';\nimport {Box, MetadataTable} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DAGSTER_TYPE_FRAGMENT} from '../dagstertype/DagsterType';\nimport {DagsterTypeFragment} from '../dagstertype/types/DagsterType.types';\nimport {MetadataEntry, METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {MetadataEntryFragment} from '../metadata/types/MetadataEntry.types';\n\nimport {AssetNodeOpMetadataFragment} from './types/AssetMetadata.types';\n\nexport const metadataForAssetNode = (\n  assetNode: AssetNodeOpMetadataFragment,\n): {assetType?: DagsterTypeFragment; assetMetadata: MetadataEntryFragment[]} => {\n  const assetType = assetNode.type ? assetNode.type : undefined;\n  const assetMetadata = assetNode.metadataEntries || [];\n  return {assetType, assetMetadata};\n};\n\nexport const AssetMetadataTable: React.FC<{\n  assetMetadata: MetadataEntryFragment[];\n  repoLocation: string;\n}> = ({assetMetadata, repoLocation}) => {\n  const rows = assetMetadata.map((entry) => {\n    return {\n      key: entry.label,\n      value: <MetadataEntry entry={entry} repoLocation={repoLocation} />,\n    };\n  });\n  return (\n    <Box padding={{vertical: 16, horizontal: 24}}>\n      <MetadataTable rows={rows} />\n    </Box>\n  );\n};\n\nexport const ASSET_NODE_OP_METADATA_FRAGMENT = gql`\n  fragment AssetNodeOpMetadataFragment on AssetNode {\n    id\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    type {\n      ...DagsterTypeFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n  ${DAGSTER_TYPE_FRAGMENT}\n`;\n","import {Tag} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {AutoMaterializePolicyType} from '../graphql/types';\n\nexport const AutomaterializePolicyTag: React.FC<{\n  policy: {\n    policyType: AutoMaterializePolicyType;\n  };\n}> = ({policy}) => (\n  <Tag>{policy.policyType === AutoMaterializePolicyType.LAZY ? 'Lazy' : 'Eager'}</Tag>\n);\n\nexport const automaterializePolicyDescription = (policy: {\n  policyType: AutoMaterializePolicyType;\n}) => (\n  <>\n    This asset is automatically re-materialized when at least one of the following are true:\n    <ul style={{paddingLeft: 20}}>\n      <li>it is missing</li>\n      <li>it has a freshness policy that requires more up-to-date data</li>\n      <li>any of its descendants have a freshness policy that require more up-to-date data</li>\n      {policy.policyType === AutoMaterializePolicyType.EAGER && (\n        <li>any of its parent assets / partitions have newer data</li>\n      )}\n    </ul>\n    and none of the following are true:\n    <ul style={{paddingLeft: 20, marginBottom: 0}}>\n      <li>any of its parent assets / partitions are missing</li>\n      <li>any of its ancestor assets / partitions have ancestors of their own with newer data</li>\n    </ul>\n  </>\n);\n","import {Alert, Box, Spinner} from '@dagster-io/ui';\nimport {BorderSetting} from '@dagster-io/ui/src/components/types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {titleForRun} from '../runs/RunUtils';\nimport {useStepLogs} from '../runs/StepLogsDialog';\n\nexport const CurrentRunsBanner: React.FC<{\n  liveData?: LiveDataForNode;\n  border: BorderSetting;\n  stepKey: string;\n}> = ({stepKey, liveData, border}) => {\n  const {inProgressRunIds = [], unstartedRunIds = []} = liveData || {};\n  const firstRunId = inProgressRunIds[0] || unstartedRunIds[0];\n  const stepLogs = useStepLogs({runId: firstRunId, stepKeys: [stepKey]});\n\n  return (\n    <>\n      {stepLogs.dialog}\n      {firstRunId && (\n        <Box\n          padding={{vertical: 16, left: 24, right: 12}}\n          border={border}\n          flex={{gap: 8, alignItems: 'center'}}\n          style={{width: '100%'}}\n        >\n          <div style={{flex: 1}}>\n            <Alert\n              intent=\"info\"\n              icon={<Spinner purpose=\"body-text\" />}\n              title={\n                <div style={{fontWeight: 400}}>\n                  {inProgressRunIds.length > 0 && (\n                    <>\n                      {inProgressRunIds.map((id) => (\n                        <React.Fragment key={id}>\n                          Run <Link to={`/runs/${id}`}>{titleForRun({id})}</Link>\n                        </React.Fragment>\n                      ))}{' '}\n                      {inProgressRunIds.length === 1 ? 'is' : 'are'} currently refreshing this\n                      asset.\n                    </>\n                  )}\n                  {unstartedRunIds.length > 0 && (\n                    <>\n                      {unstartedRunIds.map((id) => (\n                        <React.Fragment key={id}>\n                          Run <Link to={`/runs/${id}`}>{titleForRun({id})}</Link>\n                        </React.Fragment>\n                      ))}{' '}\n                      {unstartedRunIds.length === 1 ? 'has' : 'have'} started and will refresh this\n                      asset.\n                    </>\n                  )}\n                </div>\n              }\n            />\n          </div>\n          {stepLogs.button}\n        </Box>\n      )}\n    </>\n  );\n};\n","import {Alert, Box, Colors, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nexport const DependsOnSelfBanner: React.FC = () => {\n  return (\n    <Box\n      padding={{vertical: 16, left: 24, right: 12}}\n      border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n    >\n      <Alert\n        intent=\"info\"\n        icon={\n          <Icon name=\"history_toggle_off\" size={16} color={Colors.Blue700} style={{marginTop: 1}} />\n        }\n        title={\n          <div style={{fontWeight: 400}}>This asset depends on earlier partitions of itself. </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui';\nimport {BorderSetting, DirectionalSpacing} from '@dagster-io/ui/src/components/types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AssetLatestInfoRunFragment} from '../asset-graph/types/useLiveDataForAssetKeys.types';\nimport {titleForRun} from '../runs/RunUtils';\nimport {useStepLogs} from '../runs/StepLogsDialog';\n\nexport const FailedRunSinceMaterializationBanner: React.FC<{\n  run: AssetLatestInfoRunFragment | null;\n  padding?: DirectionalSpacing;\n  border?: BorderSetting;\n  stepKey?: string;\n}> = ({run, stepKey, border, padding = {vertical: 16, left: 24, right: 12}}) => {\n  const stepLogs = useStepLogs({runId: run?.id, stepKeys: stepKey ? [stepKey] : []});\n\n  return (\n    <>\n      {stepLogs.dialog}\n      {run && (\n        <Box\n          padding={padding}\n          border={border}\n          flex={{gap: 8, alignItems: 'center'}}\n          style={{width: '100%'}}\n        >\n          <div style={{flex: 1}}>\n            <Alert\n              intent=\"error\"\n              title={\n                <Box flex={{justifyContent: 'space-between'}}>\n                  <div style={{fontWeight: 400}}>\n                    Run <Link to={`/runs/${run.id}`}>{titleForRun(run)}</Link> failed to materialize\n                    this asset.\n                  </div>\n                </Box>\n              }\n            />\n          </div>\n          {stepLogs.button}\n        </Box>\n      )}\n    </>\n  );\n};\n","import {ApolloClient, useApolloClient} from '@apollo/client';\nimport {Button, Spinner, Tooltip, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {useLaunchPadHooks} from '../launchpad/LaunchpadHooksContext';\nimport {LaunchPipelineExecutionMutationVariables} from '../runs/types/RunUtils.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nimport {\n  AssetsInScope,\n  buildAssetCollisionsAlert,\n  executionParamsForAssetJob,\n  getCommonJob,\n  LAUNCH_ASSET_LOADER_QUERY,\n} from './LaunchAssetExecutionButton';\nimport {\n  LaunchAssetExecutionAssetNodeFragment,\n  LaunchAssetLoaderQuery,\n  LaunchAssetLoaderQueryVariables,\n} from './types/LaunchAssetExecutionButton.types';\n\ntype ObserveAssetsState =\n  | {type: 'none'}\n  | {type: 'loading'}\n  | {type: 'error'; error: string}\n  | {\n      type: 'single-run';\n      executionParams: LaunchPipelineExecutionMutationVariables['executionParams'];\n    };\n\nexport const LaunchAssetObservationButton: React.FC<{\n  scope: AssetsInScope;\n  intent?: 'primary' | 'none';\n  preferredJobName?: string;\n}> = ({scope, preferredJobName, intent = 'none'}) => {\n  const {useLaunchWithTelemetry} = useLaunchPadHooks();\n  const launchWithTelemetry = useLaunchWithTelemetry();\n\n  const [state, setState] = React.useState<ObserveAssetsState>({type: 'none'});\n  const client = useApolloClient();\n\n  const scopeAssets = 'selected' in scope ? scope.selected : scope.all;\n  if (!scopeAssets.length) {\n    return <span />;\n  }\n\n  const count = scopeAssets.length > 1 ? ` (${scopeAssets.length})` : '';\n  const label =\n    'selected' in scope\n      ? `Observe selected${count}`\n      : scope.skipAllTerm\n      ? `Observe${count}`\n      : `Observe sources ${count}`;\n\n  const hasMaterializePermission = scopeAssets.every((a) => a.hasMaterializePermission);\n  if (!hasMaterializePermission) {\n    return (\n      <Tooltip content=\"You do not have permission to observe source assets\">\n        <Button intent={intent} icon={<Icon name=\"observation\" />} disabled>\n          {label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  const onClick = async (e: React.MouseEvent<any>) => {\n    if (state.type === 'loading') {\n      return;\n    }\n    setState({type: 'loading'});\n\n    const result = await client.query<LaunchAssetLoaderQuery, LaunchAssetLoaderQueryVariables>({\n      query: LAUNCH_ASSET_LOADER_QUERY,\n      variables: {assetKeys: scopeAssets.map((a) => ({path: a.assetKey.path}))},\n    });\n\n    if (result.data.assetNodeDefinitionCollisions.length) {\n      showCustomAlert(buildAssetCollisionsAlert(result.data));\n      setState({type: 'none'});\n      return;\n    }\n\n    const assets = result.data.assetNodes;\n    const forceLaunchpad = e.shiftKey;\n\n    const next = await stateForObservingAssets(client, assets, forceLaunchpad, preferredJobName);\n\n    if (next.type === 'error') {\n      showCustomAlert({\n        title: 'Unable to observe',\n        body: next.error,\n      });\n      setState({type: 'none'});\n      return;\n    }\n\n    if (next.type === 'single-run') {\n      await launchWithTelemetry({executionParams: next.executionParams}, 'toast');\n      setState({type: 'none'});\n    } else {\n      setState(next);\n    }\n  };\n\n  return (\n    <Button\n      intent={intent}\n      onClick={onClick}\n      icon={\n        state.type === 'loading' ? <Spinner purpose=\"body-text\" /> : <Icon name=\"observation\" />\n      }\n    >\n      {label}\n    </Button>\n  );\n};\n\nasync function stateForObservingAssets(\n  _client: ApolloClient<any>,\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n  _forceLaunchpad: boolean,\n  preferredJobName?: string,\n): Promise<ObserveAssetsState> {\n  if (assets.some((x) => !x.isSource)) {\n    return {\n      type: 'error',\n      error: 'One or more non-source assets are selected and cannot be observed.',\n    };\n  }\n\n  if (assets.some((x) => !x.isObservable)) {\n    return {\n      type: 'error',\n      error: 'One or more of the selected source assets are unversioned and cannot be observed.',\n    };\n  }\n  const repoAddress = buildRepoAddress(\n    assets[0]?.repository.name || '',\n    assets[0]?.repository.location.name || '',\n  );\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (\n    !assets.every(\n      (a) =>\n        a.repository.name === repoAddress.name &&\n        a.repository.location.name === repoAddress.location,\n    )\n  ) {\n    return {\n      type: 'error',\n      error: `Assets must be in ${repoName} to be materialized together.`,\n    };\n  }\n\n  const jobName = getCommonJob(assets, preferredJobName);\n  if (!jobName) {\n    return {\n      type: 'error',\n      error: 'Assets must be in the same job to be observed together.',\n    };\n  }\n\n  return {\n    type: 'single-run',\n    executionParams: executionParamsForAssetJob(repoAddress, jobName, assets, []),\n  };\n}\n","import {gql} from '@apollo/client';\nimport {Box, Icon, Mono} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {UnderlyingOpsAssetNodeFragment} from './types/UnderlyingOpsOrGraph.types';\n\nexport const UnderlyingOpsOrGraph: React.FC<{\n  assetNode: UnderlyingOpsAssetNodeFragment;\n  repoAddress: RepoAddress;\n  minimal?: boolean;\n}> = ({assetNode, repoAddress, minimal}) => {\n  const {assetKey, graphName, opNames, jobNames} = assetNode;\n  const opCount = opNames.length;\n\n  if (!opCount) {\n    return null;\n  }\n\n  if (!graphName) {\n    const firstOp = opNames[0];\n    if (displayNameForAssetKey(assetKey) === firstOp) {\n      return null;\n    }\n    const opPath = workspacePathFromAddress(repoAddress, `/ops/${firstOp}`);\n    return (\n      <Box flex={{gap: 4, alignItems: 'center'}}>\n        <Icon name=\"op\" size={16} />\n        <Mono>\n          <Link to={opPath}>{firstOp}</Link>\n        </Mono>\n      </Box>\n    );\n  }\n\n  if (!jobNames.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{gap: 4, alignItems: 'center'}}>\n      <Icon name=\"schema\" size={16} />\n      {minimal ? (\n        <Link to={workspacePathFromAddress(repoAddress, `/graphs/${jobNames[0]}/${graphName}/`)}>\n          View graph\n        </Link>\n      ) : (\n        <Mono>\n          <Link to={workspacePathFromAddress(repoAddress, `/graphs/${jobNames[0]}/${graphName}/`)}>\n            {graphName}\n          </Link>\n          {` (${opCount === 1 ? '1 op' : `${opCount} ops`})`}\n        </Mono>\n      )}\n    </Box>\n  );\n};\n\nexport const UNDERLYING_OPS_ASSET_NODE_FRAGMENT = gql`\n  fragment UnderlyingOpsAssetNodeFragment on AssetNode {\n    id\n    assetKey {\n      path\n    }\n    graphName\n    opNames\n    jobNames\n  }\n`;\n","import {FontFamily} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\nexport const Version = styled.div`\n  font-family: ${FontFamily.monospace};\n  font-size: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n","import groupBy from 'lodash/groupBy';\nimport React from 'react';\n\nimport {\n  AssetMaterializationFragment,\n  AssetObservationFragment,\n} from './types/useRecentAssetEvents.types';\n\nconst NO_PARTITION_KEY = '__NO_PARTITION__';\n\ntype Event = AssetMaterializationFragment | AssetObservationFragment;\n\nexport type AssetEventGroup = {\n  latest: Event | null;\n  all: Event[];\n  timestamp?: string;\n  partition?: string;\n};\n\nconst sortByEventTimestamp = (a: Event, b: Event) => Number(b?.timestamp) - Number(a?.timestamp);\n\n/**\n * A hook that can bucket a list of materializations by partition, if any, with the `latest`\n * materialization separated from predecessor materializations.\n */\nconst groupByPartition = (events: Event[], definedPartitionKeys: string[]): AssetEventGroup[] => {\n  const grouped = groupBy(events, (m) => m.partition || NO_PARTITION_KEY);\n  const orderedPartitionKeys = [...definedPartitionKeys].reverse();\n\n  if (NO_PARTITION_KEY in grouped) {\n    orderedPartitionKeys.push(NO_PARTITION_KEY);\n  }\n\n  return orderedPartitionKeys\n    .filter((key) => key !== NO_PARTITION_KEY)\n    .map((key) => {\n      const sorted = [...(grouped[key] || [])].sort(sortByEventTimestamp);\n      const latestMaterialization = sorted.find((a) => a.__typename === 'MaterializationEvent');\n      const latest = latestMaterialization || sorted[0] || null;\n\n      return {\n        all: sorted,\n        latest,\n        timestamp: latest?.timestamp,\n        partition: key,\n      };\n    });\n};\n\nexport function useGroupedEvents(\n  xAxis: 'partition' | 'time',\n  materializations: Event[],\n  observations: Event[],\n  loadedPartitionKeys: string[] | undefined,\n) {\n  return React.useMemo<AssetEventGroup[]>(() => {\n    const events = [...materializations, ...observations].sort(\n      (b, a) => Number(a.timestamp) - Number(b.timestamp),\n    );\n    if (xAxis === 'partition' && loadedPartitionKeys) {\n      return groupByPartition(events, loadedPartitionKeys);\n    } else {\n      // return a group for every materialization to achieve un-grouped rendering\n      return events.map((event) => ({\n        latest: event,\n        partition: event.partition || undefined,\n        timestamp: event.timestamp,\n        all: [],\n      }));\n    }\n  }, [loadedPartitionKeys, materializations, observations, xAxis]);\n}\n","import {gql, useQuery} from '@apollo/client';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\n\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\n\nimport {ASSET_LINEAGE_FRAGMENT} from './AssetLineageElements';\nimport {AssetViewParams} from './AssetView';\nimport {AssetKey} from './types';\nimport {AssetEventsQuery, AssetEventsQueryVariables} from './types/useRecentAssetEvents.types';\n\n/**\n * If the asset has a defined partition space, we load all materializations in the\n * last 100 partitions. This ensures that if you run a huge backfill of old partitions,\n * you still see accurate info for the last 100 partitions in the UI. A count-based\n * limit could cause random partitions to disappear if materializations were out of order.\n */\nexport function useRecentAssetEvents(\n  assetKey: AssetKey,\n  params: AssetViewParams,\n  {assetHasDefinedPartitions}: {assetHasDefinedPartitions: boolean},\n) {\n  // The params behavior on this page is a bit nuanced - there are two main query\n  // params: ?timestamp= and ?partition= and only one is set at a time. They can\n  // be undefined, an empty string or a value and all three states are used.\n  //\n  // - If both are undefined, we expand the first item in the table by default\n  // - If one is present, it determines which xAxis is used (partition grouping)\n  // - If one is present and set to a value, that item in the table is expanded.\n  // - If one is present but an empty string, no items in the table is expanded.\n\n  const before = params.asOf ? `${Number(params.asOf) + 1}` : undefined;\n  const xAxisDefault = assetHasDefinedPartitions ? 'partition' : 'time';\n  const xAxis: 'partition' | 'time' =\n    params.partition !== undefined\n      ? 'partition'\n      : params.time !== undefined || before\n      ? 'time'\n      : xAxisDefault;\n\n  const loadUsingPartitionKeys = assetHasDefinedPartitions && xAxis === 'partition';\n\n  const {data, loading, refetch} = useQuery<AssetEventsQuery, AssetEventsQueryVariables>(\n    ASSET_EVENTS_QUERY,\n    {\n      variables: loadUsingPartitionKeys\n        ? {\n            assetKey: {path: assetKey.path},\n            before,\n            partitionInLast: 120,\n          }\n        : {\n            assetKey: {path: assetKey.path},\n            before,\n            limit: 100,\n          },\n    },\n  );\n\n  return React.useMemo(() => {\n    const asset = data?.assetOrError.__typename === 'Asset' ? data?.assetOrError : null;\n    const materializations = asset?.assetMaterializations || [];\n    const observations = asset?.assetObservations || [];\n\n    const allPartitionKeys = asset?.definition?.partitionKeys;\n    const loadedPartitionKeys =\n      loadUsingPartitionKeys && allPartitionKeys\n        ? allPartitionKeys.slice(allPartitionKeys.length - 120)\n        : uniq(\n            [...materializations, ...observations].map((p) => p.partition!).filter(Boolean),\n          ).sort();\n\n    return {\n      asset,\n      loadedPartitionKeys,\n      materializations,\n      observations,\n      loading,\n      refetch,\n      xAxis,\n    };\n  }, [data, loading, refetch, loadUsingPartitionKeys, xAxis]);\n}\n\nexport const ASSET_MATERIALIZATION_FRAGMENT = gql`\n  fragment AssetMaterializationFragment on MaterializationEvent {\n    partition\n    tags {\n      key\n      value\n    }\n    runOrError {\n      ... on PipelineRun {\n        id\n        mode\n        repositoryOrigin {\n          id\n          repositoryName\n          repositoryLocationName\n        }\n        status\n        pipelineName\n        pipelineSnapshotId\n      }\n    }\n    runId\n    timestamp\n    stepKey\n    label\n    description\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    assetLineage {\n      ...AssetLineageFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n  ${ASSET_LINEAGE_FRAGMENT}\n`;\n\nexport const ASSET_OBSERVATION_FRAGMENT = gql`\n  fragment AssetObservationFragment on ObservationEvent {\n    partition\n    tags {\n      key\n      value\n    }\n    runOrError {\n      ... on PipelineRun {\n        id\n        mode\n        repositoryOrigin {\n          id\n          repositoryName\n          repositoryLocationName\n        }\n        status\n        pipelineName\n        pipelineSnapshotId\n      }\n    }\n    runId\n    timestamp\n    stepKey\n    label\n    description\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n`;\n\nexport const ASSET_EVENTS_QUERY = gql`\n  query AssetEventsQuery(\n    $assetKey: AssetKeyInput!\n    $limit: Int\n    $before: String\n    $partitionInLast: Int\n  ) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        key {\n          path\n        }\n        assetObservations(\n          limit: $limit\n          beforeTimestampMillis: $before\n          partitionInLast: $partitionInLast\n        ) {\n          ...AssetObservationFragment\n        }\n        assetMaterializations(\n          limit: $limit\n          beforeTimestampMillis: $before\n          partitionInLast: $partitionInLast\n        ) {\n          ...AssetMaterializationFragment\n        }\n\n        definition {\n          id\n          partitionKeys\n        }\n      }\n    }\n  }\n\n  ${ASSET_OBSERVATION_FRAGMENT}\n  ${ASSET_MATERIALIZATION_FRAGMENT}\n`;\n","import {NonIdealState} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Props {\n  isGraph: boolean;\n  repoAddress?: RepoAddress;\n  result:\n    | {\n        __typename: 'PipelineSnapshotNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'PipelineNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'RepositoryNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'PythonError';\n        message: string;\n      };\n}\n\nexport const NonIdealPipelineQueryResult: React.FC<Props> = ({isGraph, repoAddress, result}) => {\n  if (result.__typename === 'PipelineSnapshotNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={isGraph ? 'Graph snapshot not found' : 'Pipeline snapshot not found'}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'PipelineNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={isGraph ? 'Graph not found' : 'Pipeline not found'}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'RepositoryNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={`${repoAddress ? repoAddressAsHumanString(repoAddress) : 'Definitions'} not found`}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'PythonError') {\n    return <NonIdealState icon=\"error\" title=\"Query error\" description={result.message} />;\n  }\n  return <span />;\n};\n","import {Box, Button, Colors, Dialog, DialogFooter, Icon, Mono, Spinner} from '@dagster-io/ui';\nimport React, {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {DagsterEventType} from '../graphql/types';\nimport {useSupportsCapturedLogs} from '../instance/useSupportsCapturedLogs';\n\nimport {CapturedOrExternalLogPanel} from './CapturedLogPanel';\nimport {ComputeLogPanel} from './ComputeLogPanel';\nimport {DefaultLogLevels} from './LogLevel';\nimport {LogFilter, LogsProvider, LogsProviderLogs} from './LogsProvider';\nimport {LogsScrollingTable} from './LogsScrollingTable';\nimport {LogType, LogsToolbar} from './LogsToolbar';\nimport {IRunMetadataDict, RunMetadataProvider} from './RunMetadataProvider';\nimport {titleForRun} from './RunUtils';\nimport {useComputeLogFileKeyForSelection} from './useComputeLogFileKeyForSelection';\n\nexport function useStepLogs({runId, stepKeys}: {runId?: string; stepKeys?: string[]}) {\n  const [showingLogs, setShowingLogs] = React.useState<{runId: string; stepKeys: string[]} | null>(\n    null,\n  );\n\n  // Note: This hook captures the runId + stepKeys in state when you click the button and then passes\n  // those values to the modal. This ensures that the modal is \"stable\" while it's open, even if\n  // the runId passed to the hook changes or becomes undefined. (eg: \"Currently materializing\" banner)\n\n  return {\n    dialog: (\n      <StepLogsDialog\n        runId={showingLogs?.runId}\n        stepKeys={showingLogs?.stepKeys || []}\n        onClose={() => setShowingLogs(null)}\n      />\n    ),\n    button:\n      runId && stepKeys ? (\n        <Button\n          small\n          icon={<Icon name=\"wysiwyg\" />}\n          onClick={() => setShowingLogs({runId, stepKeys})}\n        >\n          View logs\n        </Button>\n      ) : undefined,\n  };\n}\n\nexport const StepLogsDialog: React.FC<{\n  runId?: string;\n  stepKeys: string[];\n  onClose: () => void;\n}> = ({runId, stepKeys, onClose}) => {\n  return (\n    <Dialog\n      isOpen={!!runId}\n      style={{width: '80vw'}}\n      canOutsideClickClose\n      canEscapeKeyClose\n      onClose={onClose}\n    >\n      {runId ? (\n        <LogsProvider key={runId} runId={runId}>\n          {(logs) => (\n            <RunMetadataProvider logs={logs}>\n              {(metadata) => (\n                <StepLogsModalContent\n                  runId={runId}\n                  metadata={metadata}\n                  stepKeys={stepKeys}\n                  logs={logs}\n                />\n              )}\n            </RunMetadataProvider>\n          )}\n        </LogsProvider>\n      ) : (\n        ''\n      )}\n      <div style={{zIndex: 2, background: Colors.White}}>\n        <DialogFooter topBorder>\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        </DialogFooter>\n      </div>\n    </Dialog>\n  );\n};\n\nexport const StepLogsModalContent: React.FC<{\n  runId: string;\n  stepKeys: string[];\n  metadata: IRunMetadataDict;\n  logs: LogsProviderLogs;\n}> = ({runId, stepKeys, metadata, logs}) => {\n  const supportsCapturedLogs = useSupportsCapturedLogs();\n  const [logType, setComputeLogType] = useState<LogType>(LogType.structured);\n  const [computeLogUrl, setComputeLogUrl] = React.useState<string | null>(null);\n\n  const firstLogForStep = logs.allNodes.find(\n    (l) => l.eventType === DagsterEventType.STEP_START && l.stepKey && stepKeys.includes(l.stepKey),\n  );\n  const firstLogForStepTime = firstLogForStep ? Number(firstLogForStep.timestamp) : 0;\n\n  const [filter, setFilter] = useState<LogFilter>({\n    hideNonMatches: false,\n    focusedTime: firstLogForStepTime,\n    levels: Object.fromEntries(DefaultLogLevels.map((l) => [l, true])),\n    logQuery: stepKeys.map((stepKey) => ({token: 'step', value: stepKey})),\n    sinceTime: 0,\n  });\n\n  React.useEffect(() => {\n    setFilter((filter) => ({...filter, focusedTime: firstLogForStepTime}));\n  }, [firstLogForStepTime]);\n\n  const {\n    computeLogFileKey,\n    setComputeLogFileKey,\n    logCaptureInfo,\n  } = useComputeLogFileKeyForSelection({\n    metadata,\n    stepKeys,\n    selectionStepKeys: stepKeys,\n  });\n\n  return (\n    <LogsContainer>\n      <LogsToolbar\n        metadata={metadata}\n        logType={logType}\n        onSetLogType={setComputeLogType}\n        computeLogFileKey={computeLogFileKey}\n        onSetComputeLogKey={setComputeLogFileKey}\n        computeLogUrl={computeLogUrl}\n        steps={[]}\n        counts={logs.counts}\n        filter={filter}\n        onSetFilter={setFilter}\n      >\n        <Link to={`/runs/${runId}?stepKeys=${stepKeys}`} style={{marginLeft: 8}}>\n          <Box flex={{gap: 4, alignItems: 'center'}}>\n            {!metadata.exitedAt && logType === LogType.structured && (\n              <Spinner purpose=\"body-text\" />\n            )}\n            View Run <Mono>{titleForRun({id: runId})}</Mono>\n            <Icon name=\"open_in_new\" color={Colors.Link} />\n          </Box>\n        </Link>\n      </LogsToolbar>\n\n      {logType !== LogType.structured ? (\n        supportsCapturedLogs ? (\n          <CapturedOrExternalLogPanel\n            logKey={computeLogFileKey ? [runId, 'compute_logs', computeLogFileKey] : []}\n            logCaptureInfo={logCaptureInfo}\n            visibleIOType={LogType[logType]}\n            onSetDownloadUrl={setComputeLogUrl}\n          />\n        ) : (\n          <ComputeLogPanel\n            runId={runId}\n            computeLogFileKey={computeLogFileKey}\n            ioType={LogType[logType]}\n            setComputeLogUrl={setComputeLogUrl}\n          />\n        )\n      ) : (\n        <LogsScrollingTable\n          logs={logs}\n          filter={filter}\n          filterStepKeys={stepKeys}\n          filterKey={`${JSON.stringify(filter)}`}\n          metadata={metadata}\n        />\n      )}\n    </LogsContainer>\n  );\n};\n\nconst LogsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  height: 65vh;\n`;\n"],"names":["AssetEdges","_ref","edges","highlighted","_ref$strokeWidth","strokeWidth","_ref$baseColor","baseColor","Colors","_jsxs","React","children","_jsx","AssetEdgeSet","color","filter","_ref2","fromId","toId","_ref3","_Fragment","id","concat","btoa","viewBox","refX","refY","markerUnits","markerWidth","orient","d","fill","map","edge","idx","buildSVGPath","source","from","target","to","stroke","markerEnd","AssetGraphJobSidebar","pipelineSelector","queryResult","useQuery","ASSET_GRAPH_JOB_SIDEBAR","variables","repositoryName","repositoryLocationName","repoAddress","buildRepoAddress","Loading","pipelineSnapshotOrError","__typename","NonIdealPipelineQueryResult","isGraph","result","SidebarContainerOverview","container","gql","_templateObject","_taggedTemplateLiteral","SIDEBAR_ROOT_CONTAINER_FRAGMENT","PYTHON_ERROR_FRAGMENT","LatestMaterializationMetadata","assetKey","latest","liveData","latestRun","runOrError","repositoryOrigin","repo","useRepository","latestEvent","latestAssetLineage","assetLineage","stepLogs","useStepLogs","stepKey","runId","stepKeys","undefined","dialog","MetadataTable","Box","flex","direction","justifyContent","gap","alignItems","Link","timestamp","Mono","titleForRun","button","isHiddenAssetGroupJob","pipelineName","padding","left","top","PipelineReference","showIcon","pipelineHrefContext","snapshotId","pipelineSnapshotId","isJob","isThisThingAJob","Group","spacing","Icon","name","linkToRunEvent","partition","Timestamp","ms","Number","StaleReasonsTags","include","length","AssetLineageElements","elements","metadataEntries","entry","label","MetadataEntry","expandSmallValues","repoLocation","location","bottom","NonIdealState","icon","title","description","styled","Table","withConfig","displayName","componentId","AssetSidebarActivitySummary","asset","assetLastMaterializedAt","isSourceAsset","_useRecentAssetEvents","useRecentAssetEvents","assetHasDefinedPartitions","partitionDefinition","materializations","observations","loadedPartitionKeys","loading","refetch","xAxis","grouped","useGroupedEvents","displayedEvent","FailedRunSinceMaterializationBanner","border","side","width","run","runWhichFailedToMaterialize","CurrentRunsBanner","freshnessPolicy","SidebarSection","margin","horizontal","vertical","Body","style","freshnessPolicyDescription","OverdueTag","policy","autoMaterializePolicy","automaterializePolicyDescription","AutomaterializePolicyTag","maxWidth","overflowX","Spinner","purpose","fontSize","collapsedByDefault","AssetEventSystemTags","event","paddingLeft","AssetMaterializationGraphs","asSidebarSection","groups","columnCount","SidebarAssetInfo","_asset$configField","_asset$op","graphNode","definition","partitionHealthRefreshHint","healthRefreshHintFromLiveData","partitionHealthData","usePartitionHealthData","data","SIDEBAR_ASSET_QUERY","path","lastMaterialization","assetNodeOrError","Header","assetNode","repository","_metadataForAssetNode","metadataForAssetNode","assetMetadata","assetType","hasAssetMetadata","assetConfigSchema","configField","configType","OpMetadataPlugin","op","metadata","pluginForMetadata","AssetDefinedInMultipleReposNotice","loadedFromRepo","padded","SidebarComponent","Description","isSource","stepKeyForAsset","borderBottom","nodeDependsOnSelf","DependsOnSelfBanner","opVersion","Version","ConfigTypeSchema","type","typesInScope","recursiveConfigTypes","requiredResources","resource","ResourceContainer","workspacePathFromAddress","resourceKey","ResourceHeader","AssetMetadataTable","TypeSidebarSection","PartitionHealthSummary","DagsterTypeSummary","_ref4","displayNameForAssetKey","right","SidebarTitle","marginBottom","display","flexWrap","AssetCatalogLink","assetDetailsPathForKey","UnderlyingOpsOrGraph","minimal","SIDEBAR_ASSET_FRAGMENT","ASSET_NODE_CONFIG_FRAGMENT","METADATA_ENTRY_FRAGMENT","ASSET_NODE_OP_METADATA_FRAGMENT","_templateObject2","ASSET_FOR_NAVIGATION_QUERY","MINIMAL_SCALE","GROUPS_ONLY_SCALE","AssetGraphExplorer","props","_useAssetGraphData","useAssetGraphData","explorerPath","opsQuery","fetchOptions","fetchResult","assetGraphData","graphQueryItems","graphAssetKeys","allAssetKeys","applyingEmptyDefault","_useLiveDataForAssetK","useLiveDataForAssetKeys","liveDataByNode","liveDataRefreshState","allowStaleData","graphHasCycles","AssetGraphExplorerWithData","_objectSpread","options","setOptions","onChangeExplorerPath","onNavigateToSourceAssetNode","fetchOptionFilters","findAssetLocation","apollo","useApolloClient","_asyncToGenerator","_regeneratorRuntime","mark","_callee","key","_yield$apollo$query","def","wrap","_context","prev","next","query","sent","assetOrError","abrupt","opNames","jobName","jobNames","find","groupName","stop","_x","apply","arguments","useFindAssetLocation","_useAssetLayout","useAssetLayout","layout","async","viewportEl","flagHorizontalDAGs","useFeatureFlags","_React$useState","_React$useState2","_slicedToArray","setHighlighted","selectedAssetValues","split","selectedGraphNodes","Object","values","nodes","node","includes","tokenForAssetKey","lastSelectedNode","selectedDefinitions","a","allDefinitionsForMaterialize","onSelectNode","e","token","nodeIsInDisplayedGraph","nextOpsNameSelection","tokensToAdd","reversed","_iterator","_step","tokensInRange","existing","nextCenter","_viewportEl$current","stopPropagation","t0","t1","shiftKey","metaKey","_toConsumableArray","reverse","_createForOfIteratorHelper","s","n","done","value","assetKeyTokensInRange","graph","t2","f","finish","without","uniq","join","current","zoomToSVGCoords","bounds","x","y","_x2","_x3","_React$useState3","_React$useState4","lastRenderedLayout","setLastRenderedLayout","renderingNewLayout","focus","autocenter","allowGroupsOnlyZoomLevel","keys","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","ErrorBoundary","region","EmptyDAGNotice","nodeType","LargeDAGNotice","EntirelyFilteredDAGNotice","LoadingNotice","SVGViewport","ref","r","defaultZoom","interactor","graphWidth","graphHeight","height","graphHasNoMinimumZoom","onClick","onArrowKeyDown","dir","layoutWithoutExternalLinks","pickBy","_assetGraphData$nodes","nextId","closestNodeInDirection","zoomToSVGBox","onDoubleClick","_viewportEl$current2","maxZoom","maxAutocenterZoom","scale","SVGContainer","Math","max","sort","b","group","targetScale","scaleForSVGBounds","AssetGroupNode","JSON","parse","_createElement","onMouseEnter","onMouseLeave","_viewportEl$current3","overflow","AssetNodeMinimal","selected","AssetNode","AssetNodeLink","OptionsOverlay","Checkbox","format","checked","preferAssetRendering","onChange","_selectedDefinitions$","position","QueryRefreshCountdown","refreshState","dataDescription","LaunchAssetObservationButton","preferredJobName","scope","isObservable","all","LaunchAssetExecutionButton","liveDataForStale","QueryOverlay","GraphQueryInput","items","placeholder","popoverPosition","second","RightInfoPanel","RightInfoPanelContent","resetErrorOnChange","_ref6","seen","_ref5","stack","pop","downstream","Boolean","some","push","graphDirectionOf","_ref7","_step2","ledToTarget","_iterator2","err","repositoryDisambiguationRequired","fontWeight","userSelect","size","workspacePath","GroupRepoName","withMiddleTruncation","buildRepoPathForHuman","maxLength","GroupOutline","inset","background","fontFamily","FontFamily","AssetNodeLinkContainer","className","ASSET_LINK_NAME_MAX_LENGTH","_fetchResult$data","ASSET_GRAPH_QUERY","notifyOnNetworkStatusChange","groupSelector","assetNodes","_React$useMemo","matching","hideNodesMatching","reject","buildGraphQueryItems","_filterByQuery","filterByQuery","buildGraphData","hideEdgesToNodesOutsideQuery","removeEdgesToHiddenAssets","inputs","dependencyKeys","dependsOn","solid","outputs","dependedByKeys","dependedBy","graphData","allNodes","allNodesById","groupBy","toGraphId","notSourceAsset","_i","_Object$keys","upstream","_i2","_Object$keys2","_i3","_Object$keys3","_i4","_Object$keys4","calculateGraphDistances","keyBy","g","start","dfsUpstream","depth","flatMap","i","dname","dfsDownstream","ASSET_NODE_FRAGMENT","ORDER","DagsterTag","collapsible","_useStateWithStorage","useStateWithStorage","_useStateWithStorage2","shown","setShown","Caption","ButtonLink","tags","transform","AssetEventSystemTagsTable","indexOf","t","replace","AssetLineageInfoElement","lineage_info","partition_list_label","partitions","partition_list_str","asOf","Tooltip","content","timeFormat","showSeconds","showTimezone","modifiers","offset","enabled","placement","p","reduce","accum","curr","ii","collapsed","setCollapsed","slice","info","ASSET_LINEAGE_FRAGMENT","xHover","setXHover","graphDataByMetadataLabel","extractNumericData","graphLabels","gridTemplateColumns","repeat","Subheading","AssetValueGraph","onHoverX","shrinkable","action","ExternalAnchorButton","href","datapoints","series","numericMetadataLabels","_e$latest","k","append","minY","maxY","minXNumeric","maxXNumeric","existingForPartition","v","isNaN","xNumeric","_step$value","_loop","l","NaN","intValue","parseInt","intRepr","floatValue","_Object$values","serie","xs","ys","min","rows","DAGSTER_TYPE_FRAGMENT","Tag","policyType","AutoMaterializePolicyType","_ref2$inProgressRunId","inProgressRunIds","_ref2$unstartedRunIds","unstartedRunIds","firstRunId","Alert","intent","marginTop","_ref$padding","_ref$intent","launchWithTelemetry","useLaunchWithTelemetry","useLaunchPadHooks","state","setState","client","scopeAssets","count","skipAllTerm","every","hasMaterializePermission","Button","disabled","assets","forceLaunchpad","LAUNCH_ASSET_LOADER_QUERY","assetKeys","assetNodeDefinitionCollisions","showCustomAlert","buildAssetCollisionsAlert","stateForObservingAssets","body","error","executionParams","_x4","_x5","_stateForObservingAssets","_callee2","_client","_forceLaunchpad","_assets$","_assets$2","repoName","_context2","repoAddressAsHumanString","getCommonJob","executionParamsForAssetJob","graphName","opCount","firstOp","opPath","UNDERLYING_OPS_ASSET_NODE_FRAGMENT","NO_PARTITION_KEY","sortByEventTimestamp","groupByPartition","events","definedPartitionKeys","m","orderedPartitionKeys","sorted","params","before","xAxisDefault","time","loadUsingPartitionKeys","_useQuery","ASSET_EVENTS_QUERY","partitionInLast","limit","_asset$definition","assetMaterializations","assetObservations","allPartitionKeys","partitionKeys","ASSET_MATERIALIZATION_FRAGMENT","ASSET_OBSERVATION_FRAGMENT","_templateObject3","message","showingLogs","setShowingLogs","StepLogsDialog","onClose","small","Dialog","isOpen","canOutsideClickClose","canEscapeKeyClose","LogsProvider","logs","RunMetadataProvider","StepLogsModalContent","zIndex","DialogFooter","topBorder","supportsCapturedLogs","useSupportsCapturedLogs","_useState","useState","LogType","_useState2","logType","setComputeLogType","computeLogUrl","setComputeLogUrl","firstLogForStep","eventType","DagsterEventType","firstLogForStepTime","_useState3","hideNonMatches","focusedTime","levels","fromEntries","DefaultLogLevels","logQuery","sinceTime","_useState4","setFilter","_useComputeLogFileKey","useComputeLogFileKeyForSelection","selectionStepKeys","computeLogFileKey","setComputeLogFileKey","logCaptureInfo","LogsContainer","LogsToolbar","onSetLogType","onSetComputeLogKey","steps","counts","onSetFilter","marginLeft","exitedAt","CapturedOrExternalLogPanel","logKey","visibleIOType","onSetDownloadUrl","ComputeLogPanel","ioType","LogsScrollingTable","filterStepKeys","filterKey","stringify"],"sourceRoot":""}